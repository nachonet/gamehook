using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenAPI.GameHook;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class Deprecated_Mapper_Tests : BaseTest
    {
        [TestMethod]
        public async Task Yellow_Deprecated_Player()
        {
            await Load_GB_PokemonYellowDeprecated(8);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0xD157, [146, 130, 142, 147, 147, 80, 146, 135, 128, 150, 141], "SCOTT");
            mapper.AssertAreEqual("player.playerId", 0xD358, [178, 22], 45590);
            mapper.AssertAreEqual("player.teamCount", 0xD162, [1], 1);
            mapper.AssertAreEqual("player.team.0.nickname", 0xD2B4, [128, 132, 145, 142, 131, 128, 130, 147, 152, 139, 80], "AERODACTYL");
            mapper.AssertAreEqual("player.team.0.species", 0xD16A, [171], "Aerodactyl");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0xD16A, [171], "142");
            mapper.AssertAreEqual("player.team.0.level", 0xD18B, [5], 5);
            mapper.AssertAreEqual("player.team.0.expPoints", 0xD178, [0, 0, 156], 156);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0xD16E, [0], " ");
            mapper.AssertAreEqual("player.team.0.maxHp", 0xD18C, [0, 23], 23);
            mapper.AssertAreEqual("player.team.0.hp", 0xD16B, [0, 23], 23);
            mapper.AssertAreEqual("player.team.0.attack", 0xD18E, [0, 16], 16);
            mapper.AssertAreEqual("player.team.0.defense", 0xD190, [0, 11], 11);
            mapper.AssertAreEqual("player.team.0.speed", 0xD192, [0, 18], 18);
            mapper.AssertAreEqual("player.team.0.special", 0xD194, [0, 11], 11);
            mapper.AssertAreEqual("player.team.0.dvAttack", 0xD185, [228], 14);
            mapper.AssertAreEqual("player.team.0.dvDefense", 0xD185, [228], 4);
            mapper.AssertAreEqual("player.team.0.dvSpeed", 0xD186, [105], 6);
            mapper.AssertAreEqual("player.team.0.dvSpecial", 0xD186, [105], 9);
            mapper.AssertAreEqual("player.team.0.move1", 0xD172, [17], "WING ATTACK");
            mapper.AssertAreEqual("player.team.0.move2", 0xD173, [97], "AGILITY");
            mapper.AssertAreEqual("player.team.0.move3", 0xD174, [0], null);
            mapper.AssertAreEqual("player.team.0.move4", 0xD175, [0], null);
            mapper.AssertAreEqual("player.team.0.move1pp", 0xD187, [35], 35);
            mapper.AssertAreEqual("player.team.0.move2pp", 0xD188, [30], 30);
            mapper.AssertAreEqual("player.team.0.move3pp", 0xD189, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4pp", 0xD18A, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0xD187, [35], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0xD188, [30], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0xD189, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0xD18A, [0], 0);
            mapper.AssertAreEqual("player.team.0.statExpHp", 0xD17B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpAttack", 0xD17D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpDefense", 0xD17F, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpSpeed", 0xD181, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpSpecial", 0xD183, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.type1", 0xD16F, [5], "Rock");
            mapper.AssertAreEqual("player.team.0.type2", 0xD170, [2], "Flying");
            mapper.AssertAreEqual("player.team.0.trainerId", 0xD176, [178, 22], 45590);
            mapper.AssertAreEqual("player.team.0.catchRate", 0xD171, [163], 163);
            mapper.AssertAreEqual("player.team.1.nickname", 0xD2BF, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.1.species", 0xD196, [0], null);
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0xD196, [0], null);
            mapper.AssertAreEqual("player.team.1.level", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("player.team.1.expPoints", 0xD1A4, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0xD19A, [0], " ");
            mapper.AssertAreEqual("player.team.1.maxHp", 0xD1B8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.hp", 0xD197, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.attack", 0xD1BA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.defense", 0xD1BC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.speed", 0xD1BE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.special", 0xD1C0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.dvAttack", 0xD1B1, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvDefense", 0xD1B1, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvSpeed", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvSpecial", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1", 0xD19E, [0], null);
            mapper.AssertAreEqual("player.team.1.move2", 0xD19F, [0], null);
            mapper.AssertAreEqual("player.team.1.move3", 0xD1A0, [0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0xD1A1, [0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2pp", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3pp", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("player.team.1.statExpHp", 0xD1A7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpAttack", 0xD1A9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpDefense", 0xD1AB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpSpeed", 0xD1AD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpSpecial", 0xD1AF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.type1", 0xD19B, [0], "Normal");
            mapper.AssertAreEqual("player.team.1.type2", 0xD19C, [0], "Normal");
            mapper.AssertAreEqual("player.team.1.trainerId", 0xD1A2, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.catchRate", 0xD19D, [0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0xD2CA, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.2.species", 0xD1C2, [0], null);
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0xD1C2, [0], null);
            mapper.AssertAreEqual("player.team.2.level", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("player.team.2.expPoints", 0xD1D0, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0xD1C6, [0], " ");
            mapper.AssertAreEqual("player.team.2.maxHp", 0xD1E4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.hp", 0xD1C3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.attack", 0xD1E6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.defense", 0xD1E8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.speed", 0xD1EA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.special", 0xD1EC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.dvAttack", 0xD1DD, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvDefense", 0xD1DD, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvSpeed", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvSpecial", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1", 0xD1CA, [0], null);
            mapper.AssertAreEqual("player.team.2.move2", 0xD1CB, [0], null);
            mapper.AssertAreEqual("player.team.2.move3", 0xD1CC, [0], null);
            mapper.AssertAreEqual("player.team.2.move4", 0xD1CD, [0], null);
            mapper.AssertAreEqual("player.team.2.move1pp", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2pp", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3pp", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4pp", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("player.team.2.statExpHp", 0xD1D3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpAttack", 0xD1D5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpDefense", 0xD1D7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpSpeed", 0xD1D9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpSpecial", 0xD1DB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.type1", 0xD1C7, [0], "Normal");
            mapper.AssertAreEqual("player.team.2.type2", 0xD1C8, [0], "Normal");
            mapper.AssertAreEqual("player.team.2.trainerId", 0xD1CE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.catchRate", 0xD1C9, [0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0xD2D5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.3.species", 0xD1EE, [0], null);
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0xD1EE, [0], null);
            mapper.AssertAreEqual("player.team.3.level", 0xD20F, [0], 0);
            mapper.AssertAreEqual("player.team.3.expPoints", 0xD1FC, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0xD1F2, [0], " ");
            mapper.AssertAreEqual("player.team.3.maxHp", 0xD210, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.hp", 0xD1EF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.attack", 0xD212, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.defense", 0xD214, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.speed", 0xD216, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.special", 0xD218, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.dvAttack", 0xD209, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvDefense", 0xD209, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvSpeed", 0xD20A, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvSpecial", 0xD20A, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1", 0xD1F6, [0], null);
            mapper.AssertAreEqual("player.team.3.move2", 0xD1F7, [0], null);
            mapper.AssertAreEqual("player.team.3.move3", 0xD1F8, [0], null);
            mapper.AssertAreEqual("player.team.3.move4", 0xD1F9, [0], null);
            mapper.AssertAreEqual("player.team.3.move1pp", 0xD20B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2pp", 0xD20C, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3pp", 0xD20D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4pp", 0xD20E, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0xD20B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0xD20C, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0xD20D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0xD20E, [0], 0);
            mapper.AssertAreEqual("player.team.3.statExpHp", 0xD1FF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpAttack", 0xD201, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpDefense", 0xD203, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpSpeed", 0xD205, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpSpecial", 0xD207, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.type1", 0xD1F3, [0], "Normal");
            mapper.AssertAreEqual("player.team.3.type2", 0xD1F4, [0], "Normal");
            mapper.AssertAreEqual("player.team.3.trainerId", 0xD1FA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.catchRate", 0xD1F5, [0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0xD2E0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.4.species", 0xD21A, [0], null);
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0xD21A, [0], null);
            mapper.AssertAreEqual("player.team.4.level", 0xD23B, [0], 0);
            mapper.AssertAreEqual("player.team.4.expPoints", 0xD228, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0xD21E, [0], " ");
            mapper.AssertAreEqual("player.team.4.maxHp", 0xD23C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.hp", 0xD21B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.attack", 0xD23E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.defense", 0xD240, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.speed", 0xD242, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.special", 0xD244, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.dvAttack", 0xD235, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvDefense", 0xD235, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvSpeed", 0xD236, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvSpecial", 0xD236, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1", 0xD222, [0], null);
            mapper.AssertAreEqual("player.team.4.move2", 0xD223, [0], null);
            mapper.AssertAreEqual("player.team.4.move3", 0xD224, [0], null);
            mapper.AssertAreEqual("player.team.4.move4", 0xD225, [0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0xD237, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2pp", 0xD238, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3pp", 0xD239, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4pp", 0xD23A, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0xD237, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0xD238, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0xD239, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0xD23A, [0], 0);
            mapper.AssertAreEqual("player.team.4.statExpHp", 0xD22B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpAttack", 0xD22D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpDefense", 0xD22F, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpSpeed", 0xD231, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpSpecial", 0xD233, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.type1", 0xD21F, [0], "Normal");
            mapper.AssertAreEqual("player.team.4.type2", 0xD220, [0], "Normal");
            mapper.AssertAreEqual("player.team.4.trainerId", 0xD226, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.catchRate", 0xD221, [0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0xD2EB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.5.species", 0xD246, [0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0xD246, [0], null);
            mapper.AssertAreEqual("player.team.5.level", 0xD267, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0xD254, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0xD24A, [0], " ");
            mapper.AssertAreEqual("player.team.5.maxHp", 0xD268, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.hp", 0xD247, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0xD26A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0xD26C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0xD26E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.special", 0xD270, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.dvAttack", 0xD261, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvDefense", 0xD261, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvSpeed", 0xD262, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvSpecial", 0xD262, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0xD24E, [0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0xD24F, [0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0xD250, [0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0xD251, [0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0xD263, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0xD264, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0xD265, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0xD266, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0xD263, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0xD264, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0xD265, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0xD266, [0], 0);
            mapper.AssertAreEqual("player.team.5.statExpHp", 0xD257, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpAttack", 0xD259, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpDefense", 0xD25B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpSpeed", 0xD25D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpSpecial", 0xD25F, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.type1", 0xD24B, [0], "Normal");
            mapper.AssertAreEqual("player.team.5.type2", 0xD24C, [0], "Normal");
            mapper.AssertAreEqual("player.team.5.trainerId", 0xD252, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.catchRate", 0xD24D, [0], 0);
            mapper.AssertAreEqual("player.itemCount", 0xD31C, [0], 0);
            mapper.AssertAreEqual("player.items.0.item", 0xD31D, [255], null);
            mapper.AssertAreEqual("player.items.0.quantity", 0xD31E, [0], 0);
            mapper.AssertAreEqual("player.items.1.item", 0xD31F, [0], null);
            mapper.AssertAreEqual("player.items.1.quantity", 0xD320, [0], 0);
            mapper.AssertAreEqual("player.items.2.item", 0xD321, [0], null);
            mapper.AssertAreEqual("player.items.2.quantity", 0xD322, [0], 0);
            mapper.AssertAreEqual("player.items.3.item", 0xD323, [0], null);
            mapper.AssertAreEqual("player.items.3.quantity", 0xD324, [0], 0);
            mapper.AssertAreEqual("player.items.4.item", 0xD325, [0], null);
            mapper.AssertAreEqual("player.items.4.quantity", 0xD326, [0], 0);
            mapper.AssertAreEqual("player.items.5.item", 0xD327, [0], null);
            mapper.AssertAreEqual("player.items.5.quantity", 0xD328, [0], 0);
            mapper.AssertAreEqual("player.items.6.item", 0xD329, [0], null);
            mapper.AssertAreEqual("player.items.6.quantity", 0xD32A, [0], 0);
            mapper.AssertAreEqual("player.items.7.item", 0xD32B, [0], null);
            mapper.AssertAreEqual("player.items.7.quantity", 0xD32C, [0], 0);
            mapper.AssertAreEqual("player.items.8.item", 0xD32D, [0], null);
            mapper.AssertAreEqual("player.items.8.quantity", 0xD32E, [0], 0);
            mapper.AssertAreEqual("player.items.9.item", 0xD32F, [0], null);
            mapper.AssertAreEqual("player.items.9.quantity", 0xD330, [0], 0);
            mapper.AssertAreEqual("player.items.10.item", 0xD331, [0], null);
            mapper.AssertAreEqual("player.items.10.quantity", 0xD332, [0], 0);
            mapper.AssertAreEqual("player.items.11.item", 0xD333, [0], null);
            mapper.AssertAreEqual("player.items.11.quantity", 0xD334, [0], 0);
            mapper.AssertAreEqual("player.items.12.item", 0xD335, [0], null);
            mapper.AssertAreEqual("player.items.12.quantity", 0xD336, [0], 0);
            mapper.AssertAreEqual("player.items.13.item", 0xD337, [0], null);
            mapper.AssertAreEqual("player.items.13.quantity", 0xD338, [0], 0);
            mapper.AssertAreEqual("player.items.14.item", 0xD339, [0], null);
            mapper.AssertAreEqual("player.items.14.quantity", 0xD33A, [0], 0);
            mapper.AssertAreEqual("player.items.15.item", 0xD33B, [0], null);
            mapper.AssertAreEqual("player.items.15.quantity", 0xD33C, [0], 0);
            mapper.AssertAreEqual("player.items.16.item", 0xD33D, [0], null);
            mapper.AssertAreEqual("player.items.16.quantity", 0xD33E, [0], 0);
            mapper.AssertAreEqual("player.items.17.item", 0xD33F, [0], null);
            mapper.AssertAreEqual("player.items.17.quantity", 0xD340, [0], 0);
            mapper.AssertAreEqual("player.items.18.item", 0xD341, [0], null);
            mapper.AssertAreEqual("player.items.18.quantity", 0xD342, [0], 0);
            mapper.AssertAreEqual("player.items.19.item", 0xD343, [0], null);
            mapper.AssertAreEqual("player.items.19.quantity", 0xD344, [0], 0);
            mapper.AssertAreEqual("player.money", 0xD346, [0, 48, 0], 3000);
            mapper.AssertAreEqual("player.gameCornerCoins", 0xD5A3, [0, 0], 0);
            mapper.AssertAreEqual("player.badges.badge1", 0xD355, [0], false);
            mapper.AssertAreEqual("player.badges.badge2", 0xD355, [0], false);
            mapper.AssertAreEqual("player.badges.badge3", 0xD355, [0], false);
            mapper.AssertAreEqual("player.badges.badge4", 0xD355, [0], false);
            mapper.AssertAreEqual("player.badges.badge5", 0xD355, [0], false);
            mapper.AssertAreEqual("player.badges.badge6", 0xD355, [0], false);
            mapper.AssertAreEqual("player.badges.badge7", 0xD355, [0], false);
            mapper.AssertAreEqual("player.badges.badge8", 0xD355, [0], false);
            mapper.AssertAreEqual("player.starterPokemon", 0xD716, [171], "Aerodactyl");
            mapper.AssertAreEqual("player.joypadSimulation", 0xCD38, [0], false);
            mapper.AssertAreEqual("player.joypadIgnore", 0xCD6B, [0], 0);
        }
        [TestMethod]
        public async Task Yellow_Deprecated_Battle()
        {
            await Load_GB_PokemonYellowDeprecated(8);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("battle.type", 0xD056, [2], "Trainer");
            mapper.AssertAreEqual("battle.animationTurn", 0xFFF3, [1], "Opponent");
            mapper.AssertAreEqual("battle.specialType", 0xD059, [0], "Normal");
            mapper.AssertAreEqual("battle.lowHealthAlarm", 0xCCF6, [0], "Enabled");
            mapper.AssertAreEqual("battle.attackDamage", 0xD0D7, [0], 0);
            mapper.AssertAreEqual("battle.trainer.name", 0xD049, [129, 148, 147, 147, 80, 129, 139, 148, 132, 80, 134], "BUTT");
            mapper.AssertAreEqual("battle.trainer.class", 0xD030, [25], "RIVAL1");
            mapper.AssertAreEqual("battle.trainer.number", 0xD05C, [1], 1);
            mapper.AssertAreEqual("battle.trainer.gymLeader", 0xD05B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.totalPokemon", 0xD89B, [1], 1);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0xD9ED, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0xD8A3, [102], "Eevee");
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0xD8A3, [102], "133");
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0xD8C4, [5], 5);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0xD8B1, [0, 0, 125], 125);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0xD8A7, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0xD8C5, [0, 21], 21);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0xD8A4, [0, 21], 21);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0xD8C7, [0, 11], 11);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0xD8C9, [0, 10], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0xD8CB, [0, 11], 11);
            mapper.AssertAreEqual("battle.trainer.team.0.special", 0xD8CD, [0, 12], 12);
            mapper.AssertAreEqual("battle.trainer.team.0.dvAttack", 0xD8BE, [152], 9);
            mapper.AssertAreEqual("battle.trainer.team.0.dvDefense", 0xD8BE, [152], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.dvSpeed", 0xD8BF, [136], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.dvSpecial", 0xD8BF, [136], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0xD8AB, [33], "TACKLE");
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0xD8AC, [39], "TAIL WHIP");
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0xD8AD, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0xD8AE, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0xD8C0, [35], 35);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0xD8C1, [30], 30);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0xD8C2, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0xD8C3, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0xD8C0, [35], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0xD8C1, [30], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0xD8C2, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0xD8C3, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpHp", 0xD8B4, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpAttack", 0xD8B6, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpDefense", 0xD8B8, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpSpeed", 0xD8BA, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpSpecial", 0xD8BC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.type1", 0xD8A8, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.0.type2", 0xD8A9, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.0.trainerId", 0xD8AF, [178, 22], 45590);
            mapper.AssertAreEqual("battle.trainer.team.0.catchRate", 0xD8AA, [45], 45);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0xD9F8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0xD8CF, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0xD8CF, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0xD8F0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0xD8DD, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0xD8D3, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0xD8F1, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0xD8D0, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0xD8F3, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0xD8F5, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0xD8F7, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.special", 0xD8F9, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvAttack", 0xD8EA, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvDefense", 0xD8EA, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvSpeed", 0xD8EB, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvSpecial", 0xD8EB, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0xD8D7, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0xD8D8, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0xD8D9, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0xD8DA, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0xD8EC, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0xD8ED, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0xD8EE, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0xD8EF, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0xD8EC, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0xD8ED, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0xD8EE, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0xD8EF, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpHp", 0xD8E0, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpAttack", 0xD8E2, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpDefense", 0xD8E4, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpSpeed", 0xD8E6, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpSpecial", 0xD8E8, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.type1", 0xD8D4, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.1.type2", 0xD8D5, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.1.trainerId", 0xD8DB, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.catchRate", 0xD8D6, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0xDA03, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0xD8FB, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0xD8FB, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0xD91C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0xD909, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0xD8FF, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0xD91D, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0xD8FC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0xD91F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0xD921, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0xD923, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.special", 0xD925, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvAttack", 0xD916, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvDefense", 0xD916, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvSpeed", 0xD917, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvSpecial", 0xD917, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0xD903, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0xD904, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0xD905, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0xD906, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0xD918, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0xD919, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0xD91A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0xD91B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0xD918, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0xD919, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0xD91A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0xD91B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpHp", 0xD90C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpAttack", 0xD90E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpDefense", 0xD910, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpSpeed", 0xD912, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpSpecial", 0xD914, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.type1", 0xD900, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.2.type2", 0xD901, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.2.trainerId", 0xD907, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.catchRate", 0xD902, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0xD927, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0xD927, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0xD927, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0xD948, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0xD935, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0xD92B, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0xD949, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0xD928, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0xD94B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0xD94D, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0xD94F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.special", 0xD951, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvAttack", 0xD942, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvDefense", 0xD942, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvSpeed", 0xD943, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvSpecial", 0xD943, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0xD92F, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0xD930, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0xD931, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0xD932, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0xD944, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0xD945, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0xD946, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0xD947, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0xD944, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0xD945, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0xD946, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0xD947, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpHp", 0xD938, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpAttack", 0xD93A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpDefense", 0xD93C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpSpeed", 0xD93E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpSpecial", 0xD940, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.type1", 0xD92C, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.3.type2", 0xD92D, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.3.trainerId", 0xD933, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.catchRate", 0xD92E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0xD953, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0xD953, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0xD953, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0xD974, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0xD961, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0xD957, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0xD975, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0xD954, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0xD977, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0xD979, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0xD97B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.special", 0xD97D, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvAttack", 0xD96E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvDefense", 0xD96E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvSpeed", 0xD96F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvSpecial", 0xD96F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0xD95B, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0xD95C, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0xD95D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0xD95E, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0xD970, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0xD971, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0xD972, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0xD973, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0xD970, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0xD971, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0xD972, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0xD973, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpHp", 0xD964, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpAttack", 0xD966, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpDefense", 0xD968, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpSpeed", 0xD96A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpSpecial", 0xD96C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.type1", 0xD958, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.4.type2", 0xD959, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.4.trainerId", 0xD95F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.catchRate", 0xD95A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0xD97F, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0xD97F, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0xD97F, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0xD9A0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0xD98D, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0xD983, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0xD9A1, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0xD980, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0xD9A3, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0xD9A5, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0xD9A7, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.special", 0xD9A9, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvAttack", 0xD99A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvDefense", 0xD99A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvSpeed", 0xD99B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvSpecial", 0xD99B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0xD987, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0xD988, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0xD989, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0xD98A, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0xD99C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0xD99D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0xD99E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0xD99F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0xD99C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0xD99D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0xD99E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0xD99F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpHp", 0xD990, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpAttack", 0xD992, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpDefense", 0xD994, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpSpeed", 0xD996, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpSpecial", 0xD998, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.type1", 0xD984, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.5.type2", 0xD985, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.5.trainerId", 0xD98B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.catchRate", 0xD986, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0xCC2F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.nickname", 0xD008, [128, 132, 145, 142, 131, 128, 130, 147, 152, 139, 80], "AERODACTYL");
            mapper.AssertAreEqual("battle.yourPokemon.species", 0xD013, [171], "Aerodactyl");
            mapper.AssertAreEqual("battle.yourPokemon.pokedexNumber", 0xD013, [171], "142");
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0xD018, [5], "Rock");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0xD019, [2], "Flying");
            mapper.AssertAreEqual("battle.yourPokemon.level", 0xD021, [5], 5);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0xCD1A, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0xCD1B, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0xCD1C, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecial", 0xCD1D, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0xCD1E, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0xCD1F, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0xD014, [0, 23], 23);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0xD022, [0, 23], 23);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0xD024, [0, 16], 16);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0xD026, [0, 11], 11);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0xD028, [0, 18], 18);
            mapper.AssertAreEqual("battle.yourPokemon.special", 0xD02A, [0, 11], 11);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatHp", 0xD014, [0, 23], 23);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatMaxHp", 0xD022, [0, 23], 23);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatAttack", 0xD024, [0, 16], 16);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatDefense", 0xD026, [0, 11], 11);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatSpeed", 0xD028, [0, 18], 18);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatSpecial", 0xD02A, [0, 11], 11);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatusCondition", 0xD017, [0], " ");
            mapper.AssertAreEqual("battle.yourPokemon.tempStatusConfusion", 0xD061, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.tempStatusBadPoison", 0xD063, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0xD01B, [17], "WING ATTACK");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0xD01C, [97], "AGILITY");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0xD01D, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0xD01E, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0xD02C, [35], 35);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0xD02D, [30], 30);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0xD02E, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0xD02F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.effects.bide", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.thrash", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.multiHit", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.flinch", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.charging", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.multiTurn", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.invulnerable", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.confusion", 0xD061, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.xAccuracy", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.mist", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.focusEnergy", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.hasSubstitute", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.recharge", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.rage", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.leechSeeded", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.toxic", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.lightScreen", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.reflect", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.transformed", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.counters.multiHit", 0xD069, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.confusion", 0xD063, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.toxic", 0xD06A, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.disable", 0xD06C, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0xCFE7, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.species", 0xCFD7, [102], "Eevee");
            mapper.AssertAreEqual("battle.enemyPokemon.pokedexNumber", 0xCFD7, [102], "133");
            mapper.AssertAreEqual("battle.enemyPokemon.type1", 0xCFE9, [0], "Normal");
            mapper.AssertAreEqual("battle.enemyPokemon.type2", 0xCFEA, [0], "Normal");
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0xCFF2, [5], 5);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0xCFF3, [0, 21], 21);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0xCFE5, [0, 21], 21);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0xCFF5, [0, 11], 11);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0xCFF7, [0, 10], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0xCFF9, [0, 11], 11);
            mapper.AssertAreEqual("battle.enemyPokemon.special", 0xCFFB, [0, 12], 12);
            mapper.AssertAreEqual("battle.enemyPokemon.statusCondition", 0xCFE8, [0], " ");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageAttack", 0xCD2E, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageDefense", 0xCD2F, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageSpeed", 0xCD30, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageSpecial", 0xCD31, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageAccuracy", 0xCD32, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageEvasion", 0xCD33, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0xCFEC, [33], "TACKLE");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0xCFED, [39], "TAIL WHIP");
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0xCFEE, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0xCFEF, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.dvAttack", 0xCFF0, [152], 9);
            mapper.AssertAreEqual("battle.enemyPokemon.dvDefense", 0xCFF0, [152], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.dvSpeed", 0xCFF1, [136], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.dvSpecial", 0xCFF1, [136], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.baseHp", 0xD001, [55], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.baseAttack", 0xD002, [55], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.baseDefense", 0xD003, [50], 2);
            mapper.AssertAreEqual("battle.enemyPokemon.baseSpeed", 0xD004, [55], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.baseSpecial", 0xD005, [65], 1);
            mapper.AssertAreEqual("battle.enemyPokemon.baseExp", 0xD007, [92], 12);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.bide", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.thrash", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.multiHit", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.flinch", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.charging", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.multiTurn", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.invulnerable", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.confusion", 0xD066, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.xAccuracy", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.mist", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.focusEnergy", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.hasSubstitute", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.recharge", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.rage", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.leechSeeded", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.toxic", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.lightScreen", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.reflect", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.transformed", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.multiHit", 0xD06E, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.confusion", 0xD06F, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.toxic", 0xD070, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.disable", 0xD071, [0], 0);
            mapper.AssertAreEqual("battle.playerMove.move", 0xCFD1, [0], null);
            mapper.AssertAreEqual("battle.playerMove.effect", 0xCFD2, [0], 0);
            mapper.AssertAreEqual("battle.playerMove.power", 0xCFD3, [0], 0);
            mapper.AssertAreEqual("battle.playerMove.type", 0xCFD4, [0], "Normal");
            mapper.AssertAreEqual("battle.playerMove.accuracy", 0xCFD5, [0], 0);
            mapper.AssertAreEqual("battle.playerMove.maxPP", 0xCFD6, [0], 0);
            mapper.AssertAreEqual("battle.enemyMove.move", 0xCFCB, [0], null);
            mapper.AssertAreEqual("battle.enemyMove.effect", 0xCFCC, [0], 0);
            mapper.AssertAreEqual("battle.enemyMove.power", 0xCFCD, [0], 0);
            mapper.AssertAreEqual("battle.enemyMove.type", 0xCFCE, [0], "Normal");
            mapper.AssertAreEqual("battle.enemyMove.accuracy", 0xCFCF, [0], 0);
            mapper.AssertAreEqual("battle.enemyMove.maxPP", 0xCFD0, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleStart", 0xCCF5, [1], 1);
            mapper.AssertAreEqual("battle.turnInfo.trainerDefeated", 0xCCF6, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.nextAttackDamage", 0xD0D7, [0], 0);
        }
        [TestMethod]
        public async Task Yellow_Deprecated_Overworld()
        {
            await Load_GB_PokemonYellowDeprecated(8);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("overworld.map", 0xD35D, [40], "Pallet Town - Oak's Lab");
            mapper.AssertAreEqual("overworld.y", 0xD360, [6], 6);
            mapper.AssertAreEqual("overworld.x", 0xD361, [5], 5);
            mapper.AssertAreEqual("overworld.encounterRate", 0xD886, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.common.0.level", 0xD887, [130], 130);
            mapper.AssertAreEqual("overworld.encounters.common.0.pokemon", 0xD888, [142], "Clefable");
            mapper.AssertAreEqual("overworld.encounters.common.1.level", 0xD889, [147], 147);
            mapper.AssertAreEqual("overworld.encounters.common.1.pokemon", 0xD88A, [147], "Haunter");
            mapper.AssertAreEqual("overworld.encounters.common.2.level", 0xD88B, [80], 80);
            mapper.AssertAreEqual("overworld.encounters.common.2.pokemon", 0xD88C, [146], null);
            mapper.AssertAreEqual("overworld.encounters.common.3.level", 0xD88D, [135], 135);
            mapper.AssertAreEqual("overworld.encounters.common.3.pokemon", 0xD88E, [128], "Golduck");
            mapper.AssertAreEqual("overworld.encounters.common.4.level", 0xD88F, [150], 150);
            mapper.AssertAreEqual("overworld.encounters.common.4.pokemon", 0xD890, [141], "Electrode");
            mapper.AssertAreEqual("overworld.encounters.uncommon.0.level", 0xD889, [147], 147);
            mapper.AssertAreEqual("overworld.encounters.uncommon.0.pokemon", 0xD88A, [147], "Haunter");
            mapper.AssertAreEqual("overworld.encounters.uncommon.1.level", 0xD891, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.uncommon.1.pokemon", 0xD892, [0], null);
            mapper.AssertAreEqual("overworld.encounters.uncommon.2.level", 0xD893, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.uncommon.2.pokemon", 0xD894, [0], null);
            mapper.AssertAreEqual("overworld.encounters.uncommon.3.level", 0xD895, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.uncommon.3.pokemon", 0xD896, [0], null);
            mapper.AssertAreEqual("overworld.encounters.rare.0.level", 0xD897, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.rare.0.pokemon", 0xD898, [0], null);
            mapper.AssertAreEqual("overworld.encounters.rare.1.level", 0xD899, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.rare.1.pokemon", 0xD89A, [0], null);
            mapper.AssertAreEqual("overworld.repelCount", 0xD0DA, [0], 0);
            mapper.AssertAreEqual("overworld.safariZone.safariTime", 0xD70C, [0], 0);
            mapper.AssertAreEqual("overworld.safariZone.safariBalls", 0xDA46, [0], 0);
            mapper.AssertAreEqual("overworld.safariZone.oppBaitingFactor", 0xCCE8, [0], 0);
            mapper.AssertAreEqual("overworld.mapData.tileset", 0xD366, [5], 5);
            mapper.AssertAreEqual("overworld.mapData.height", 0xD367, [6], 6);
            mapper.AssertAreEqual("overworld.mapData.width", 0xD368, [5], 5);
            mapper.AssertAreEqual("overworld.mapData.palette", 0xD35C, [0], 0);
            mapper.AssertAreEqual("overworld.mapData.lastMapLocation", 0xD365, [10], "Saffron City");
        }
        [TestMethod]
        public async Task Yellow_Deprecated_Audio()
        {
            await Load_GB_PokemonYellowDeprecated(8);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("audio.channel1", 0xC026, [237], 237);
            mapper.AssertAreEqual("audio.channel2", 0xC027, [237], 237);
            mapper.AssertAreEqual("audio.channel3", 0xC028, [237], 237);
            mapper.AssertAreEqual("audio.channel4", 0xC029, [0], 0);
            mapper.AssertAreEqual("audio.channel5", 0xC02A, [0], 0);
            mapper.AssertAreEqual("audio.channel6", 0xC02B, [0], 0);
            mapper.AssertAreEqual("audio.channel7", 0xC02C, [0], 0);
            mapper.AssertAreEqual("audio.channel8", 0xC02D, [0], 0);
            mapper.AssertAreEqual("audio.currentSound", 0xC001, [125], 125);
            mapper.AssertAreEqual("audio.newSoundId", 0xC0EE, [0], 0);
            mapper.AssertAreEqual("audio.audioBank", 0xC0EF, [8], 8);
            mapper.AssertAreEqual("audio.overworldTrackCurrentMap", 0xD35A, [205], "Cinnabar City");
            mapper.AssertAreEqual("audio.audioBankCurrentMap", 0xD35B, [31], 31);
            mapper.AssertAreEqual("audio.volume.channel1", 0xC0DE, [167], 167);
            mapper.AssertAreEqual("audio.volume.channel2", 0xC0DF, [80], 80);
            mapper.AssertAreEqual("audio.volume.channel3", 0xC0E0, [32], 32);
            mapper.AssertAreEqual("audio.volume.channel4", 0xC0E1, [0], 0);
            mapper.AssertAreEqual("audio.volume.channel5", 0xC0E2, [180], 180);
            mapper.AssertAreEqual("audio.volume.channel6", 0xC0E3, [196], 196);
            mapper.AssertAreEqual("audio.volume.channel7", 0xC0E4, [32], 32);
            mapper.AssertAreEqual("audio.volume.channel8", 0xC0E5, [0], 0);
            mapper.AssertAreEqual("audio.tempo.music", 0xC0E8, [0, 112], 112);
            mapper.AssertAreEqual("audio.tempo.sfx", 0xC0EA, [1, 112], 368);
        }
        [TestMethod]
        public async Task Yellow_Deprecated_GameTime()
        {
            await Load_GB_PokemonYellowDeprecated(8);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("gameTime.hours", 0xDA3F, [0, 4], 4);
            mapper.AssertAreEqual("gameTime.minutes", 0xDA41, [0, 43], 43);
            mapper.AssertAreEqual("gameTime.seconds", 0xDA43, [14], 14);
            mapper.AssertAreEqual("gameTime.frames", 0xDA44, [12], 12);
        }
        [TestMethod]
        public async Task Red_Blue_Deprecated_Player()
        {
            await Load_GB_PokemonRedDeprecated(7);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0xD158, [134, 128, 145, 152, 80, 137, 142, 135, 141, 80, 141], "GARY");
            mapper.AssertAreEqual("player.playerId", 0xD359, [121, 95], 31071);
            mapper.AssertAreEqual("player.teamCount", 0xD163, [1], 1);
            mapper.AssertAreEqual("player.team.0.nickname", 0xD2B5, [141, 136, 130, 138, 80, 0, 0, 0, 0, 0, 0], "NICK");
            mapper.AssertAreEqual("player.team.0.species", 0xD16B, [176], "Charmander");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0xD16B, [176], "4");
            mapper.AssertAreEqual("player.team.0.level", 0xD18C, [5], 5);
            mapper.AssertAreEqual("player.team.0.expPoints", 0xD179, [0, 0, 135], 135);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0xD16F, [0], " ");
            mapper.AssertAreEqual("player.team.0.maxHp", 0xD18D, [0, 19], 19);
            mapper.AssertAreEqual("player.team.0.hp", 0xD16C, [0, 19], 19);
            mapper.AssertAreEqual("player.team.0.attack", 0xD18F, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.defense", 0xD191, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.speed", 0xD193, [0, 11], 11);
            mapper.AssertAreEqual("player.team.0.special", 0xD195, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.dvAttack", 0xD186, [9], 0);
            mapper.AssertAreEqual("player.team.0.dvDefense", 0xD186, [9], 9);
            mapper.AssertAreEqual("player.team.0.dvSpeed", 0xD187, [0], 0);
            mapper.AssertAreEqual("player.team.0.dvSpecial", 0xD187, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1", 0xD173, [10], "SCRATCH");
            mapper.AssertAreEqual("player.team.0.move2", 0xD174, [45], "GROWL");
            mapper.AssertAreEqual("player.team.0.move3", 0xD175, [0], null);
            mapper.AssertAreEqual("player.team.0.move4", 0xD176, [0], null);
            mapper.AssertAreEqual("player.team.0.move1pp", 0xD188, [34], 34);
            mapper.AssertAreEqual("player.team.0.move2pp", 0xD189, [40], 40);
            mapper.AssertAreEqual("player.team.0.move3pp", 0xD18A, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4pp", 0xD18B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0xD188, [34], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0xD189, [40], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0xD18A, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0xD18B, [0], 0);
            mapper.AssertAreEqual("player.team.0.statExpHp", 0xD17C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpAttack", 0xD17E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpDefense", 0xD180, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpSpeed", 0xD182, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpSpecial", 0xD184, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.type1", 0xD170, [20], "Fire");
            mapper.AssertAreEqual("player.team.0.type2", 0xD171, [20], "Fire");
            mapper.AssertAreEqual("player.team.0.trainerId", 0xD177, [121, 95], 31071);
            mapper.AssertAreEqual("player.team.0.catchRate", 0xD172, [45], 45);
            mapper.AssertAreEqual("player.team.1.nickname", 0xD2C0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.1.species", 0xD197, [0], null);
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0xD197, [0], null);
            mapper.AssertAreEqual("player.team.1.level", 0xD1B8, [0], 0);
            mapper.AssertAreEqual("player.team.1.expPoints", 0xD1A5, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0xD19B, [0], " ");
            mapper.AssertAreEqual("player.team.1.maxHp", 0xD1B9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.hp", 0xD198, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.attack", 0xD1BB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.defense", 0xD1BD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.speed", 0xD1BF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.special", 0xD1C1, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.dvAttack", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvDefense", 0xD1B2, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvSpeed", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvSpecial", 0xD1B3, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1", 0xD19F, [0], null);
            mapper.AssertAreEqual("player.team.1.move2", 0xD1A0, [0], null);
            mapper.AssertAreEqual("player.team.1.move3", 0xD1A1, [0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0xD1A2, [0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2pp", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3pp", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0xD1B4, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0xD1B5, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0xD1B6, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0xD1B7, [0], 0);
            mapper.AssertAreEqual("player.team.1.statExpHp", 0xD1A8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpAttack", 0xD1AA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpDefense", 0xD1AC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpSpeed", 0xD1AE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpSpecial", 0xD1B0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.type1", 0xD19C, [0], "Normal");
            mapper.AssertAreEqual("player.team.1.type2", 0xD19D, [0], "Normal");
            mapper.AssertAreEqual("player.team.1.trainerId", 0xD1A3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.catchRate", 0xD19E, [0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0xD2CB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.2.species", 0xD1C3, [0], null);
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0xD1C3, [0], null);
            mapper.AssertAreEqual("player.team.2.level", 0xD1E4, [0], 0);
            mapper.AssertAreEqual("player.team.2.expPoints", 0xD1D1, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0xD1C7, [0], " ");
            mapper.AssertAreEqual("player.team.2.maxHp", 0xD1E5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.hp", 0xD1C4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.attack", 0xD1E7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.defense", 0xD1E9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.speed", 0xD1EB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.special", 0xD1ED, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.dvAttack", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvDefense", 0xD1DE, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvSpeed", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvSpecial", 0xD1DF, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1", 0xD1CB, [0], null);
            mapper.AssertAreEqual("player.team.2.move2", 0xD1CC, [0], null);
            mapper.AssertAreEqual("player.team.2.move3", 0xD1CD, [0], null);
            mapper.AssertAreEqual("player.team.2.move4", 0xD1CE, [0], null);
            mapper.AssertAreEqual("player.team.2.move1pp", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2pp", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3pp", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4pp", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0xD1E0, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0xD1E1, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0xD1E2, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0xD1E3, [0], 0);
            mapper.AssertAreEqual("player.team.2.statExpHp", 0xD1D4, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpAttack", 0xD1D6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpDefense", 0xD1D8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpSpeed", 0xD1DA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpSpecial", 0xD1DC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.type1", 0xD1C8, [0], "Normal");
            mapper.AssertAreEqual("player.team.2.type2", 0xD1C9, [0], "Normal");
            mapper.AssertAreEqual("player.team.2.trainerId", 0xD1CF, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.catchRate", 0xD1CA, [0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0xD2D6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.3.species", 0xD1EF, [0], null);
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0xD1EF, [0], null);
            mapper.AssertAreEqual("player.team.3.level", 0xD210, [0], 0);
            mapper.AssertAreEqual("player.team.3.expPoints", 0xD1FD, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0xD1F3, [0], " ");
            mapper.AssertAreEqual("player.team.3.maxHp", 0xD211, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.hp", 0xD1F0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.attack", 0xD213, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.defense", 0xD215, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.speed", 0xD217, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.special", 0xD219, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.dvAttack", 0xD20A, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvDefense", 0xD20A, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvSpeed", 0xD20B, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvSpecial", 0xD20B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1", 0xD1F7, [0], null);
            mapper.AssertAreEqual("player.team.3.move2", 0xD1F8, [0], null);
            mapper.AssertAreEqual("player.team.3.move3", 0xD1F9, [0], null);
            mapper.AssertAreEqual("player.team.3.move4", 0xD1FA, [0], null);
            mapper.AssertAreEqual("player.team.3.move1pp", 0xD20C, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2pp", 0xD20D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3pp", 0xD20E, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4pp", 0xD20F, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0xD20C, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0xD20D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0xD20E, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0xD20F, [0], 0);
            mapper.AssertAreEqual("player.team.3.statExpHp", 0xD200, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpAttack", 0xD202, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpDefense", 0xD204, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpSpeed", 0xD206, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpSpecial", 0xD208, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.type1", 0xD1F4, [0], "Normal");
            mapper.AssertAreEqual("player.team.3.type2", 0xD1F5, [0], "Normal");
            mapper.AssertAreEqual("player.team.3.trainerId", 0xD1FB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.catchRate", 0xD1F6, [0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0xD2E1, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.4.species", 0xD21B, [0], null);
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0xD21B, [0], null);
            mapper.AssertAreEqual("player.team.4.level", 0xD23C, [0], 0);
            mapper.AssertAreEqual("player.team.4.expPoints", 0xD229, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0xD21F, [0], " ");
            mapper.AssertAreEqual("player.team.4.maxHp", 0xD23D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.hp", 0xD21C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.attack", 0xD23F, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.defense", 0xD241, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.speed", 0xD243, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.special", 0xD245, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.dvAttack", 0xD236, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvDefense", 0xD236, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvSpeed", 0xD237, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvSpecial", 0xD237, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1", 0xD223, [0], null);
            mapper.AssertAreEqual("player.team.4.move2", 0xD224, [0], null);
            mapper.AssertAreEqual("player.team.4.move3", 0xD225, [0], null);
            mapper.AssertAreEqual("player.team.4.move4", 0xD226, [0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0xD238, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2pp", 0xD239, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3pp", 0xD23A, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4pp", 0xD23B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0xD238, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0xD239, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0xD23A, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0xD23B, [0], 0);
            mapper.AssertAreEqual("player.team.4.statExpHp", 0xD22C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpAttack", 0xD22E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpDefense", 0xD230, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpSpeed", 0xD232, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpSpecial", 0xD234, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.type1", 0xD220, [0], "Normal");
            mapper.AssertAreEqual("player.team.4.type2", 0xD221, [0], "Normal");
            mapper.AssertAreEqual("player.team.4.trainerId", 0xD227, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.catchRate", 0xD222, [0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0xD2EC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.5.species", 0xD247, [0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0xD247, [0], null);
            mapper.AssertAreEqual("player.team.5.level", 0xD268, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0xD255, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0xD24B, [0], " ");
            mapper.AssertAreEqual("player.team.5.maxHp", 0xD269, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.hp", 0xD248, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0xD26B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0xD26D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0xD26F, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.special", 0xD271, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.dvAttack", 0xD262, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvDefense", 0xD262, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvSpeed", 0xD263, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvSpecial", 0xD263, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0xD24F, [0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0xD250, [0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0xD251, [0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0xD252, [0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0xD264, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0xD265, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0xD266, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0xD267, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0xD264, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0xD265, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0xD266, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0xD267, [0], 0);
            mapper.AssertAreEqual("player.team.5.statExpHp", 0xD258, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpAttack", 0xD25A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpDefense", 0xD25C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpSpeed", 0xD25E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpSpecial", 0xD260, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.type1", 0xD24C, [0], "Normal");
            mapper.AssertAreEqual("player.team.5.type2", 0xD24D, [0], "Normal");
            mapper.AssertAreEqual("player.team.5.trainerId", 0xD253, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.catchRate", 0xD24E, [0], 0);
            mapper.AssertAreEqual("player.itemCount", 0xD31D, [0], 0);
            mapper.AssertAreEqual("player.items.0.item", 0xD31E, [255], null);
            mapper.AssertAreEqual("player.items.0.quantity", 0xD31F, [0], 0);
            mapper.AssertAreEqual("player.items.1.item", 0xD320, [0], null);
            mapper.AssertAreEqual("player.items.1.quantity", 0xD321, [0], 0);
            mapper.AssertAreEqual("player.items.2.item", 0xD322, [0], null);
            mapper.AssertAreEqual("player.items.2.quantity", 0xD323, [0], 0);
            mapper.AssertAreEqual("player.items.3.item", 0xD324, [0], null);
            mapper.AssertAreEqual("player.items.3.quantity", 0xD325, [0], 0);
            mapper.AssertAreEqual("player.items.4.item", 0xD326, [0], null);
            mapper.AssertAreEqual("player.items.4.quantity", 0xD327, [0], 0);
            mapper.AssertAreEqual("player.items.5.item", 0xD328, [0], null);
            mapper.AssertAreEqual("player.items.5.quantity", 0xD329, [0], 0);
            mapper.AssertAreEqual("player.items.6.item", 0xD32A, [0], null);
            mapper.AssertAreEqual("player.items.6.quantity", 0xD32B, [0], 0);
            mapper.AssertAreEqual("player.items.7.item", 0xD32C, [0], null);
            mapper.AssertAreEqual("player.items.7.quantity", 0xD32D, [0], 0);
            mapper.AssertAreEqual("player.items.8.item", 0xD32E, [0], null);
            mapper.AssertAreEqual("player.items.8.quantity", 0xD32F, [0], 0);
            mapper.AssertAreEqual("player.items.9.item", 0xD330, [0], null);
            mapper.AssertAreEqual("player.items.9.quantity", 0xD331, [0], 0);
            mapper.AssertAreEqual("player.items.10.item", 0xD332, [0], null);
            mapper.AssertAreEqual("player.items.10.quantity", 0xD333, [0], 0);
            mapper.AssertAreEqual("player.items.11.item", 0xD334, [0], null);
            mapper.AssertAreEqual("player.items.11.quantity", 0xD335, [0], 0);
            mapper.AssertAreEqual("player.items.12.item", 0xD336, [0], null);
            mapper.AssertAreEqual("player.items.12.quantity", 0xD337, [0], 0);
            mapper.AssertAreEqual("player.items.13.item", 0xD338, [0], null);
            mapper.AssertAreEqual("player.items.13.quantity", 0xD339, [0], 0);
            mapper.AssertAreEqual("player.items.14.item", 0xD33A, [0], null);
            mapper.AssertAreEqual("player.items.14.quantity", 0xD33B, [0], 0);
            mapper.AssertAreEqual("player.items.15.item", 0xD33C, [0], null);
            mapper.AssertAreEqual("player.items.15.quantity", 0xD33D, [0], 0);
            mapper.AssertAreEqual("player.items.16.item", 0xD33E, [0], null);
            mapper.AssertAreEqual("player.items.16.quantity", 0xD33F, [0], 0);
            mapper.AssertAreEqual("player.items.17.item", 0xD340, [0], null);
            mapper.AssertAreEqual("player.items.17.quantity", 0xD341, [0], 0);
            mapper.AssertAreEqual("player.items.18.item", 0xD342, [0], null);
            mapper.AssertAreEqual("player.items.18.quantity", 0xD343, [0], 0);
            mapper.AssertAreEqual("player.items.19.item", 0xD344, [0], null);
            mapper.AssertAreEqual("player.items.19.quantity", 0xD345, [0], 0);
            mapper.AssertAreEqual("player.money", 0xD347, [0, 48, 0], 3000);
            mapper.AssertAreEqual("player.gameCornerCoins", 0xD5A4, [0, 0], 0);
            mapper.AssertAreEqual("player.badges.badge1", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.badge2", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.badge3", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.badge4", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.badge5", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.badge6", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.badge7", 0xD356, [0], false);
            mapper.AssertAreEqual("player.badges.badge8", 0xD356, [0], false);
            mapper.AssertAreEqual("player.starterPokemon", 0xD717, [176], "Charmander");
            mapper.AssertAreEqual("player.joypadSimulation", 0xCD38, [0], false);
            mapper.AssertAreEqual("player.joypadIgnore", 0xCD6B, [0], 0);
        }
        [TestMethod]
        public async Task Red_Blue_Deprecated_Overworld()
        {
            await Load_GB_PokemonRedDeprecated(7);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("overworld.map", 0xD35E, [40], "Pallet Town - Oak's Lab");
            mapper.AssertAreEqual("overworld.y", 0xD361, [6], 6);
            mapper.AssertAreEqual("overworld.x", 0xD362, [5], 5);
            mapper.AssertAreEqual("overworld.encounterRate", 0xD887, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.common.0.level", 0xD888, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.common.0.pokemon", 0xD889, [0], null);
            mapper.AssertAreEqual("overworld.encounters.common.1.level", 0xD88A, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.common.1.pokemon", 0xD88B, [0], null);
            mapper.AssertAreEqual("overworld.encounters.common.2.level", 0xD88C, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.common.2.pokemon", 0xD88D, [0], null);
            mapper.AssertAreEqual("overworld.encounters.common.3.level", 0xD88E, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.common.3.pokemon", 0xD88F, [0], null);
            mapper.AssertAreEqual("overworld.encounters.common.4.level", 0xD890, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.common.4.pokemon", 0xD891, [0], null);
            mapper.AssertAreEqual("overworld.encounters.uncommon.0.level", 0xD88A, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.uncommon.0.pokemon", 0xD88B, [0], null);
            mapper.AssertAreEqual("overworld.encounters.uncommon.1.level", 0xD892, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.uncommon.1.pokemon", 0xD893, [0], null);
            mapper.AssertAreEqual("overworld.encounters.uncommon.2.level", 0xD894, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.uncommon.2.pokemon", 0xD895, [0], null);
            mapper.AssertAreEqual("overworld.encounters.uncommon.3.level", 0xD896, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.uncommon.3.pokemon", 0xD897, [0], null);
            mapper.AssertAreEqual("overworld.encounters.rare.0.level", 0xD898, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.rare.0.pokemon", 0xD899, [0], null);
            mapper.AssertAreEqual("overworld.encounters.rare.1.level", 0xD89A, [0], 0);
            mapper.AssertAreEqual("overworld.encounters.rare.1.pokemon", 0xD89B, [0], null);
            mapper.AssertAreEqual("overworld.repelCount", 0xD0DB, [0], 0);
            mapper.AssertAreEqual("overworld.safariZone.safariTime", 0xD70D, [0], 0);
            mapper.AssertAreEqual("overworld.safariZone.safariBalls", 0xDA47, [0], 0);
            mapper.AssertAreEqual("overworld.safariZone.oppBaitingFactor", 0xCCE9, [0], 0);
            mapper.AssertAreEqual("overworld.mapData.tileset", 0xD367, [5], 5);
            mapper.AssertAreEqual("overworld.mapData.height", 0xD368, [6], 6);
            mapper.AssertAreEqual("overworld.mapData.width", 0xD369, [5], 5);
            mapper.AssertAreEqual("overworld.mapData.palette", 0xD35D, [0], 0);
            mapper.AssertAreEqual("overworld.mapData.lastMapLocation", 0xD366, [10], "Saffron City");
        }
        [TestMethod]
        public async Task Red_Blue_Deprecated_Battle()
        {
            await Load_GB_PokemonRedDeprecated(7);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("battle.type", 0xD057, [2], "Trainer");
            mapper.AssertAreEqual("battle.animationTurn", 0xFFF4, [0], "Player");
            mapper.AssertAreEqual("battle.specialType", 0xD05A, [0], "Normal");
            mapper.AssertAreEqual("battle.lowHealthAlarm", 0xCCF6, [0], "Enabled");
            mapper.AssertAreEqual("battle.attackDamage", 0xD0D8, [0], 0);
            mapper.AssertAreEqual("battle.trainer.name", 0xD04A, [128], "A");
            mapper.AssertAreEqual("battle.trainer.class", 0xD031, [25], "RIVAL1");
            mapper.AssertAreEqual("battle.trainer.number", 0xD05D, [1], 1);
            mapper.AssertAreEqual("battle.trainer.gymLeader", 0xD05C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.totalPokemon", 0xD89C, [1], 1);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0xD9EE, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0xD8A4, [177], "Squirtle");
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0xD8A4, [177], "7");
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0xD8C5, [5], 5);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0xD8B2, [0, 0, 135], 135);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0xD8A8, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0xD8C6, [0, 20], 20);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0xD8A5, [0, 20], 20);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0xD8C8, [0, 10], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0xD8CA, [0, 12], 12);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0xD8CC, [0, 10], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.special", 0xD8CE, [0, 10], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.dvAttack", 0xD8BF, [152], 9);
            mapper.AssertAreEqual("battle.trainer.team.0.dvDefense", 0xD8BF, [152], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.dvSpeed", 0xD8C0, [136], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.dvSpecial", 0xD8C0, [136], 8);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0xD8AC, [33], "TACKLE");
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0xD8AD, [39], "TAIL WHIP");
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0xD8AE, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0xD8AF, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0xD8C1, [35], 35);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0xD8C2, [30], 30);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0xD8C3, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0xD8C4, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0xD8C1, [35], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0xD8C2, [30], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0xD8C3, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0xD8C4, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpHp", 0xD8B5, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpAttack", 0xD8B7, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpDefense", 0xD8B9, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpSpeed", 0xD8BB, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpSpecial", 0xD8BD, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.type1", 0xD8A9, [21], "Water");
            mapper.AssertAreEqual("battle.trainer.team.0.type2", 0xD8AA, [21], "Water");
            mapper.AssertAreEqual("battle.trainer.team.0.trainerId", 0xD8B0, [121, 95], 31071);
            mapper.AssertAreEqual("battle.trainer.team.0.catchRate", 0xD8AB, [45], 45);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0xD9F9, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0xD8D0, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0xD8D0, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0xD8F1, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0xD8DE, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0xD8D4, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0xD8F2, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0xD8D1, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0xD8F4, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0xD8F6, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0xD8F8, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.special", 0xD8FA, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvAttack", 0xD8EB, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvDefense", 0xD8EB, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvSpeed", 0xD8EC, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvSpecial", 0xD8EC, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0xD8D8, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0xD8D9, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0xD8DA, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0xD8DB, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0xD8ED, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0xD8EE, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0xD8EF, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0xD8F0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0xD8ED, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0xD8EE, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0xD8EF, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0xD8F0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpHp", 0xD8E1, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpAttack", 0xD8E3, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpDefense", 0xD8E5, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpSpeed", 0xD8E7, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpSpecial", 0xD8E9, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.type1", 0xD8D5, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.1.type2", 0xD8D6, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.1.trainerId", 0xD8DC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.catchRate", 0xD8D7, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0xDA04, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0xD8FC, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0xD8FC, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0xD91D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0xD90A, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0xD900, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0xD91E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0xD8FD, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0xD920, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0xD922, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0xD924, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.special", 0xD926, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvAttack", 0xD917, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvDefense", 0xD917, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvSpeed", 0xD918, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvSpecial", 0xD918, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0xD904, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0xD905, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0xD906, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0xD907, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0xD919, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0xD91A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0xD91B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0xD91C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0xD919, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0xD91A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0xD91B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0xD91C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpHp", 0xD90D, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpAttack", 0xD90F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpDefense", 0xD911, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpSpeed", 0xD913, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpSpecial", 0xD915, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.type1", 0xD901, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.2.type2", 0xD902, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.2.trainerId", 0xD908, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.catchRate", 0xD903, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0xDA0F, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0xD928, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0xD928, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0xD949, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0xD936, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0xD92C, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0xD94A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0xD929, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0xD94C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0xD94E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0xD950, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.special", 0xD952, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvAttack", 0xD943, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvDefense", 0xD943, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvSpeed", 0xD944, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvSpecial", 0xD944, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0xD930, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0xD931, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0xD932, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0xD933, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0xD945, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0xD946, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0xD947, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0xD948, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0xD945, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0xD946, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0xD947, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0xD948, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpHp", 0xD939, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpAttack", 0xD93B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpDefense", 0xD93D, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpSpeed", 0xD93F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpSpecial", 0xD941, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.type1", 0xD92D, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.3.type2", 0xD92E, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.3.trainerId", 0xD934, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.catchRate", 0xD92F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0xDA1A, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0xD954, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0xD954, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0xD975, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0xD962, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0xD958, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0xD976, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0xD955, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0xD978, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0xD97A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0xD97C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.special", 0xD97E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvAttack", 0xD96F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvDefense", 0xD96F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvSpeed", 0xD970, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvSpecial", 0xD970, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0xD95C, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0xD95D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0xD95E, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0xD95F, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0xD971, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0xD972, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0xD973, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0xD974, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0xD971, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0xD972, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0xD973, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0xD974, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpHp", 0xD965, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpAttack", 0xD967, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpDefense", 0xD969, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpSpeed", 0xD96B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpSpecial", 0xD96D, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.type1", 0xD959, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.4.type2", 0xD95A, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.4.trainerId", 0xD960, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.catchRate", 0xD95B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0xDA25, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0xD980, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0xD980, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0xD9A1, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0xD98E, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0xD984, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0xD9A2, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0xD981, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0xD9A4, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0xD9A6, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0xD9A8, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.special", 0xD9AA, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvAttack", 0xD99B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvDefense", 0xD99B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvSpeed", 0xD99C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvSpecial", 0xD99C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0xD988, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0xD989, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0xD98A, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0xD98B, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0xD99D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0xD99E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0xD99F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0xD9A0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0xD99D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0xD99E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0xD99F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0xD9A0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpHp", 0xD991, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpAttack", 0xD993, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpDefense", 0xD995, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpSpeed", 0xD997, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpSpecial", 0xD999, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.type1", 0xD985, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.5.type2", 0xD986, [0], "Normal");
            mapper.AssertAreEqual("battle.trainer.team.5.trainerId", 0xD98C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.catchRate", 0xD987, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0xCC2F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.nickname", 0xD009, [141, 136, 130, 138, 80, 0, 0, 0, 0, 0, 0], "NICK");
            mapper.AssertAreEqual("battle.yourPokemon.species", 0xD014, [176], "Charmander");
            mapper.AssertAreEqual("battle.yourPokemon.pokedexNumber", 0xD014, [176], "4");
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0xD019, [20], "Fire");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0xD01A, [20], "Fire");
            mapper.AssertAreEqual("battle.yourPokemon.level", 0xD022, [5], 5);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0xCD1A, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0xCD1B, [6], "-1");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0xCD1C, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecial", 0xCD1D, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0xCD1E, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0xCD1F, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0xD015, [0, 19], 19);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0xD023, [0, 19], 19);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0xD025, [0, 10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0xD027, [0, 6], 6);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0xD029, [0, 11], 11);
            mapper.AssertAreEqual("battle.yourPokemon.special", 0xD02B, [0, 10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatHp", 0xD015, [0, 19], 19);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatMaxHp", 0xD023, [0, 19], 19);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatAttack", 0xD025, [0, 10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatDefense", 0xD027, [0, 6], 6);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatSpeed", 0xD029, [0, 11], 11);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatSpecial", 0xD02B, [0, 10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatusCondition", 0xD018, [0], " ");
            mapper.AssertAreEqual("battle.yourPokemon.tempStatusConfusion", 0xD062, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.tempStatusBadPoison", 0xD064, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0xD01C, [10], "SCRATCH");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0xD01D, [45], "GROWL");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0xD01E, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0xD01F, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0xD02D, [34], 34);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0xD02E, [40], 40);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0xD02F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0xD030, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.effects.bide", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.thrash", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.multiHit", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.flinch", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.charging", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.multiTurn", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.invulnerable", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.confusion", 0xD062, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.xAccuracy", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.mist", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.focusEnergy", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.hasSubstitute", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.recharge", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.rage", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.leechSeeded", 0xD063, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.toxic", 0xD064, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.lightScreen", 0xD064, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.reflect", 0xD064, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.effects.transformed", 0xD064, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.counters.multiHit", 0xD06A, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.confusion", 0xD064, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.toxic", 0xD06B, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.disable", 0xD06D, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0xCFE8, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.species", 0xCFD8, [177], "Squirtle");
            mapper.AssertAreEqual("battle.enemyPokemon.pokedexNumber", 0xCFD8, [177], "7");
            mapper.AssertAreEqual("battle.enemyPokemon.type1", 0xCFEA, [21], "Water");
            mapper.AssertAreEqual("battle.enemyPokemon.type2", 0xCFEB, [21], "Water");
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0xCFF3, [5], 5);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0xCFF4, [0, 20], 20);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0xCFE6, [0, 17], 17);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0xCFF6, [0, 10], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0xCFF8, [0, 12], 12);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0xCFFA, [0, 10], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.special", 0xCFFC, [0, 10], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.statusCondition", 0xCFE9, [0], " ");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageAttack", 0xCD2E, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageDefense", 0xCD2F, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageSpeed", 0xCD30, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageSpecial", 0xCD31, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageAccuracy", 0xCD32, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modEnemyStageEvasion", 0xCD33, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0xCFED, [33], "TACKLE");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0xCFEE, [39], "TAIL WHIP");
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0xCFEF, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0xCFF0, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.dvAttack", 0xCFF1, [152], 9);
            mapper.AssertAreEqual("battle.enemyPokemon.dvDefense", 0xCFF1, [152], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.dvSpeed", 0xCFF2, [136], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.dvSpecial", 0xCFF2, [136], 8);
            mapper.AssertAreEqual("battle.enemyPokemon.baseHp", 0xD002, [44], 12);
            mapper.AssertAreEqual("battle.enemyPokemon.baseAttack", 0xD003, [48], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.baseDefense", 0xD004, [65], 1);
            mapper.AssertAreEqual("battle.enemyPokemon.baseSpeed", 0xD005, [43], 11);
            mapper.AssertAreEqual("battle.enemyPokemon.baseSpecial", 0xD006, [50], 2);
            mapper.AssertAreEqual("battle.enemyPokemon.baseExp", 0xD008, [66], 2);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.bide", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.thrash", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.multiHit", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.flinch", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.charging", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.multiTurn", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.invulnerable", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.confusion", 0xD067, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.xAccuracy", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.mist", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.focusEnergy", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.hasSubstitute", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.recharge", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.rage", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.leechSeeded", 0xD068, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.toxic", 0xD069, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.lightScreen", 0xD069, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.reflect", 0xD069, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.effects.transformed", 0xD069, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.multiHit", 0xD06F, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.confusion", 0xD070, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.toxic", 0xD071, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.disable", 0xD072, [0], 0);
            mapper.AssertAreEqual("battle.playerMove.move", 0xCFD2, [10], "SCRATCH");
            mapper.AssertAreEqual("battle.playerMove.effect", 0xCFD3, [0], 0);
            mapper.AssertAreEqual("battle.playerMove.power", 0xCFD4, [40], 40);
            mapper.AssertAreEqual("battle.playerMove.type", 0xCFD5, [0], "Normal");
            mapper.AssertAreEqual("battle.playerMove.accuracy", 0xCFD6, [255], 100);
            mapper.AssertAreEqual("battle.playerMove.maxPP", 0xCFD7, [35], 35);
            mapper.AssertAreEqual("battle.enemyMove.move", 0xCFCC, [39], "TAIL WHIP");
            mapper.AssertAreEqual("battle.enemyMove.effect", 0xCFCD, [19], 19);
            mapper.AssertAreEqual("battle.enemyMove.power", 0xCFCE, [0], 0);
            mapper.AssertAreEqual("battle.enemyMove.type", 0xCFCF, [0], "Normal");
            mapper.AssertAreEqual("battle.enemyMove.accuracy", 0xCFD0, [255], 100);
            mapper.AssertAreEqual("battle.enemyMove.maxPP", 0xCFD1, [30], 30);
            mapper.AssertAreEqual("battle.turnInfo.battleStart", 0xCCF5, [1], 1);
            mapper.AssertAreEqual("battle.turnInfo.trainerDefeated", 0xCCF6, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.nextAttackDamage", 0xD0D8, [0], 0);
        }
        [TestMethod]
        public async Task Red_Blue_Deprecated_Options()
        {
            await Load_GB_PokemonRedDeprecated(7);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("options.textSpeed1", 0xD355, [193], false);
            mapper.AssertAreEqual("options.textSpeed2", 0xD355, [193], false);
            mapper.AssertAreEqual("options.sound1", 0xD355, [193], false);
            mapper.AssertAreEqual("options.sound2", 0xD355, [193], false);
            mapper.AssertAreEqual("options.battleStyle", 0xD355, [193], true);
            mapper.AssertAreEqual("options.battleAnimations", 0xD355, [193], true);
            mapper.AssertAreEqual("options.soloChallenge", 0xD355, [193], "Fast Text, No Animations, Battlestyle Set");
        }
        [TestMethod]
        public async Task Red_Blue_Deprecated_GameTime()
        {
            await Load_GB_PokemonRedDeprecated(7);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("gameTime.hours", 0xDA40, [0, 0], 0);
            mapper.AssertAreEqual("gameTime.minutes", 0xDA42, [0, 2], 2);
            mapper.AssertAreEqual("gameTime.seconds", 0xDA44, [28], 28);
            mapper.AssertAreEqual("gameTime.frames", 0xDA45, [8], 8);
        }
        [TestMethod]
        public async Task Red_Blue_Deprecated_Audio()
        {
            await Load_GB_PokemonRedDeprecated(7);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("audio.channel1", 0xC027, [237], 237);
            mapper.AssertAreEqual("audio.channel2", 0xC028, [237], 237);
            mapper.AssertAreEqual("audio.channel3", 0xC029, [0], 0);
            mapper.AssertAreEqual("audio.channel4", 0xC02A, [0], 0);
            mapper.AssertAreEqual("audio.channel5", 0xC02B, [0], 0);
            mapper.AssertAreEqual("audio.channel6", 0xC02C, [0], 0);
            mapper.AssertAreEqual("audio.channel7", 0xC02D, [0], 0);
            mapper.AssertAreEqual("audio.channel8", 0xC02E, [9], 9);
            mapper.AssertAreEqual("audio.currentSound", 0xC002, [0], 0);
            mapper.AssertAreEqual("audio.newSoundId", 0xC0EF, [8], 8);
            mapper.AssertAreEqual("audio.audioBank", 0xC0F0, [8], 8);
            mapper.AssertAreEqual("audio.overworldTrackCurrentMap", 0xD359, [121], null);
            mapper.AssertAreEqual("audio.audioBankCurrentMap", 0xD35A, [95], 95);
            mapper.AssertAreEqual("audio.volume.channel1", 0xC0DF, [183], 183);
            mapper.AssertAreEqual("audio.volume.channel2", 0xC0E0, [32], 32);
            mapper.AssertAreEqual("audio.volume.channel3", 0xC0E1, [0], 0);
            mapper.AssertAreEqual("audio.volume.channel4", 0xC0E2, [180], 180);
            mapper.AssertAreEqual("audio.volume.channel5", 0xC0E3, [196], 196);
            mapper.AssertAreEqual("audio.volume.channel6", 0xC0E4, [32], 32);
            mapper.AssertAreEqual("audio.volume.channel7", 0xC0E5, [0], 0);
            mapper.AssertAreEqual("audio.volume.channel8", 0xC0E6, [4], 4);
            mapper.AssertAreEqual("audio.tempo.music", 0xC0E9, [112, 1], 28673);
            mapper.AssertAreEqual("audio.tempo.sfx", 0xC0EB, [0, 65], 65);
        }
        [TestMethod]
        public async Task Red_Blue_Deprecated_Screen()
        {
            await Load_GB_PokemonRedDeprecated(7);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("screen.text.prompt", 0xC4F2, [141], "");
            mapper.AssertAreEqual("screen.menu.currentItem", 0xCC26, [0], 0);
            mapper.AssertAreEqual("screen.tiles.column1.tile1", 0x9C0D, [7], 7);
            mapper.AssertAreEqual("screen.tiles.column1.tile2", 0x9C2D, [8], 8);
            mapper.AssertAreEqual("screen.tiles.column1.tile3", 0x9C4D, [9], 9);
            mapper.AssertAreEqual("screen.tiles.column1.tile4", 0x9C6D, [10], 10);
            mapper.AssertAreEqual("screen.tiles.column1.tile5", 0x9C8D, [11], 11);
            mapper.AssertAreEqual("screen.tiles.column1.tile6", 0x9CAD, [12], 12);
            mapper.AssertAreEqual("screen.tiles.column1.tile7", 0x9CCD, [13], 13);
        }
        [TestMethod]
        public async Task Gold_Silver_Deprecated_Player()
        {
            await Load_GBC_PokemonGoldDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.playerId", 0xD1A1, [185, 218], 47578);
            mapper.AssertAreEqual("player.name", 0xD1A3, [128, 128, 128, 128, 128, 128, 128, 80, 0, 0, 0], "AAAAAAA");
            mapper.AssertAreEqual("player.team.0.nickname", 0xDB8C, [148, 145, 146, 128, 145, 136, 141, 134, 80, 80, 80], "URSARING");
            mapper.AssertAreEqual("player.team.0.species", 0xDA2A, [217], "Ursaring");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0xDA2A, [217], "217");
            mapper.AssertAreEqual("player.team.0.level", 0xDA49, [76], 76);
            mapper.AssertAreEqual("player.team.0.expPoints", 0xDA32, [6, 179, 158], 439198);
            mapper.AssertAreEqual("player.team.0.friendship", 0xDA45, [255], 255);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0xDA4A, [0], null);
            mapper.AssertAreEqual("player.team.0.heldItem", 0xDA2B, [146], "Leftovers");
            mapper.AssertAreEqual("player.team.0.hp", 0xDA4C, [1, 1], 257);
            mapper.AssertAreEqual("player.team.0.maxHp", 0xDA4E, [1, 1], 257);
            mapper.AssertAreEqual("player.team.0.attack", 0xDA50, [0, 242], 242);
            mapper.AssertAreEqual("player.team.0.defense", 0xDA52, [0, 150], 150);
            mapper.AssertAreEqual("player.team.0.specialAttack", 0xDA56, [0, 170], 170);
            mapper.AssertAreEqual("player.team.0.specialDefense", 0xDA58, [0, 170], 170);
            mapper.AssertAreEqual("player.team.0.speed", 0xDA54, [0, 143], 143);
            mapper.AssertAreEqual("player.team.0.dvAttack", 0xDA3F, [32], 2);
            mapper.AssertAreEqual("player.team.0.dvDefense", 0xDA3F, [32], 0);
            mapper.AssertAreEqual("player.team.0.dvSpeed", 0xDA40, [219], 13);
            mapper.AssertAreEqual("player.team.0.dvSpecial", 0xDA40, [219], 11);
            mapper.AssertAreEqual("player.team.0.move1", 0xDA2C, [216], "Return");
            mapper.AssertAreEqual("player.team.0.move2", 0xDA2D, [214], "Sleep Talk");
            mapper.AssertAreEqual("player.team.0.move3", 0xDA2E, [182], "Protect");
            mapper.AssertAreEqual("player.team.0.move4", 0xDA2F, [156], "Rest");
            mapper.AssertAreEqual("player.team.0.move1pp", 0xDA41, [20], 20);
            mapper.AssertAreEqual("player.team.0.move2pp", 0xDA42, [10], 10);
            mapper.AssertAreEqual("player.team.0.move3pp", 0xDA43, [9], 9);
            mapper.AssertAreEqual("player.team.0.move4pp", 0xDA44, [9], 9);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0xDA41, [20], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0xDA42, [10], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0xDA43, [9], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0xDA44, [9], 0);
            mapper.AssertAreEqual("player.team.0.statExpHp", 0xDA35, [95, 87], 24407);
            mapper.AssertAreEqual("player.team.0.statExpAttack", 0xDA37, [150, 200], 38600);
            mapper.AssertAreEqual("player.team.0.statExpDefense", 0xDA39, [105, 66], 26946);
            mapper.AssertAreEqual("player.team.0.statExpSpeed", 0xDA3B, [131, 93], 33629);
            mapper.AssertAreEqual("player.team.0.statExpSpecial", 0xDA3D, [134, 78], 34382);
            mapper.AssertAreEqual("player.team.0.pokerus", 0xDA46, [0], 0);
            mapper.AssertAreEqual("player.team.0.trainerId", 0xDA30, [185, 218], 47578);
            mapper.AssertAreEqual("player.team.1.nickname", 0xDB97, [143, 128, 145, 128, 146, 80, 80, 80, 80, 80, 80], "PARAS");
            mapper.AssertAreEqual("player.team.1.species", 0xDA5A, [46], "Paras");
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0xDA5A, [46], "46");
            mapper.AssertAreEqual("player.team.1.level", 0xDA79, [6], 6);
            mapper.AssertAreEqual("player.team.1.expPoints", 0xDA62, [0, 0, 216], 216);
            mapper.AssertAreEqual("player.team.1.friendship", 0xDA75, [141], 141);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0xDA7A, [0], null);
            mapper.AssertAreEqual("player.team.1.heldItem", 0xDA5B, [86], "TinyMushroom");
            mapper.AssertAreEqual("player.team.1.hp", 0xDA7C, [0, 20], 20);
            mapper.AssertAreEqual("player.team.1.maxHp", 0xDA7E, [0, 20], 20);
            mapper.AssertAreEqual("player.team.1.attack", 0xDA80, [0, 14], 14);
            mapper.AssertAreEqual("player.team.1.defense", 0xDA82, [0, 13], 13);
            mapper.AssertAreEqual("player.team.1.specialAttack", 0xDA86, [0, 11], 11);
            mapper.AssertAreEqual("player.team.1.specialDefense", 0xDA88, [0, 13], 13);
            mapper.AssertAreEqual("player.team.1.speed", 0xDA84, [0, 9], 9);
            mapper.AssertAreEqual("player.team.1.dvAttack", 0xDA6F, [173], 10);
            mapper.AssertAreEqual("player.team.1.dvDefense", 0xDA6F, [173], 13);
            mapper.AssertAreEqual("player.team.1.dvSpeed", 0xDA70, [156], 9);
            mapper.AssertAreEqual("player.team.1.dvSpecial", 0xDA70, [156], 12);
            mapper.AssertAreEqual("player.team.1.move1", 0xDA5C, [10], "Scratch");
            mapper.AssertAreEqual("player.team.1.move2", 0xDA5D, [15], "Cut");
            mapper.AssertAreEqual("player.team.1.move3", 0xDA5E, [0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0xDA5F, [0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0xDA71, [35], 35);
            mapper.AssertAreEqual("player.team.1.move2pp", 0xDA72, [30], 30);
            mapper.AssertAreEqual("player.team.1.move3pp", 0xDA73, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0xDA74, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0xDA71, [35], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0xDA72, [30], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0xDA73, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0xDA74, [0], 0);
            mapper.AssertAreEqual("player.team.1.statExpHp", 0xDA65, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpAttack", 0xDA67, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpDefense", 0xDA69, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpSpeed", 0xDA6B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpSpecial", 0xDA6D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.pokerus", 0xDA76, [0], 0);
            mapper.AssertAreEqual("player.team.1.trainerId", 0xDA60, [185, 218], 47578);
            mapper.AssertAreEqual("player.team.2.nickname", 0xDBA2, [138, 132, 141, 152, 128, 80, 145, 128, 141, 131, 152], "KENYA");
            mapper.AssertAreEqual("player.team.2.species", 0xDA8A, [21], "Spearow");
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0xDA8A, [21], "21");
            mapper.AssertAreEqual("player.team.2.level", 0xDAA9, [10], 10);
            mapper.AssertAreEqual("player.team.2.expPoints", 0xDA92, [0, 3, 232], 1000);
            mapper.AssertAreEqual("player.team.2.friendship", 0xDAA5, [140], 140);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0xDAAA, [0], null);
            mapper.AssertAreEqual("player.team.2.heldItem", 0xDA8B, [158], "Flower Mail");
            mapper.AssertAreEqual("player.team.2.hp", 0xDAAC, [0, 30], 30);
            mapper.AssertAreEqual("player.team.2.maxHp", 0xDAAE, [0, 30], 30);
            mapper.AssertAreEqual("player.team.2.attack", 0xDAB0, [0, 20], 20);
            mapper.AssertAreEqual("player.team.2.defense", 0xDAB2, [0, 11], 11);
            mapper.AssertAreEqual("player.team.2.specialAttack", 0xDAB6, [0, 11], 11);
            mapper.AssertAreEqual("player.team.2.specialDefense", 0xDAB8, [0, 11], 11);
            mapper.AssertAreEqual("player.team.2.speed", 0xDAB4, [0, 22], 22);
            mapper.AssertAreEqual("player.team.2.dvAttack", 0xDA9F, [242], 15);
            mapper.AssertAreEqual("player.team.2.dvDefense", 0xDA9F, [242], 2);
            mapper.AssertAreEqual("player.team.2.dvSpeed", 0xDAA0, [242], 15);
            mapper.AssertAreEqual("player.team.2.dvSpecial", 0xDAA0, [242], 2);
            mapper.AssertAreEqual("player.team.2.move1", 0xDA8C, [64], "Peck");
            mapper.AssertAreEqual("player.team.2.move2", 0xDA8D, [45], "Growl");
            mapper.AssertAreEqual("player.team.2.move3", 0xDA8E, [43], "Leer");
            mapper.AssertAreEqual("player.team.2.move4", 0xDA8F, [19], "Fly");
            mapper.AssertAreEqual("player.team.2.move1pp", 0xDAA1, [35], 35);
            mapper.AssertAreEqual("player.team.2.move2pp", 0xDAA2, [40], 40);
            mapper.AssertAreEqual("player.team.2.move3pp", 0xDAA3, [30], 30);
            mapper.AssertAreEqual("player.team.2.move4pp", 0xDAA4, [15], 15);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0xDAA1, [35], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0xDAA2, [40], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0xDAA3, [30], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0xDAA4, [15], 0);
            mapper.AssertAreEqual("player.team.2.statExpHp", 0xDA95, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpAttack", 0xDA97, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpDefense", 0xDA99, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpSpeed", 0xDA9B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpSpecial", 0xDA9D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0xDAA6, [0], 0);
            mapper.AssertAreEqual("player.team.2.trainerId", 0xDA90, [3, 233], 1001);
            mapper.AssertAreEqual("player.team.3.nickname", 0xDBAD, [138, 145, 128, 129, 129, 152, 80, 80, 80, 80, 80], "KRABBY");
            mapper.AssertAreEqual("player.team.3.species", 0xDABA, [98], "Krabby");
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0xDABA, [98], "98");
            mapper.AssertAreEqual("player.team.3.level", 0xDAD9, [20], 20);
            mapper.AssertAreEqual("player.team.3.expPoints", 0xDAC2, [0, 31, 64], 8000);
            mapper.AssertAreEqual("player.team.3.friendship", 0xDAD5, [136], 136);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0xDADA, [0], null);
            mapper.AssertAreEqual("player.team.3.heldItem", 0xDABB, [0], null);
            mapper.AssertAreEqual("player.team.3.hp", 0xDADC, [0, 47], 47);
            mapper.AssertAreEqual("player.team.3.maxHp", 0xDADE, [0, 47], 47);
            mapper.AssertAreEqual("player.team.3.attack", 0xDAE0, [0, 48], 48);
            mapper.AssertAreEqual("player.team.3.defense", 0xDAE2, [0, 44], 44);
            mapper.AssertAreEqual("player.team.3.specialAttack", 0xDAE6, [0, 20], 20);
            mapper.AssertAreEqual("player.team.3.specialDefense", 0xDAE8, [0, 20], 20);
            mapper.AssertAreEqual("player.team.3.speed", 0xDAE4, [0, 26], 26);
            mapper.AssertAreEqual("player.team.3.dvAttack", 0xDACF, [57], 3);
            mapper.AssertAreEqual("player.team.3.dvDefense", 0xDACF, [57], 9);
            mapper.AssertAreEqual("player.team.3.dvSpeed", 0xDAD0, [62], 3);
            mapper.AssertAreEqual("player.team.3.dvSpecial", 0xDAD0, [62], 14);
            mapper.AssertAreEqual("player.team.3.move1", 0xDABC, [57], "Surf");
            mapper.AssertAreEqual("player.team.3.move2", 0xDABD, [70], "Strength");
            mapper.AssertAreEqual("player.team.3.move3", 0xDABE, [250], "Whirlpool");
            mapper.AssertAreEqual("player.team.3.move4", 0xDABF, [106], "Harden");
            mapper.AssertAreEqual("player.team.3.move1pp", 0xDAD1, [15], 15);
            mapper.AssertAreEqual("player.team.3.move2pp", 0xDAD2, [15], 15);
            mapper.AssertAreEqual("player.team.3.move3pp", 0xDAD3, [15], 15);
            mapper.AssertAreEqual("player.team.3.move4pp", 0xDAD4, [30], 30);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0xDAD1, [15], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0xDAD2, [15], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0xDAD3, [15], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0xDAD4, [30], 0);
            mapper.AssertAreEqual("player.team.3.statExpHp", 0xDAC5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpAttack", 0xDAC7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpDefense", 0xDAC9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpSpeed", 0xDACB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpSpecial", 0xDACD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0xDAD6, [0], 0);
            mapper.AssertAreEqual("player.team.3.trainerId", 0xDAC0, [185, 218], 47578);
            mapper.AssertAreEqual("player.team.4.nickname", 0xDBB8, [134, 152, 128, 145, 128, 131, 142, 146, 80, 80, 80], "GYARADOS");
            mapper.AssertAreEqual("player.team.4.species", 0xDAEA, [130], "Gyarados");
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0xDAEA, [130], "130");
            mapper.AssertAreEqual("player.team.4.level", 0xDB09, [20], 20);
            mapper.AssertAreEqual("player.team.4.expPoints", 0xDAF2, [0, 39, 16], 10000);
            mapper.AssertAreEqual("player.team.4.friendship", 0xDB05, [117], 117);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0xDB0A, [0], null);
            mapper.AssertAreEqual("player.team.4.heldItem", 0xDAEB, [0], null);
            mapper.AssertAreEqual("player.team.4.hp", 0xDB0C, [0, 70], 70);
            mapper.AssertAreEqual("player.team.4.maxHp", 0xDB0E, [0, 70], 70);
            mapper.AssertAreEqual("player.team.4.attack", 0xDB10, [0, 55], 55);
            mapper.AssertAreEqual("player.team.4.defense", 0xDB12, [0, 42], 42);
            mapper.AssertAreEqual("player.team.4.specialAttack", 0xDB16, [0, 35], 35);
            mapper.AssertAreEqual("player.team.4.specialDefense", 0xDB18, [0, 51], 51);
            mapper.AssertAreEqual("player.team.4.speed", 0xDB14, [0, 41], 41);
            mapper.AssertAreEqual("player.team.4.dvAttack", 0xDAFF, [47], 2);
            mapper.AssertAreEqual("player.team.4.dvDefense", 0xDAFF, [47], 15);
            mapper.AssertAreEqual("player.team.4.dvSpeed", 0xDB00, [159], 9);
            mapper.AssertAreEqual("player.team.4.dvSpecial", 0xDB00, [159], 15);
            mapper.AssertAreEqual("player.team.4.move1", 0xDAEC, [37], "Thrash");
            mapper.AssertAreEqual("player.team.4.move2", 0xDAED, [44], "Bite");
            mapper.AssertAreEqual("player.team.4.move3", 0xDAEE, [127], "Waterfall");
            mapper.AssertAreEqual("player.team.4.move4", 0xDAEF, [0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0xDB01, [20], 20);
            mapper.AssertAreEqual("player.team.4.move2pp", 0xDB02, [25], 25);
            mapper.AssertAreEqual("player.team.4.move3pp", 0xDB03, [15], 15);
            mapper.AssertAreEqual("player.team.4.move4pp", 0xDB04, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0xDB01, [20], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0xDB02, [25], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0xDB03, [15], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0xDB04, [0], 0);
            mapper.AssertAreEqual("player.team.4.statExpHp", 0xDAF5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpAttack", 0xDAF7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpDefense", 0xDAF9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpSpeed", 0xDAFB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpSpecial", 0xDAFD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0xDB06, [0], 0);
            mapper.AssertAreEqual("player.team.4.trainerId", 0xDAF0, [185, 218], 47578);
            mapper.AssertAreEqual("player.team.5.nickname", 0xDBC3, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.team.5.species", 0xDB1A, [0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0xDB1A, [0], null);
            mapper.AssertAreEqual("player.team.5.level", 0xDB39, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0xDB22, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.friendship", 0xDB35, [0], 0);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0xDB3A, [0], null);
            mapper.AssertAreEqual("player.team.5.heldItem", 0xDB1B, [0], null);
            mapper.AssertAreEqual("player.team.5.hp", 0xDB3C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.maxHp", 0xDB3E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0xDB40, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0xDB42, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialAttack", 0xDB46, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialDefense", 0xDB48, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0xDB44, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.dvAttack", 0xDB2F, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvDefense", 0xDB2F, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvSpeed", 0xDB30, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvSpecial", 0xDB30, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0xDB1C, [0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0xDB1D, [0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0xDB1E, [0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0xDB1F, [0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0xDB31, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0xDB32, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0xDB33, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0xDB34, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0xDB31, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0xDB32, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0xDB33, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0xDB34, [0], 0);
            mapper.AssertAreEqual("player.team.5.statExpHp", 0xDB25, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpAttack", 0xDB27, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpDefense", 0xDB29, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpSpeed", 0xDB2B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpSpecial", 0xDB2D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0xDB36, [0], 0);
            mapper.AssertAreEqual("player.team.5.trainerId", 0xDB20, [0, 0], 0);
            mapper.AssertAreEqual("player.totalKeyItems", 0xD5E1, [9], 9);
            mapper.AssertAreEqual("player.tms.TM01-DynamicPunch", 0xD859, [247], 247);
            mapper.AssertAreEqual("player.tms.TM02-Headbutt", 0xD85A, [190], 190);
            mapper.AssertAreEqual("player.tms.TM03-Curse", 0xD85B, [32], 32);
            mapper.AssertAreEqual("player.tms.TM04-Rollout", 0xD85C, [0], 0);
            mapper.AssertAreEqual("player.tms.TM05-Roar", 0xD85D, [33], 33);
            mapper.AssertAreEqual("player.tms.TM06-Toxic", 0xD85E, [245], 245);
            mapper.AssertAreEqual("player.tms.TM07-Zap Cannon", 0xD85F, [0], 0);
            mapper.AssertAreEqual("player.tms.TM08-Rock Smash", 0xD860, [28], 28);
            mapper.AssertAreEqual("player.tms.TM09-Psych Up", 0xD861, [7], 7);
            mapper.AssertAreEqual("player.tms.TM10-Hidden Power", 0xD862, [96], 96);
            mapper.AssertAreEqual("player.tms.TM11-Sunny Day", 0xD863, [40], 40);
            mapper.AssertAreEqual("player.tms.TM12-Sweet Scent", 0xD864, [128], 128);
            mapper.AssertAreEqual("player.tms.TM13-Snore", 0xD865, [63], 63);
            mapper.AssertAreEqual("player.tms.TM14-Blizzard", 0xD866, [32], 32);
            mapper.AssertAreEqual("player.tms.TM15-Hyper Beam", 0xD867, [4], 4);
            mapper.AssertAreEqual("player.tms.TM16-Icy Wind", 0xD868, [29], 29);
            mapper.AssertAreEqual("player.tms.TM17-Protect", 0xD869, [15], 15);
            mapper.AssertAreEqual("player.tms.TM18-Rain Dance", 0xD86A, [0], 0);
            mapper.AssertAreEqual("player.tms.TM19-Giga Drain", 0xD86B, [16], 16);
            mapper.AssertAreEqual("player.tms.TM20-Endure", 0xD86C, [31], 31);
            mapper.AssertAreEqual("player.tms.TM21-Frustration", 0xD86D, [0], 0);
            mapper.AssertAreEqual("player.tms.TM22-SolarBeam", 0xD86E, [31], 31);
            mapper.AssertAreEqual("player.tms.TM23-Iron Tail", 0xD86F, [0], 0);
            mapper.AssertAreEqual("player.tms.TM24-DragonBreath", 0xD870, [0], 0);
            mapper.AssertAreEqual("player.tms.TM25-Thunder", 0xD871, [0], 0);
            mapper.AssertAreEqual("player.tms.TM26-Earthquake", 0xD872, [0], 0);
            mapper.AssertAreEqual("player.tms.TM27-Return", 0xD873, [0], 0);
            mapper.AssertAreEqual("player.tms.TM28-Dig", 0xD874, [0], 0);
            mapper.AssertAreEqual("player.tms.TM29-Psychic", 0xD875, [0], 0);
            mapper.AssertAreEqual("player.tms.TM30-Shadow Ball", 0xD876, [0], 0);
            mapper.AssertAreEqual("player.tms.TM31-Mud-Slap", 0xD877, [0], 0);
            mapper.AssertAreEqual("player.tms.TM32-Double Team", 0xD878, [0], 0);
            mapper.AssertAreEqual("player.tms.TM33-Ice Punch", 0xD879, [0], 0);
            mapper.AssertAreEqual("player.tms.TM34-Swagger", 0xD87A, [0], 0);
            mapper.AssertAreEqual("player.tms.TM35-Sleep Talk", 0xD87B, [0], 0);
            mapper.AssertAreEqual("player.tms.TM36-Sludge Bomb", 0xD87C, [0], 0);
            mapper.AssertAreEqual("player.tms.TM37-Sandstorm", 0xD87D, [0], 0);
            mapper.AssertAreEqual("player.tms.TM38-Fire Blast", 0xD87E, [0], 0);
            mapper.AssertAreEqual("player.tms.TM39-Swift", 0xD87F, [22], 22);
            mapper.AssertAreEqual("player.tms.TM40-Defense Curl", 0xD880, [136], 136);
            mapper.AssertAreEqual("player.tms.TM41-ThunderPunch", 0xD881, [0], 0);
            mapper.AssertAreEqual("player.tms.TM42-Dream Eater", 0xD882, [82], 82);
            mapper.AssertAreEqual("player.tms.TM43-Detect", 0xD883, [52], 52);
            mapper.AssertAreEqual("player.tms.TM44-Rest", 0xD884, [132], 132);
            mapper.AssertAreEqual("player.tms.TM45-Attract", 0xD885, [4], 4);
            mapper.AssertAreEqual("player.tms.TM46-Thief", 0xD886, [6], 6);
            mapper.AssertAreEqual("player.tms.TM47-Steel Wing", 0xD887, [0], 0);
            mapper.AssertAreEqual("player.tms.TM48-Fire Punch", 0xD888, [41], 41);
            mapper.AssertAreEqual("player.tms.TM49-Fury Cutter", 0xD889, [0], 0);
            mapper.AssertAreEqual("player.tms.TM50-Nightmare", 0xD88A, [0], 0);
            mapper.AssertAreEqual("player.hms.HM01-Cut", 0xD88B, [8], false);
            mapper.AssertAreEqual("player.hms.HM02-Fly", 0xD88C, [209], false);
            mapper.AssertAreEqual("player.hms.HM03-Surf", 0xD88D, [34], true);
            mapper.AssertAreEqual("player.hms.HM04-Strength", 0xD88E, [224], false);
            mapper.AssertAreEqual("player.hms.HM05-Flash", 0xD88F, [255], true);
            mapper.AssertAreEqual("player.hms.HM06-Whirlpool", 0xD890, [122], true);
            mapper.AssertAreEqual("player.hms.HM07-Waterfall", 0xD891, [246], true);
            mapper.AssertAreEqual("player.badges.badge1", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge2", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge3", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge4", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge5", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge6", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge7", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge8", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge9", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge10", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge11", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge12", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge13", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge14", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge15", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.badges.badge16", 0xD57C, [255], true);
            mapper.AssertAreEqual("player.money", 0xD573, [1, 79, 215], 85975);
            mapper.AssertAreEqual("player.moneyMom", 0xD576, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.coins", 0xD57A, [0, 100], 100);
            mapper.AssertAreEqual("player.repelStepsLeft", 0xD9EB, [0], 0);
            mapper.AssertAreEqual("player.bikeStatus", 0xD682, [1], "Biking");
        }
        [TestMethod]
        public async Task Gold_Silver_Deprecated_Overworld()
        {
            await Load_GBC_PokemonGoldDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("overworld.mapGroup", 0xDA00, [19], "SILVER");
            mapper.AssertAreEqual("overworld.mapNumber", 0xDA01, [2], 2);
        }
        [TestMethod]
        public async Task Gold_Silver_Deprecated_Battle()
        {
            await Load_GBC_PokemonGoldDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("battle.mode", 0xD116, [1], "Wild");
            mapper.AssertAreEqual("battle.battleStart", 0xC664, [122], 122);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0xDEBF, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0xDD5D, [25], "Pikachu");
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0xDD5D, [25], "25");
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0xDD7C, [81], 81);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0xDD65, [8, 27, 241], 531441);
            mapper.AssertAreEqual("battle.trainer.team.0.friendship", 0xDD78, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0xDD7D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.heldItem", 0xDD5E, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0xDD7F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0xDD81, [0, 170], 170);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0xDD83, [0, 118], 118);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0xDD85, [0, 74], 74);
            mapper.AssertAreEqual("battle.trainer.team.0.specialAttack", 0xDD89, [0, 108], 108);
            mapper.AssertAreEqual("battle.trainer.team.0.specialDefense", 0xDD8B, [0, 92], 92);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0xDD87, [0, 171], 171);
            mapper.AssertAreEqual("battle.trainer.team.0.dvAttack", 0xDD72, [253], 15);
            mapper.AssertAreEqual("battle.trainer.team.0.dvDefense", 0xDD72, [253], 13);
            mapper.AssertAreEqual("battle.trainer.team.0.dvSpeed", 0xDD73, [222], 13);
            mapper.AssertAreEqual("battle.trainer.team.0.dvSpecial", 0xDD73, [222], 14);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0xDD5F, [204], "Charm");
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0xDD60, [98], "Quick Attack");
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0xDD61, [85], "Thunderbolt");
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0xDD62, [87], "Thunder");
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0xDD74, [19], 19);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0xDD75, [30], 30);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0xDD76, [15], 15);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0xDD77, [9], 9);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0xDD74, [19], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0xDD75, [30], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0xDD76, [15], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0xDD77, [9], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpHp", 0xDD68, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpAttack", 0xDD6A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpDefense", 0xDD6C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpSpeed", 0xDD6E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpSpecial", 0xDD70, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerus", 0xDD79, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.trainerId", 0xDD63, [185, 218], 47578);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0xDECA, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0xDD8D, [196], "Espeon");
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0xDD8D, [196], "196");
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0xDDAC, [73], 73);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0xDD95, [5, 239, 153], 389017);
            mapper.AssertAreEqual("battle.trainer.team.1.friendship", 0xDDA8, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0xDDAD, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.heldItem", 0xDD8E, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0xDDAF, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0xDDB1, [0, 198], 198);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0xDDB3, [0, 121], 121);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0xDDB5, [0, 111], 111);
            mapper.AssertAreEqual("battle.trainer.team.1.specialAttack", 0xDDB9, [0, 215], 215);
            mapper.AssertAreEqual("battle.trainer.team.1.specialDefense", 0xDDBB, [0, 164], 164);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0xDDB7, [0, 184], 184);
            mapper.AssertAreEqual("battle.trainer.team.1.dvAttack", 0xDDA2, [253], 15);
            mapper.AssertAreEqual("battle.trainer.team.1.dvDefense", 0xDDA2, [253], 13);
            mapper.AssertAreEqual("battle.trainer.team.1.dvSpeed", 0xDDA3, [222], 13);
            mapper.AssertAreEqual("battle.trainer.team.1.dvSpecial", 0xDDA3, [222], 14);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0xDD8F, [189], "Mud-Slap");
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0xDD90, [115], "Reflect");
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0xDD91, [129], "Swift");
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0xDD92, [94], "Psychic");
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0xDDA4, [10], 10);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0xDDA5, [20], 20);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0xDDA6, [20], 20);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0xDDA7, [9], 9);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0xDDA4, [10], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0xDDA5, [20], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0xDDA6, [20], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0xDDA7, [9], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpHp", 0xDD98, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpAttack", 0xDD9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpDefense", 0xDD9C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpSpeed", 0xDD9E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpSpecial", 0xDDA0, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerus", 0xDDA9, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.trainerId", 0xDD93, [185, 218], 47578);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0xDED5, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0xDDBD, [143], "Snorlax");
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0xDDBD, [143], "143");
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0xDDDC, [75], 75);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0xDDC5, [8, 11, 239], 527343);
            mapper.AssertAreEqual("battle.trainer.team.2.friendship", 0xDDD8, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0xDDDD, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.heldItem", 0xDDBE, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0xDDDF, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0xDDE1, [1, 90], 346);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0xDDE3, [0, 192], 192);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0xDDE5, [0, 122], 122);
            mapper.AssertAreEqual("battle.trainer.team.2.specialAttack", 0xDDE9, [0, 123], 123);
            mapper.AssertAreEqual("battle.trainer.team.2.specialDefense", 0xDDEB, [0, 191], 191);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0xDDE7, [0, 69], 69);
            mapper.AssertAreEqual("battle.trainer.team.2.dvAttack", 0xDDD2, [253], 15);
            mapper.AssertAreEqual("battle.trainer.team.2.dvDefense", 0xDDD2, [253], 13);
            mapper.AssertAreEqual("battle.trainer.team.2.dvSpeed", 0xDDD3, [222], 13);
            mapper.AssertAreEqual("battle.trainer.team.2.dvSpecial", 0xDDD3, [222], 14);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0xDDBF, [133], "Amnesia");
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0xDDC0, [173], "Snore");
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0xDDC1, [156], "Rest");
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0xDDC2, [34], "Body Slam");
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0xDDD4, [20], 20);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0xDDD5, [15], 15);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0xDDD6, [10], 10);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0xDDD7, [12], 12);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0xDDD4, [20], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0xDDD5, [15], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0xDDD6, [10], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0xDDD7, [12], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpHp", 0xDDC8, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpAttack", 0xDDCA, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpDefense", 0xDDCC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpSpeed", 0xDDCE, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpSpecial", 0xDDD0, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerus", 0xDDD9, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.trainerId", 0xDDC3, [185, 218], 47578);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0xDEE0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0xDDED, [3], "Venusaur");
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0xDDED, [3], "3");
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0xDE0C, [77], 77);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0xDDF5, [7, 30, 32], 466464);
            mapper.AssertAreEqual("battle.trainer.team.3.friendship", 0xDE08, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0xDE0D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.heldItem", 0xDDEE, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0xDE0F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0xDE11, [0, 231], 231);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0xDE13, [0, 154], 154);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0xDE15, [0, 152], 152);
            mapper.AssertAreEqual("battle.trainer.team.3.specialAttack", 0xDE19, [0, 180], 180);
            mapper.AssertAreEqual("battle.trainer.team.3.specialDefense", 0xDE1B, [0, 180], 180);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0xDE17, [0, 148], 148);
            mapper.AssertAreEqual("battle.trainer.team.3.dvAttack", 0xDE02, [253], 15);
            mapper.AssertAreEqual("battle.trainer.team.3.dvDefense", 0xDE02, [253], 13);
            mapper.AssertAreEqual("battle.trainer.team.3.dvSpeed", 0xDE03, [222], 13);
            mapper.AssertAreEqual("battle.trainer.team.3.dvSpecial", 0xDE03, [222], 14);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0xDDEF, [241], "Sunny Day");
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0xDDF0, [202], "Giga Drain");
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0xDDF1, [235], "Synthesis");
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0xDDF2, [76], "SolarBeam");
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0xDE04, [5], 5);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0xDE05, [5], 5);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0xDE06, [5], 5);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0xDE07, [9], 9);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0xDE04, [5], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0xDE05, [5], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0xDE06, [5], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0xDE07, [9], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpHp", 0xDDF8, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpAttack", 0xDDFA, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpDefense", 0xDDFC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpSpeed", 0xDDFE, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpSpecial", 0xDE00, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerus", 0xDE09, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.trainerId", 0xDDF3, [185, 218], 47578);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0xDEEB, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0xDE1D, [6], "Charizard");
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0xDE1D, [6], "6");
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0xDE3C, [77], 77);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0xDE25, [7, 30, 32], 466464);
            mapper.AssertAreEqual("battle.trainer.team.4.friendship", 0xDE38, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0xDE3D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.heldItem", 0xDE1E, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0xDE3F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0xDE41, [0, 228], 228);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0xDE43, [0, 157], 157);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0xDE45, [0, 145], 145);
            mapper.AssertAreEqual("battle.trainer.team.4.specialAttack", 0xDE49, [0, 194], 194);
            mapper.AssertAreEqual("battle.trainer.team.4.specialDefense", 0xDE4B, [0, 157], 157);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0xDE47, [0, 179], 179);
            mapper.AssertAreEqual("battle.trainer.team.4.dvAttack", 0xDE32, [253], 15);
            mapper.AssertAreEqual("battle.trainer.team.4.dvDefense", 0xDE32, [253], 13);
            mapper.AssertAreEqual("battle.trainer.team.4.dvSpeed", 0xDE33, [222], 13);
            mapper.AssertAreEqual("battle.trainer.team.4.dvSpecial", 0xDE33, [222], 14);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0xDE1F, [53], "Flamethrower");
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0xDE20, [17], "Wing Attack");
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0xDE21, [163], "Slash");
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0xDE22, [83], "Fire Spin");
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0xDE34, [11], 11);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0xDE35, [35], 35);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0xDE36, [20], 20);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0xDE37, [15], 15);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0xDE34, [11], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0xDE35, [35], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0xDE36, [20], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0xDE37, [15], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpHp", 0xDE28, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpAttack", 0xDE2A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpDefense", 0xDE2C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpSpeed", 0xDE2E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpSpecial", 0xDE30, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerus", 0xDE39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.trainerId", 0xDE23, [185, 218], 47578);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0xDEF6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0xDE4D, [9], "Blastoise");
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0xDE4D, [9], "9");
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0xDE6C, [77], 77);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0xDE55, [7, 30, 32], 466464);
            mapper.AssertAreEqual("battle.trainer.team.5.friendship", 0xDE68, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0xDE6D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.heldItem", 0xDE4E, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0xDE6F, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0xDE71, [0, 230], 230);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0xDE73, [0, 155], 155);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0xDE75, [0, 179], 179);
            mapper.AssertAreEqual("battle.trainer.team.5.specialAttack", 0xDE79, [0, 157], 157);
            mapper.AssertAreEqual("battle.trainer.team.5.specialDefense", 0xDE7B, [0, 188], 188);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0xDE77, [0, 145], 145);
            mapper.AssertAreEqual("battle.trainer.team.5.dvAttack", 0xDE62, [253], 15);
            mapper.AssertAreEqual("battle.trainer.team.5.dvDefense", 0xDE62, [253], 13);
            mapper.AssertAreEqual("battle.trainer.team.5.dvSpeed", 0xDE63, [222], 13);
            mapper.AssertAreEqual("battle.trainer.team.5.dvSpecial", 0xDE63, [222], 14);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0xDE4F, [240], "Rain Dance");
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0xDE50, [57], "Surf");
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0xDE51, [59], "Blizzard");
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0xDE52, [250], "Whirlpool");
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0xDE64, [4], 4);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0xDE65, [7], 7);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0xDE66, [5], 5);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0xDE67, [15], 15);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0xDE64, [4], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0xDE65, [7], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0xDE66, [5], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0xDE67, [15], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpHp", 0xDE58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpAttack", 0xDE5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpDefense", 0xDE5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpSpeed", 0xDE5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpSpecial", 0xDE60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerus", 0xDE69, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.trainerId", 0xDE53, [185, 218], 47578);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0xCFC6, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.heldItem", 0xCB0D, [146], "Leftovers");
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0xCB2A, [0], "Normal");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0xCB2B, [0], "Normal");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0xC6CC, [44], null);
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0xC6CD, [44], null);
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0xC6CE, [44], null);
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialAttack", 0xC6CF, [44], null);
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialDefense", 0xC6D0, [80], null);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0xC6D1, [81], null);
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0xC6D2, [80], null);
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0xCB1C, [1, 1], 257);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0xCBBF, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0xCBC1, [156, 23], 39959);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0xCBC3, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0xCBC5, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.specialAttack", 0xCBC7, [1, 0], 256);
            mapper.AssertAreEqual("battle.yourPokemon.specialDefense", 0xCBC9, [104, 0], 26624);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatAttack", 0xCBC1, [156, 23], 39959);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatDefense", 0xCBC3, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatSpecialAttack", 0xCBC7, [1, 0], 256);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatSpecialDefense", 0xCBC9, [104, 0], 26624);
            mapper.AssertAreEqual("battle.yourPokemon.battleStatSpeed", 0xCBC5, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0xCB0E, [216], "Return");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0xCB0F, [214], "Sleep Talk");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0xCB10, [182], "Protect");
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0xCB11, [156], "Rest");
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0xCB14, [20], 20);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0xCB15, [10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0xCB16, [9], 9);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0xCB17, [9], 9);
            mapper.AssertAreEqual("battle.yourPokemon.move1ppUp", 0xCB14, [20], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move2ppUp", 0xCB15, [10], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move3ppUp", 0xCB16, [9], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4ppUp", 0xCB17, [9], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0xCB41, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.heldItem", 0xD0F0, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0xD0FC, [42], 42);
            mapper.AssertAreEqual("battle.enemyPokemon.statsCondition", 0xD9FD, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0xD0F1, [52], "Ember");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0xD0F2, [23], "Stomp");
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0xD0F3, [83], "Fire Spin");
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0xD0F4, [36], "Take Down");
            mapper.AssertAreEqual("battle.enemyPokemon.move1pp", 0xD0F7, [25], 25);
            mapper.AssertAreEqual("battle.enemyPokemon.move2pp", 0xD0F8, [19], 19);
            mapper.AssertAreEqual("battle.enemyPokemon.move3pp", 0xD0F9, [14], 14);
            mapper.AssertAreEqual("battle.enemyPokemon.move4pp", 0xD0FA, [20], 20);
            mapper.AssertAreEqual("battle.enemyPokemon.move1ppUp", 0xD0F7, [25], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move2ppUp", 0xD0F8, [19], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3ppUp", 0xD0F9, [14], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4ppUp", 0xD0FA, [20], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0xD101, [0, 104], 104);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0xD0FF, [0, 104], 104);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0xD103, [0, 82], 82);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0xD105, [0, 58], 58);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0xD107, [0, 90], 90);
            mapper.AssertAreEqual("battle.enemyPokemon.specialAttack", 0xD109, [0, 59], 59);
            mapper.AssertAreEqual("battle.enemyPokemon.specialDefense", 0xD10B, [0, 59], 59);
            mapper.AssertAreEqual("battle.enemyPokemon.dvAttack", 0xD0F5, [121], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.dvDefense", 0xD0F5, [121], 9);
            mapper.AssertAreEqual("battle.enemyPokemon.dvSpeed", 0xD0F6, [192], 12);
            mapper.AssertAreEqual("battle.enemyPokemon.dvSpecial", 0xD0F6, [192], 0);
            mapper.AssertAreEqual("battle.info.miss", 0xCB45, [0], 0);
            mapper.AssertAreEqual("battle.info.turnEnded", 0xCB92, [0], 0);
            mapper.AssertAreEqual("battle.info.playerTurnTaken", 0xCBBB, [2], 2);
            mapper.AssertAreEqual("battle.info.enemyTurnTaken", 0xCBBA, [2], 2);
            mapper.AssertAreEqual("battle.field.playerScreens.statusSafeguard", 0xCBDD, [0], false);
            mapper.AssertAreEqual("battle.field.playerScreens.statusReflect", 0xCBDD, [0], false);
            mapper.AssertAreEqual("battle.field.playerScreens.statusLightScreen", 0xCBDD, [0], 0);
            mapper.AssertAreEqual("battle.field.playerScreens.safeguardCount", 0xCBDF, [0], 0);
            mapper.AssertAreEqual("battle.field.playerScreens.lightScreenCount", 0xCBE0, [0], 0);
            mapper.AssertAreEqual("battle.field.playerScreens.reflectCount", 0xCBE1, [0], 0);
            mapper.AssertAreEqual("battle.field.enemyScreens.statusSafeguard", 0xCBDE, [0], false);
            mapper.AssertAreEqual("battle.field.enemyScreens.statusReflect", 0xCBDE, [0], false);
            mapper.AssertAreEqual("battle.field.enemyScreens.statusLightScreen", 0xCBDE, [0], 0);
            mapper.AssertAreEqual("battle.field.enemyScreens.safeguardCount", 0xCBE3, [0], 0);
            mapper.AssertAreEqual("battle.field.enemyScreens.lightScreenCount", 0xCBE4, [0], 0);
            mapper.AssertAreEqual("battle.field.enemyScreens.reflectCount", 0xCBE5, [0], 0);
        }
        [TestMethod]
        public async Task Gold_Silver_Deprecated_Options()
        {
            await Load_GBC_PokemonGoldDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("options.textSpeed2", 0xD199, [193], false);
            mapper.AssertAreEqual("options.textSpeed3", 0xD199, [193], false);
            mapper.AssertAreEqual("options.sound", 0xD199, [193], false);
            mapper.AssertAreEqual("options.battleStyle", 0xD199, [193], true);
            mapper.AssertAreEqual("options.battleAnimations", 0xD199, [193], true);
        }
        [TestMethod]
        public async Task Gold_Silver_Deprecated_Rival()
        {
            await Load_GBC_PokemonGoldDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("rival.rivalName", 0xD1BC, [80, 80, 80, 80, 80, 134, 145, 132, 145, 132, 131], "");
        }
        [TestMethod]
        public async Task Gold_Silver_Deprecated_GameTime()
        {
            await Load_GBC_PokemonGoldDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("gameTime.hours", 0xD1EB, [0, 7], 7);
            mapper.AssertAreEqual("gameTime.minutes", 0xD1ED, [6], 6);
            mapper.AssertAreEqual("gameTime.seconds", 0xD1EE, [27], 27);
            mapper.AssertAreEqual("gameTime.frames", 0xD1EF, [33], 33);
        }
        [TestMethod]
        public async Task Gold_Silver_Deprecated_Time()
        {
            await Load_GBC_PokemonGoldDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("time.current.day", 0xD1F2, [12], "Friday");
            mapper.AssertAreEqual("time.current.hour", 0xFF96, [14], 14);
            mapper.AssertAreEqual("time.current.minute", 0xFF98, [20], 20);
            mapper.AssertAreEqual("time.current.second", 0xFF9A, [21], 21);
            mapper.AssertAreEqual("time.current.dst", 0xD1E8, [128], true);
            mapper.AssertAreEqual("time.current.timeOfDay", 0xD157, [1], "Day");
            mapper.AssertAreEqual("time.start.day", 0xD1DC, [0], "Sunday");
            mapper.AssertAreEqual("time.start.hour", 0xD1DD, [9], 9);
            mapper.AssertAreEqual("time.start.minute", 0xD1DE, [59], 59);
            mapper.AssertAreEqual("time.start.second", 0xD1DF, [18], 18);
            mapper.AssertAreEqual("time.rtc.day", 0xFF8F, [0, 12], 5);
            mapper.AssertAreEqual("time.rtc.hour", 0xFF91, [4], 4);
            mapper.AssertAreEqual("time.rtc.minute", 0xFF92, [21], 21);
            mapper.AssertAreEqual("time.rtc.second", 0xFF93, [3], 3);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Player()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.playerId", 0xD47B, [39, 94], 10078);
            mapper.AssertAreEqual("player.name", 0xD47D, [128, 139, 139, 128, 141, 80, 80, 80, 80, 80, 80], "ALLAN");
            mapper.AssertAreEqual("player.gender", 0xD472, [0], "Male");
            mapper.AssertAreEqual("player.teamCount", 0xDCD7, [1], 1);
            mapper.AssertAreEqual("player.team.0.nickname", 0xDE41, [141], "N");
            mapper.AssertAreEqual("player.team.0.species", 0xDCDF, [158], "Totodile");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0xDCDF, [158], "158");
            mapper.AssertAreEqual("player.team.0.level", 0xDCFE, [5], 5);
            mapper.AssertAreEqual("player.team.0.expPoints", 0xDCE7, [0, 0, 135], 135);
            mapper.AssertAreEqual("player.team.0.friendship", 0xDCFA, [70], 70);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0xDCFF, [0], null);
            mapper.AssertAreEqual("player.team.0.heldItem", 0xDCE0, [173], "Berry");
            mapper.AssertAreEqual("player.team.0.hp", 0xDD01, [0, 19], 19);
            mapper.AssertAreEqual("player.team.0.maxHp", 0xDD03, [0, 21], 21);
            mapper.AssertAreEqual("player.team.0.attack", 0xDD05, [0, 12], 12);
            mapper.AssertAreEqual("player.team.0.defense", 0xDD07, [0, 12], 12);
            mapper.AssertAreEqual("player.team.0.specialAttack", 0xDD0B, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.specialDefense", 0xDD0D, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.speed", 0xDD09, [0, 10], 10);
            mapper.AssertAreEqual("player.team.0.dvAttack", 0xDCF4, [187], 11);
            mapper.AssertAreEqual("player.team.0.dvDefense", 0xDCF4, [187], 11);
            mapper.AssertAreEqual("player.team.0.dvSpeed", 0xDCF5, [155], 9);
            mapper.AssertAreEqual("player.team.0.dvSpecial", 0xDCF5, [155], 11);
            mapper.AssertAreEqual("player.team.0.move1", 0xDCE1, [10], "Scratch");
            mapper.AssertAreEqual("player.team.0.move2", 0xDCE2, [43], "Leer");
            mapper.AssertAreEqual("player.team.0.move3", 0xDCE3, [0], null);
            mapper.AssertAreEqual("player.team.0.move4", 0xDCE4, [0], null);
            mapper.AssertAreEqual("player.team.0.move1pp", 0xDCF6, [34], 34);
            mapper.AssertAreEqual("player.team.0.move2pp", 0xDCF7, [30], 30);
            mapper.AssertAreEqual("player.team.0.move3pp", 0xDCF8, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4pp", 0xDCF9, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0xDCF6, [34], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0xDCF7, [30], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0xDCF8, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0xDCF9, [0], 0);
            mapper.AssertAreEqual("player.team.0.statExpHp", 0xDCEA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpAttack", 0xDCEC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpDefense", 0xDCEE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpSpeed", 0xDCF0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.statExpSpecial", 0xDCF2, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.pokerus", 0xDCFB, [0], 0);
            mapper.AssertAreEqual("player.team.0.trainerId", 0xDCE5, [39, 94], 10078);
            mapper.AssertAreEqual("player.team.1.nickname", 0xDE4C, [0], " ");
            mapper.AssertAreEqual("player.team.1.species", 0xDD0F, [0], null);
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0xDD0F, [0], null);
            mapper.AssertAreEqual("player.team.1.level", 0xDD2E, [0], 0);
            mapper.AssertAreEqual("player.team.1.expPoints", 0xDD17, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.friendship", 0xDD2A, [0], 0);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0xDD2F, [0], null);
            mapper.AssertAreEqual("player.team.1.heldItem", 0xDD10, [0], null);
            mapper.AssertAreEqual("player.team.1.hp", 0xDD31, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.maxHp", 0xDD33, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.attack", 0xDD35, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.defense", 0xDD37, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.specialAttack", 0xDD3B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.specialDefense", 0xDD3D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.speed", 0xDD39, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.dvAttack", 0xDD24, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvDefense", 0xDD24, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvSpeed", 0xDD25, [0], 0);
            mapper.AssertAreEqual("player.team.1.dvSpecial", 0xDD25, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1", 0xDD11, [0], null);
            mapper.AssertAreEqual("player.team.1.move2", 0xDD12, [0], null);
            mapper.AssertAreEqual("player.team.1.move3", 0xDD13, [0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0xDD14, [0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0xDD26, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2pp", 0xDD27, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3pp", 0xDD28, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0xDD29, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0xDD26, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0xDD27, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0xDD28, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0xDD29, [0], 0);
            mapper.AssertAreEqual("player.team.1.statExpHp", 0xDD1A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpAttack", 0xDD1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpDefense", 0xDD1E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpSpeed", 0xDD20, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.statExpSpecial", 0xDD22, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.pokerus", 0xDD2B, [0], 0);
            mapper.AssertAreEqual("player.team.1.trainerId", 0xDD15, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0xDE57, [0], " ");
            mapper.AssertAreEqual("player.team.2.species", 0xDD3F, [0], null);
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0xDD3F, [0], null);
            mapper.AssertAreEqual("player.team.2.level", 0xDD5E, [0], 0);
            mapper.AssertAreEqual("player.team.2.expPoints", 0xDD47, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.friendship", 0xDD5A, [0], 0);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0xDD5F, [0], null);
            mapper.AssertAreEqual("player.team.2.heldItem", 0xDD40, [0], null);
            mapper.AssertAreEqual("player.team.2.hp", 0xDD61, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.maxHp", 0xDD63, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.attack", 0xDD65, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.defense", 0xDD67, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialAttack", 0xDD6B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialDefense", 0xDD6D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.speed", 0xDD69, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.dvAttack", 0xDD54, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvDefense", 0xDD54, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvSpeed", 0xDD55, [0], 0);
            mapper.AssertAreEqual("player.team.2.dvSpecial", 0xDD55, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1", 0xDD41, [0], null);
            mapper.AssertAreEqual("player.team.2.move2", 0xDD42, [0], null);
            mapper.AssertAreEqual("player.team.2.move3", 0xDD43, [0], null);
            mapper.AssertAreEqual("player.team.2.move4", 0xDD44, [0], null);
            mapper.AssertAreEqual("player.team.2.move1pp", 0xDD56, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2pp", 0xDD57, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3pp", 0xDD58, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4pp", 0xDD59, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0xDD56, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0xDD57, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0xDD58, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0xDD59, [0], 0);
            mapper.AssertAreEqual("player.team.2.statExpHp", 0xDD4A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpAttack", 0xDD4C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpDefense", 0xDD4E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpSpeed", 0xDD50, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.statExpSpecial", 0xDD52, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0xDD5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.trainerId", 0xDD45, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0xDE62, [0], " ");
            mapper.AssertAreEqual("player.team.3.species", 0xDD6F, [0], null);
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0xDD6F, [0], null);
            mapper.AssertAreEqual("player.team.3.level", 0xDD8E, [0], 0);
            mapper.AssertAreEqual("player.team.3.expPoints", 0xDD77, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.friendship", 0xDD8A, [0], 0);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0xDD8F, [0], null);
            mapper.AssertAreEqual("player.team.3.heldItem", 0xDD70, [0], null);
            mapper.AssertAreEqual("player.team.3.hp", 0xDD91, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.maxHp", 0xDD93, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.attack", 0xDD95, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.defense", 0xDD97, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialAttack", 0xDD9B, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialDefense", 0xDD9D, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.speed", 0xDD99, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.dvAttack", 0xDD84, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvDefense", 0xDD84, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvSpeed", 0xDD85, [0], 0);
            mapper.AssertAreEqual("player.team.3.dvSpecial", 0xDD85, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1", 0xDD71, [0], null);
            mapper.AssertAreEqual("player.team.3.move2", 0xDD72, [0], null);
            mapper.AssertAreEqual("player.team.3.move3", 0xDD73, [0], null);
            mapper.AssertAreEqual("player.team.3.move4", 0xDD74, [0], null);
            mapper.AssertAreEqual("player.team.3.move1pp", 0xDD86, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2pp", 0xDD87, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3pp", 0xDD88, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4pp", 0xDD89, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0xDD86, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0xDD87, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0xDD88, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0xDD89, [0], 0);
            mapper.AssertAreEqual("player.team.3.statExpHp", 0xDD7A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpAttack", 0xDD7C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpDefense", 0xDD7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpSpeed", 0xDD80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.statExpSpecial", 0xDD82, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0xDD8B, [0], 0);
            mapper.AssertAreEqual("player.team.3.trainerId", 0xDD75, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0xDE6D, [0], " ");
            mapper.AssertAreEqual("player.team.4.species", 0xDD9F, [0], null);
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0xDD9F, [0], null);
            mapper.AssertAreEqual("player.team.4.level", 0xDDBE, [0], 0);
            mapper.AssertAreEqual("player.team.4.expPoints", 0xDDA7, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.friendship", 0xDDBA, [0], 0);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0xDDBF, [0], null);
            mapper.AssertAreEqual("player.team.4.heldItem", 0xDDA0, [0], null);
            mapper.AssertAreEqual("player.team.4.hp", 0xDDC1, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.maxHp", 0xDDC3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.attack", 0xDDC5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.defense", 0xDDC7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialAttack", 0xDDCB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialDefense", 0xDDCD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.speed", 0xDDC9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.dvAttack", 0xDDB4, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvDefense", 0xDDB4, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvSpeed", 0xDDB5, [0], 0);
            mapper.AssertAreEqual("player.team.4.dvSpecial", 0xDDB5, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1", 0xDDA1, [0], null);
            mapper.AssertAreEqual("player.team.4.move2", 0xDDA2, [0], null);
            mapper.AssertAreEqual("player.team.4.move3", 0xDDA3, [0], null);
            mapper.AssertAreEqual("player.team.4.move4", 0xDDA4, [0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0xDDB6, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2pp", 0xDDB7, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3pp", 0xDDB8, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4pp", 0xDDB9, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0xDDB6, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0xDDB7, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0xDDB8, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0xDDB9, [0], 0);
            mapper.AssertAreEqual("player.team.4.statExpHp", 0xDDAA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpAttack", 0xDDAC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpDefense", 0xDDAE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpSpeed", 0xDDB0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.statExpSpecial", 0xDDB2, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0xDDBB, [0], 0);
            mapper.AssertAreEqual("player.team.4.trainerId", 0xDDA5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0xDE78, [0], " ");
            mapper.AssertAreEqual("player.team.5.species", 0xDDCF, [0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0xDDCF, [0], null);
            mapper.AssertAreEqual("player.team.5.level", 0xDDEE, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0xDDD7, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.friendship", 0xDDEA, [0], 0);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0xDDEF, [0], null);
            mapper.AssertAreEqual("player.team.5.heldItem", 0xDDD0, [0], null);
            mapper.AssertAreEqual("player.team.5.hp", 0xDDF1, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.maxHp", 0xDDF3, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0xDDF5, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0xDDF7, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialAttack", 0xDDFB, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialDefense", 0xDDFD, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0xDDF9, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.dvAttack", 0xDDE4, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvDefense", 0xDDE4, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvSpeed", 0xDDE5, [0], 0);
            mapper.AssertAreEqual("player.team.5.dvSpecial", 0xDDE5, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0xDDD1, [0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0xDDD2, [0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0xDDD3, [0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0xDDD4, [0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0xDDE6, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0xDDE7, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0xDDE8, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0xDDE9, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0xDDE6, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0xDDE7, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0xDDE8, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0xDDE9, [0], 0);
            mapper.AssertAreEqual("player.team.5.statExpHp", 0xDDDA, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpAttack", 0xDDDC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpDefense", 0xDDDE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpSpeed", 0xDDE0, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.statExpSpecial", 0xDDE2, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0xDDEB, [0], 0);
            mapper.AssertAreEqual("player.team.5.trainerId", 0xDDD5, [0, 0], 0);
            mapper.AssertAreEqual("player.itemCount", 0xD892, [1], 1);
            mapper.AssertAreEqual("player.otNames.0", 0xDDFF, [128, 139, 139, 128, 141, 80, 80, 80, 80, 80, 80], "ALLAN");
            mapper.AssertAreEqual("player.otNames.1", 0xDE0A, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.otNames.2", 0xDE15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.otNames.3", 0xDE20, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.otNames.4", 0xDE2B, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.otNames.5", 0xDE36, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("player.items.0.item", 0xD893, [18], "Potion");
            mapper.AssertAreEqual("player.items.0.quantity", 0xD894, [1], 1);
            mapper.AssertAreEqual("player.items.1.item", 0xD895, [255], "Berry");
            mapper.AssertAreEqual("player.items.1.quantity", 0xD896, [0], 0);
            mapper.AssertAreEqual("player.items.2.item", 0xD897, [0], null);
            mapper.AssertAreEqual("player.items.2.quantity", 0xD898, [0], 0);
            mapper.AssertAreEqual("player.items.3.item", 0xD899, [0], null);
            mapper.AssertAreEqual("player.items.3.quantity", 0xD89A, [0], 0);
            mapper.AssertAreEqual("player.items.4.item", 0xD89B, [0], null);
            mapper.AssertAreEqual("player.items.4.quantity", 0xD89C, [0], 0);
            mapper.AssertAreEqual("player.items.5.item", 0xD89D, [0], null);
            mapper.AssertAreEqual("player.items.5.quantity", 0xD89E, [0], 0);
            mapper.AssertAreEqual("player.items.6.item", 0xD89F, [0], null);
            mapper.AssertAreEqual("player.items.6.quantity", 0xD8A0, [0], 0);
            mapper.AssertAreEqual("player.items.7.item", 0xD8A1, [0], null);
            mapper.AssertAreEqual("player.items.7.quantity", 0xD8A2, [0], 0);
            mapper.AssertAreEqual("player.items.8.item", 0xD8A3, [0], null);
            mapper.AssertAreEqual("player.items.8.quantity", 0xD8A4, [0], 0);
            mapper.AssertAreEqual("player.items.9.item", 0xD8A5, [0], null);
            mapper.AssertAreEqual("player.items.9.quantity", 0xD8A6, [0], 0);
            mapper.AssertAreEqual("player.items.10.item", 0xD8A7, [0], null);
            mapper.AssertAreEqual("player.items.10.quantity", 0xD8A8, [0], 0);
            mapper.AssertAreEqual("player.items.11.item", 0xD8A9, [0], null);
            mapper.AssertAreEqual("player.items.11.quantity", 0xD8AA, [0], 0);
            mapper.AssertAreEqual("player.items.12.item", 0xD8AB, [0], null);
            mapper.AssertAreEqual("player.items.12.quantity", 0xD8AC, [0], 0);
            mapper.AssertAreEqual("player.items.13.item", 0xD8AD, [0], null);
            mapper.AssertAreEqual("player.items.13.quantity", 0xD8AE, [0], 0);
            mapper.AssertAreEqual("player.items.14.item", 0xD8AF, [0], null);
            mapper.AssertAreEqual("player.items.14.quantity", 0xD8B0, [0], 0);
            mapper.AssertAreEqual("player.items.15.item", 0xD8B1, [0], null);
            mapper.AssertAreEqual("player.items.15.quantity", 0xD8B2, [0], 0);
            mapper.AssertAreEqual("player.items.16.item", 0xD8B3, [0], null);
            mapper.AssertAreEqual("player.items.16.quantity", 0xD8B4, [0], 0);
            mapper.AssertAreEqual("player.items.17.item", 0xD8B5, [0], null);
            mapper.AssertAreEqual("player.items.17.quantity", 0xD8B6, [0], 0);
            mapper.AssertAreEqual("player.items.18.item", 0xD8B7, [0], null);
            mapper.AssertAreEqual("player.items.18.quantity", 0xD8B8, [0], 0);
            mapper.AssertAreEqual("player.items.19.item", 0xD8B9, [0], null);
            mapper.AssertAreEqual("player.items.19.quantity", 0xD8BA, [0], 0);
            mapper.AssertAreEqual("player.items.20.item", 0xD8BA, [0], null);
            mapper.AssertAreEqual("player.items.20.quantity", 0xD8BB, [0], 0);
            mapper.AssertAreEqual("player.pokeBallCount", 0xD8D7, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.0.item", 0xD8D8, [255], "Berry");
            mapper.AssertAreEqual("player.pokeBalls.0.quantity", 0xD8D9, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.1.item", 0xD8DA, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.1.quantity", 0xD8DB, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.2.item", 0xD8DC, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.2.quantity", 0xD8DD, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.3.item", 0xD8DE, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.3.quantity", 0xD8DF, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.4.item", 0xD8E0, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.4.quantity", 0xD8E1, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.5.item", 0xD8E2, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.5.quantity", 0xD8E3, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.6.item", 0xD8E4, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.6.quantity", 0xD8E5, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.7.item", 0xD8E6, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.7.quantity", 0xD8E7, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.8.item", 0xD8E8, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.8.quantity", 0xD8E9, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.9.item", 0xD8EA, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.9.quantity", 0xD8EB, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.10.item", 0xD8EC, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.10.quantity", 0xD8ED, [0], 0);
            mapper.AssertAreEqual("player.pokeBalls.11.item", 0xD8ED, [0], null);
            mapper.AssertAreEqual("player.pokeBalls.11.quantity", 0xD8EE, [0], 0);
            mapper.AssertAreEqual("player.totalKeyItems", 0xD8BC, [0], 0);
            mapper.AssertAreEqual("player.keyItems.0", 0xD8BD, [255], "Berry");
            mapper.AssertAreEqual("player.keyItems.1", 0xD8BE, [0], null);
            mapper.AssertAreEqual("player.keyItems.2", 0xD8BF, [0], null);
            mapper.AssertAreEqual("player.keyItems.3", 0xD8C0, [0], null);
            mapper.AssertAreEqual("player.keyItems.4", 0xD8C1, [0], null);
            mapper.AssertAreEqual("player.keyItems.5", 0xD8C2, [0], null);
            mapper.AssertAreEqual("player.keyItems.6", 0xD8C3, [0], null);
            mapper.AssertAreEqual("player.keyItems.7", 0xD8C4, [0], null);
            mapper.AssertAreEqual("player.keyItems.8", 0xD8C5, [0], null);
            mapper.AssertAreEqual("player.keyItems.9", 0xD8C6, [0], null);
            mapper.AssertAreEqual("player.keyItems.10", 0xD8C7, [0], null);
            mapper.AssertAreEqual("player.keyItems.11", 0xD8C8, [0], null);
            mapper.AssertAreEqual("player.keyItems.12", 0xD8C9, [0], null);
            mapper.AssertAreEqual("player.keyItems.13", 0xD8CA, [0], null);
            mapper.AssertAreEqual("player.keyItems.14", 0xD8CB, [0], null);
            mapper.AssertAreEqual("player.keyItems.15", 0xD8CC, [0], null);
            mapper.AssertAreEqual("player.keyItems.16", 0xD8CD, [0], null);
            mapper.AssertAreEqual("player.keyItems.17", 0xD8CE, [0], null);
            mapper.AssertAreEqual("player.keyItems.18", 0xD8CF, [0], null);
            mapper.AssertAreEqual("player.keyItems.19", 0xD8D0, [0], null);
            mapper.AssertAreEqual("player.keyItems.20", 0xD8D1, [0], null);
            mapper.AssertAreEqual("player.keyItems.21", 0xD8D2, [0], null);
            mapper.AssertAreEqual("player.keyItems.22", 0xD8D3, [0], null);
            mapper.AssertAreEqual("player.keyItems.23", 0xD8D4, [0], null);
            mapper.AssertAreEqual("player.keyItems.24", 0xD8D5, [0], null);
            mapper.AssertAreEqual("player.keyItems.25", 0xD8D6, [0], null);
            mapper.AssertAreEqual("player.tms.TM01-DynamicPunch", 0xD859, [0], 0);
            mapper.AssertAreEqual("player.tms.TM02-Headbutt", 0xD85A, [0], 0);
            mapper.AssertAreEqual("player.tms.TM03-Curse", 0xD85B, [0], 0);
            mapper.AssertAreEqual("player.tms.TM04-Rollout", 0xD85C, [0], 0);
            mapper.AssertAreEqual("player.tms.TM05-Roar", 0xD85D, [0], 0);
            mapper.AssertAreEqual("player.tms.TM06-Toxic", 0xD85E, [0], 0);
            mapper.AssertAreEqual("player.tms.TM07-Zap Cannon", 0xD85F, [0], 0);
            mapper.AssertAreEqual("player.tms.TM08-Rock Smash", 0xD860, [0], 0);
            mapper.AssertAreEqual("player.tms.TM09-Psych Up", 0xD861, [0], 0);
            mapper.AssertAreEqual("player.tms.TM10-Hidden Power", 0xD862, [0], 0);
            mapper.AssertAreEqual("player.tms.TM11-Sunny Day", 0xD863, [0], 0);
            mapper.AssertAreEqual("player.tms.TM12-Sweet Scent", 0xD864, [0], 0);
            mapper.AssertAreEqual("player.tms.TM13-Snore", 0xD865, [0], 0);
            mapper.AssertAreEqual("player.tms.TM14-Blizzard", 0xD866, [0], 0);
            mapper.AssertAreEqual("player.tms.TM15-Hyper Beam", 0xD867, [0], 0);
            mapper.AssertAreEqual("player.tms.TM16-Icy Wind", 0xD868, [0], 0);
            mapper.AssertAreEqual("player.tms.TM17-Protect", 0xD869, [0], 0);
            mapper.AssertAreEqual("player.tms.TM18-Rain Dance", 0xD86A, [0], 0);
            mapper.AssertAreEqual("player.tms.TM19-Giga Drain", 0xD86B, [0], 0);
            mapper.AssertAreEqual("player.tms.TM20-Endure", 0xD86C, [0], 0);
            mapper.AssertAreEqual("player.tms.TM21-Frustration", 0xD86D, [0], 0);
            mapper.AssertAreEqual("player.tms.TM22-SolarBeam", 0xD86E, [0], 0);
            mapper.AssertAreEqual("player.tms.TM23-Iron Tail", 0xD86F, [0], 0);
            mapper.AssertAreEqual("player.tms.TM24-DragonBreath", 0xD870, [0], 0);
            mapper.AssertAreEqual("player.tms.TM25-Thunder", 0xD871, [0], 0);
            mapper.AssertAreEqual("player.tms.TM26-Earthquake", 0xD872, [0], 0);
            mapper.AssertAreEqual("player.tms.TM27-Return", 0xD873, [0], 0);
            mapper.AssertAreEqual("player.tms.TM28-Dig", 0xD874, [0], 0);
            mapper.AssertAreEqual("player.tms.TM29-Psychic", 0xD875, [0], 0);
            mapper.AssertAreEqual("player.tms.TM30-Shadow Ball", 0xD876, [0], 0);
            mapper.AssertAreEqual("player.tms.TM31-Mud-Slap", 0xD877, [0], 0);
            mapper.AssertAreEqual("player.tms.TM32-Double Team", 0xD878, [0], 0);
            mapper.AssertAreEqual("player.tms.TM33-Ice Punch", 0xD879, [0], 0);
            mapper.AssertAreEqual("player.tms.TM34-Swagger", 0xD87A, [0], 0);
            mapper.AssertAreEqual("player.tms.TM35-Sleep Talk", 0xD87B, [0], 0);
            mapper.AssertAreEqual("player.tms.TM36-Sludge Bomb", 0xD87C, [0], 0);
            mapper.AssertAreEqual("player.tms.TM37-Sandstorm", 0xD87D, [0], 0);
            mapper.AssertAreEqual("player.tms.TM38-Fire Blast", 0xD87E, [0], 0);
            mapper.AssertAreEqual("player.tms.TM39-Swift", 0xD87F, [0], 0);
            mapper.AssertAreEqual("player.tms.TM40-Defense Curl", 0xD880, [0], 0);
            mapper.AssertAreEqual("player.tms.TM41-ThunderPunch", 0xD881, [0], 0);
            mapper.AssertAreEqual("player.tms.TM42-Dream Eater", 0xD882, [0], 0);
            mapper.AssertAreEqual("player.tms.TM43-Detect", 0xD883, [0], 0);
            mapper.AssertAreEqual("player.tms.TM44-Rest", 0xD884, [0], 0);
            mapper.AssertAreEqual("player.tms.TM45-Attract", 0xD885, [0], 0);
            mapper.AssertAreEqual("player.tms.TM46-Thief", 0xD886, [0], 0);
            mapper.AssertAreEqual("player.tms.TM47-Steel Wing", 0xD887, [0], 0);
            mapper.AssertAreEqual("player.tms.TM48-Fire Punch", 0xD888, [0], 0);
            mapper.AssertAreEqual("player.tms.TM49-Fury Cutter", 0xD889, [0], 0);
            mapper.AssertAreEqual("player.tms.TM50-Nightmare", 0xD88A, [0], 0);
            mapper.AssertAreEqual("player.hms.HM01-Cut", 0xD88B, [0], false);
            mapper.AssertAreEqual("player.hms.HM02-Fly", 0xD88C, [0], false);
            mapper.AssertAreEqual("player.hms.HM03-Surf", 0xD88D, [0], false);
            mapper.AssertAreEqual("player.hms.HM04-Strength", 0xD88E, [0], false);
            mapper.AssertAreEqual("player.hms.HM05-Flash", 0xD88F, [0], false);
            mapper.AssertAreEqual("player.hms.HM06-Whirlpool", 0xD890, [0], false);
            mapper.AssertAreEqual("player.hms.HM07-Waterfall", 0xD891, [0], false);
            mapper.AssertAreEqual("player.badges.badge1", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.badge2", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.badge3", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.badge4", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.badge5", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.badge6", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.badge7", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.badge8", 0xD857, [0], false);
            mapper.AssertAreEqual("player.badges.badge9", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.badge10", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.badge11", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.badge12", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.badge13", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.badge14", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.badge15", 0xD858, [0], false);
            mapper.AssertAreEqual("player.badges.badge16", 0xD858, [0], false);
            mapper.AssertAreEqual("player.pokegear.mapCard", 0xD957, [132], false);
            mapper.AssertAreEqual("player.pokegear.radioCard", 0xD957, [132], false);
            mapper.AssertAreEqual("player.pokegear.phoneCard", 0xD957, [132], true);
            mapper.AssertAreEqual("player.pokegear.expansionCard", 0xD957, [132], false);
            mapper.AssertAreEqual("player.pokegear.obtained", 0xD957, [132], true);
            mapper.AssertAreEqual("player.money", 0xD84E, [0, 11, 184], 3000);
            mapper.AssertAreEqual("player.moneyMom", 0xD851, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.momSaving", 0xD854, [0], false);
            mapper.AssertAreEqual("player.coins", 0xD855, [0, 0], 0);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Overworld()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("overworld.mapGroup", 0xDCB5, [24], "NEW BARK");
            mapper.AssertAreEqual("overworld.mapNumber", 0xDCB6, [3], 3);
            mapper.AssertAreEqual("overworld.y", 0xDCB7, [10], 10);
            mapper.AssertAreEqual("overworld.x", 0xDCB8, [45], 45);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Events()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("events.beatChampion", 0xDB29, [0], false);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_EncounterRate()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("encounterRate.morning", 0xD25A, [25], 25);
            mapper.AssertAreEqual("encounterRate.day", 0xD25B, [25], 25);
            mapper.AssertAreEqual("encounterRate.night", 0xD25C, [25], 25);
            mapper.AssertAreEqual("encounterRate.water", 0xD25D, [0], 0);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Battle()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("battle.mode", 0xD22D, [1], "Wild");
            mapper.AssertAreEqual("battle.type", 0xD230, [0], "NORMAL");
            mapper.AssertAreEqual("battle.result", 0xD0EE, [0], "WIN");
            mapper.AssertAreEqual("battle.textBuffer", 0xD073, [132, 173, 164, 172, 184, 80, 191, 56, 23, 234, 6], "Enemy");
            mapper.AssertAreEqual("battle.battleStart", 0xD264, [0], 0);
            mapper.AssertAreEqual("battle.trainer.name", 0xD26B, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.trainer.class", 0xD22F, [0], "NOBODY");
            mapper.AssertAreEqual("battle.trainer.id", 0xD231, [0], 0);
            mapper.AssertAreEqual("battle.trainer.totalPokemon", 0xD280, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0xD3EA, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0xD288, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0xD288, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0xD2A7, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0xD290, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.friendship", 0xD2A3, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0xD2A8, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.heldItem", 0xD289, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0xD2AA, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0xD2AC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0xD2AE, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0xD2B0, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.specialAttack", 0xD2B4, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.specialDefense", 0xD2B6, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0xD2B2, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.dvAttack", 0xD29D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.dvDefense", 0xD29D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.dvSpeed", 0xD29E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.dvSpecial", 0xD29E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0xD28A, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0xD28B, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0xD28C, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0xD28D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0xD29F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0xD2A0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0xD2A1, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0xD2A2, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0xD29F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0xD2A0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0xD2A1, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0xD2A2, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpHp", 0xD293, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpAttack", 0xD295, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpDefense", 0xD297, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpSpeed", 0xD299, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.statExpSpecial", 0xD29B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerus", 0xD2A4, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.trainerId", 0xD28E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0xD3F5, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0xD2B8, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0xD2B8, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0xD2D7, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0xD2C0, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.friendship", 0xD2D3, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0xD2D8, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.heldItem", 0xD2B9, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0xD2DA, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0xD2DC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0xD2DE, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0xD2E0, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialAttack", 0xD2E4, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialDefense", 0xD2E6, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0xD2E2, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvAttack", 0xD2CD, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvDefense", 0xD2CD, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvSpeed", 0xD2CE, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.dvSpecial", 0xD2CE, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0xD2BA, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0xD2BB, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0xD2BC, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0xD2BD, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0xD2CF, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0xD2D0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0xD2D1, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0xD2D2, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0xD2CF, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0xD2D0, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0xD2D1, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0xD2D2, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpHp", 0xD2C3, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpAttack", 0xD2C5, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpDefense", 0xD2C7, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpSpeed", 0xD2C9, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.statExpSpecial", 0xD2CB, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerus", 0xD2D4, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.trainerId", 0xD2BE, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0xD400, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0xD2E8, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0xD2E8, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0xD307, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0xD2F0, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.friendship", 0xD303, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0xD308, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.heldItem", 0xD2E9, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0xD30A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0xD30C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0xD30E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0xD310, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialAttack", 0xD314, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialDefense", 0xD316, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0xD312, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvAttack", 0xD2FD, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvDefense", 0xD2FD, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvSpeed", 0xD2FE, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.dvSpecial", 0xD2FE, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0xD2EA, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0xD2EB, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0xD2EC, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0xD2ED, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0xD2FF, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0xD300, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0xD301, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0xD302, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0xD2FF, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0xD300, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0xD301, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0xD302, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpHp", 0xD2F3, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpAttack", 0xD2F5, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpDefense", 0xD2F7, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpSpeed", 0xD2F9, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.statExpSpecial", 0xD2FB, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerus", 0xD304, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.trainerId", 0xD2EE, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0xD40B, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0xD318, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0xD318, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0xD337, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0xD320, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.friendship", 0xD333, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0xD338, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.heldItem", 0xD319, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0xD33A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0xD33C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0xD33E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0xD340, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialAttack", 0xD344, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialDefense", 0xD346, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0xD342, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvAttack", 0xD32D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvDefense", 0xD32D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvSpeed", 0xD32E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.dvSpecial", 0xD32E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0xD31A, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0xD31B, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0xD31C, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0xD31D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0xD32F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0xD330, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0xD331, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0xD332, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0xD32F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0xD330, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0xD331, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0xD332, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpHp", 0xD323, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpAttack", 0xD325, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpDefense", 0xD327, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpSpeed", 0xD329, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.statExpSpecial", 0xD32B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerus", 0xD334, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.trainerId", 0xD31E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0xD416, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0xD348, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0xD348, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0xD367, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0xD350, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.friendship", 0xD363, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0xD368, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.heldItem", 0xD349, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0xD36A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0xD36C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0xD36E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0xD370, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialAttack", 0xD374, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialDefense", 0xD376, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0xD372, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvAttack", 0xD35D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvDefense", 0xD35D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvSpeed", 0xD35E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.dvSpecial", 0xD35E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0xD34A, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0xD34B, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0xD34C, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0xD34D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0xD35F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0xD360, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0xD361, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0xD362, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0xD35F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0xD360, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0xD361, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0xD362, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpHp", 0xD353, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpAttack", 0xD355, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpDefense", 0xD357, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpSpeed", 0xD359, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.statExpSpecial", 0xD35B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerus", 0xD364, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.trainerId", 0xD34E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0xD421, [0], " ");
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0xD378, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0xD378, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0xD397, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0xD380, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.friendship", 0xD393, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0xD398, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.heldItem", 0xD379, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0xD39A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0xD39C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0xD39E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0xD3A0, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialAttack", 0xD3A4, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialDefense", 0xD3A6, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0xD3A2, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvAttack", 0xD38D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvDefense", 0xD38D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvSpeed", 0xD38E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.dvSpecial", 0xD38E, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0xD37A, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0xD37B, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0xD37C, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0xD37D, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0xD38F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0xD390, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0xD391, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0xD392, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0xD38F, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0xD390, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0xD391, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0xD392, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpHp", 0xD383, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpAttack", 0xD385, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpDefense", 0xD387, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpSpeed", 0xD389, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.statExpSpecial", 0xD38B, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerus", 0xD394, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.trainerId", 0xD37E, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0xD0D4, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.species", 0xC62C, [158], "Totodile");
            mapper.AssertAreEqual("battle.yourPokemon.pokedexNumber", 0xC62C, [158], "158");
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0xC64A, [21], "Water");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0xC64B, [21], "Water");
            mapper.AssertAreEqual("battle.yourPokemon.level", 0xC639, [5], 5);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0xC6CC, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0xC6CD, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0xC6CE, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialAttack", 0xC6CF, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialDefense", 0xC6D0, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0xC6D1, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0xC6D2, [7], "0");
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0xC63C, [0, 19], 19);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0xC63E, [0, 21], 21);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0xC640, [0, 12], 12);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0xC642, [0, 12], 12);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0xC644, [0, 10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.specialAttack", 0xC646, [0, 10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.specialDefense", 0xC648, [0, 10], 10);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0xC62E, [10], "Scratch");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0xC62F, [43], "Leer");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0xC630, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0xC631, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0xC634, [34], 34);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0xC635, [30], 30);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0xC636, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0xC637, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move1ppUp", 0xC634, [34], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move2ppUp", 0xC635, [30], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move3ppUp", 0xC636, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4ppUp", 0xC637, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.rollout", 0xC672, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.confuse", 0xC673, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.toxic", 0xC674, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.disable", 0xC675, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.encore", 0xC676, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.perish", 0xC677, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.furyCutter", 0xC678, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.counters.protect", 0xC679, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.status.nightmare", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.curse", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.protect", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.identified", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.perish", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.endure", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.rollout", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.in_love", 0xC668, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.curled", 0xC669, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.bide", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.rampage", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.in_loop", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.flinched", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.charged", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.underground", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.flying", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.confused", 0xC66A, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.x_accuracy", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.mist", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.focus_energ", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.substitute", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.recharge", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.rage", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.leech_seed", 0xC66B, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.toxic", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.transformed", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.encored", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.lock_on", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.destiny_bon", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.status.cant_run", 0xC66C, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0xC663, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.species", 0xD206, [16], "Pidgey");
            mapper.AssertAreEqual("battle.enemyPokemon.pokedexNumber", 0xD206, [16], "16");
            mapper.AssertAreEqual("battle.enemyPokemon.type1", 0xD224, [0], "Normal");
            mapper.AssertAreEqual("battle.enemyPokemon.type2", 0xD225, [2], "Flying");
            mapper.AssertAreEqual("battle.enemyPokemon.heldItem", 0xD207, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0xD12D, [2], 2);
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0xD208, [33], "Tackle");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0xD209, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0xD20A, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0xD20B, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move1pp", 0xD20E, [34], 34);
            mapper.AssertAreEqual("battle.enemyPokemon.move2pp", 0xD20F, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3pp", 0xD210, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4pp", 0xD211, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1ppUp", 0xD20E, [34], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move2ppUp", 0xD20F, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3ppUp", 0xD210, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4ppUp", 0xD211, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0xD218, [0, 13], 13);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0xD216, [0, 7], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0xD21A, [0, 7], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0xD21C, [0, 7], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.specialAttack", 0xD220, [0, 6], 6);
            mapper.AssertAreEqual("battle.enemyPokemon.specialDefense", 0xD222, [0, 6], 6);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0xD21E, [0, 7], 7);
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAttack", 0xC6D4, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageDefense", 0xC6D5, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpeed", 0xC6D6, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialAttack", 0xC6D7, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialDefense", 0xC6D8, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAccuracy", 0xC6D9, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageEvasion", 0xC6DA, [7], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.enemyMonEnd", 0xD22D, [1], 1);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.rollout", 0xC67A, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.confuse", 0xC67B, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.toxic", 0xC67C, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.disable", 0xC67D, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.encore", 0xC67E, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.perish", 0xC67F, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.furyCutter", 0xC680, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.counters.protect", 0xC681, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.status.nightmare", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.curse", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.protect", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.identified", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.perish", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.endure", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.rollout", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.in_love", 0xC66D, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.curled", 0xC66E, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.bide", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.rampage", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.in_loop", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.flinched", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.charged", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.underground", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.flying", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.confused", 0xC66F, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.x_accuracy", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.mist", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.focus_energ", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.substitute", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.recharge", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.rage", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.leech_seed", 0xC670, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.toxic", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.transformed", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.encored", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.lock_on", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.destiny_bon", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.status.cant_run", 0xC671, [0], false);
            mapper.AssertAreEqual("battle.info.currentDamage", 0xD256, [0, 0], 0);
            mapper.AssertAreEqual("battle.info.lowHealthAlarm", 0xC6FD, [0], "Enabled");
            mapper.AssertAreEqual("battle.info.miss", 0xC667, [0], 0);
            mapper.AssertAreEqual("battle.info.turnEnded", 0xC6B4, [0], 0);
            mapper.AssertAreEqual("battle.info.playerTurnTaken", 0xC6DD, [1], 1);
            mapper.AssertAreEqual("battle.info.enemyTurnTaken", 0xC6DC, [1], 1);
            mapper.AssertAreEqual("battle.field.player.statusSafeguard", 0xC6FF, [0], false);
            mapper.AssertAreEqual("battle.field.player.statusReflect", 0xC6FF, [0], false);
            mapper.AssertAreEqual("battle.field.player.statusLightScreen", 0xC6FF, [0], false);
            mapper.AssertAreEqual("battle.field.player.safeguardCount", 0xC701, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightScreenCount", 0xC702, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflectCount", 0xC703, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.statusSafeguard", 0xC700, [0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusReflect", 0xC700, [0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusLightScreen", 0xC700, [0], false);
            mapper.AssertAreEqual("battle.field.enemy.safeguardCount", 0xCBE3, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.lightScreenCount", 0xCBE4, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.reflectCount", 0xCBE5, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0xC70A, [0], null);
            mapper.AssertAreEqual("battle.field.weatherCount", 0xC70B, [0], 0);
            mapper.AssertAreEqual("battle.weather.weatherType", 0xC70A, [0], null);
            mapper.AssertAreEqual("battle.weather.weatherTurnsRemaining", 0xC70B, [0], 0);
            mapper.AssertAreEqual("battle.lowHealthAlarm", 0xC6FD, [0], "Enabled");
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Options()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("options.textSpeed2", 0xCFCC, [225], false);
            mapper.AssertAreEqual("options.textSpeed3", 0xCFCC, [225], false);
            mapper.AssertAreEqual("options.sound", 0xCFCC, [225], true);
            mapper.AssertAreEqual("options.battleStyle", 0xCFCC, [225], true);
            mapper.AssertAreEqual("options.battleAnimations", 0xCFCC, [225], true);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_GameTime()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("gameTime.hours", 0xD4C4, [0, 0], 0);
            mapper.AssertAreEqual("gameTime.minutes", 0xD4C6, [3], 3);
            mapper.AssertAreEqual("gameTime.seconds", 0xD4C7, [29], 29);
            mapper.AssertAreEqual("gameTime.frames", 0xD4C8, [56], 56);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Time()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("time.current.day", 0xD4CB, [0], "Sunday");
            mapper.AssertAreEqual("time.current.hour", 0xFF94, [10], 10);
            mapper.AssertAreEqual("time.current.minute", 0xFF96, [3], 3);
            mapper.AssertAreEqual("time.current.second", 0xFF98, [48], 48);
            mapper.AssertAreEqual("time.current.dst", 0xD4C2, [128], true);
            mapper.AssertAreEqual("time.current.timeOfDay", 0xD269, [1], "Day");
            mapper.AssertAreEqual("time.start.day", 0xD4B6, [0], "Sunday");
            mapper.AssertAreEqual("time.start.hour", 0xD4B7, [9], 9);
            mapper.AssertAreEqual("time.start.minute", 0xD4B8, [59], 59);
            mapper.AssertAreEqual("time.start.second", 0xD4B9, [42], 42);
            mapper.AssertAreEqual("time.rtc.day", 0xFF8D, [0, 0], 0);
            mapper.AssertAreEqual("time.rtc.hour", 0xFF8F, [0], 0);
            mapper.AssertAreEqual("time.rtc.minute", 0xFF90, [4], 4);
            mapper.AssertAreEqual("time.rtc.second", 0xFF91, [6], 6);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_GameClock()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("gameClock.day", 0xD4B6, [0], "Sunday");
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Audio()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("audio.mapMusic", 0xC2C0, [52], 52);
            mapper.AssertAreEqual("audio.currentSound", 0xC2BF, [172], 172);
            mapper.AssertAreEqual("audio.musicId", 0xC29D, [172, 0], 44032);
            mapper.AssertAreEqual("audio.musicBank", 0xC29F, [60], 60);
            mapper.AssertAreEqual("audio.channel1MusicID", 0xC101, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channel2MusicID", 0xC133, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channel3MusicID", 0xC165, [41, 0], 10496);
            mapper.AssertAreEqual("audio.channel4MusicID", 0xC197, [0, 0], 0);
            mapper.AssertAreEqual("audio.channel5MusicID", 0xC1C9, [0, 0], 0);
            mapper.AssertAreEqual("audio.channel6MusicID", 0xC1FB, [0, 0], 0);
            mapper.AssertAreEqual("audio.channel7MusicID", 0xC22D, [0, 0], 0);
            mapper.AssertAreEqual("audio.channel8MusicID", 0xC25F, [0, 0], 0);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Screen()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("screen.text.prompt", 0xC606, [122], "");
            mapper.AssertAreEqual("screen.menu.currentItem", 0xCC26, [0], 0);
            mapper.AssertAreEqual("screen.menu.wMenuFlags", 0xCF81, [64], 64);
            mapper.AssertAreEqual("screen.menu.wMenuCursorPosition", 0xCF88, [1], 1);
            mapper.AssertAreEqual("screen.menu.wPCItemsCursor", 0xD0D7, [0], 0);
            mapper.AssertAreEqual("screen.menu.wPartyMenuCursor", 0xD0D8, [0], 0);
            mapper.AssertAreEqual("screen.menu.wItemsPocketCursor", 0xD0D9, [0], 0);
            mapper.AssertAreEqual("screen.menu.wKeyItemsPocketCursor", 0xD0DA, [0], 0);
            mapper.AssertAreEqual("screen.menu.wBallsPocketCursor", 0xD0DB, [0], 0);
            mapper.AssertAreEqual("screen.menu.wTMHMPocketCursor", 0xD0DC, [0], 0);
            mapper.AssertAreEqual("screen.menu.wPCItemsScrollPosition", 0xD0DD, [0], 0);
            mapper.AssertAreEqual("screen.menu.wItemsPocketScrollPosition", 0xD0DF, [0], 0);
            mapper.AssertAreEqual("screen.menu.wKeyItemsPocketScrollPosition", 0xD0E0, [0], 0);
            mapper.AssertAreEqual("screen.menu.wBallsPocketScrollPosition", 0xD0E1, [0], 0);
            mapper.AssertAreEqual("screen.menu.wTMHMPocketScrollPosition", 0xD0E2, [0], 0);
            mapper.AssertAreEqual("screen.tiles.column1.tile1", 0x980C, [0], 0);
            mapper.AssertAreEqual("screen.tiles.column1.tile2", 0x982C, [1], 1);
            mapper.AssertAreEqual("screen.tiles.column1.tile3", 0x984C, [2], 2);
            mapper.AssertAreEqual("screen.tiles.column1.tile4", 0x986C, [3], 3);
            mapper.AssertAreEqual("screen.tiles.column1.tile5", 0x988C, [4], 4);
            mapper.AssertAreEqual("screen.tiles.column1.tile6", 0x98AC, [5], 5);
            mapper.AssertAreEqual("screen.tiles.column1.tile7", 0x98CC, [6], 6);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Extras()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("squidgyExtras.repelStepsRemaining", 0xDCA1, [0], 0);
            mapper.AssertAreEqual("squidgyExtras.walkingType", 0xD95D, [0], "Walking");
            mapper.AssertAreEqual("squidgyExtras.warpLocation", 0xDCB2, [0, 0], null);
            mapper.AssertAreEqual("squidgyExtras.mapLocation", 0xDCB5, [24, 3], "Route 29");
            mapper.AssertAreEqual("squidgyExtras.bikeCall", 0xDCA2, [0, 0], 0);
            mapper.AssertAreEqual("squidgyExtras.poisonSteps", 0xDC74, [3], 3);
            mapper.AssertAreEqual("squidgyExtras.battleFriendship", 0xC638, [70], 70);
            mapper.AssertAreEqual("squidgyExtras.battleDVs.battleDVAttack", 0xC632, [187], 11);
            mapper.AssertAreEqual("squidgyExtras.battleDVs.battleDVDefense", 0xC632, [187], 11);
            mapper.AssertAreEqual("squidgyExtras.battleDVs.battleDVSpeed", 0xC633, [155], 9);
            mapper.AssertAreEqual("squidgyExtras.battleDVs.battleDVSpecial", 0xC633, [155], 11);
            mapper.AssertAreEqual("squidgyExtras.enemyDVs.enemyDVAttack", 0xD20C, [140], 8);
            mapper.AssertAreEqual("squidgyExtras.enemyDVs.enemyDVDefense", 0xD20C, [140], 12);
            mapper.AssertAreEqual("squidgyExtras.enemyDVs.enemyDVSpeed", 0xD20D, [210], 13);
            mapper.AssertAreEqual("squidgyExtras.enemyDVs.enemyDVSpecial", 0xD20D, [210], 2);
            mapper.AssertAreEqual("squidgyExtras.inBattleHeldItem", 0xC62D, [173], "Berry");
            mapper.AssertAreEqual("squidgyExtras.playerMinimized", 0xC6FE, [0], 0);
            mapper.AssertAreEqual("squidgyExtras.enemyMinimized", 0xC6FA, [0], 0);
            mapper.AssertAreEqual("squidgyExtras.hallOfFame", 0xD84C, [16], false);
            mapper.AssertAreEqual("squidgyExtras.isFlash", 0xD84C, [16], false);
            mapper.AssertAreEqual("squidgyExtras.wildEncounters", 0xD84C, [16], false);
            mapper.AssertAreEqual("squidgyExtras.battleFlag64", 0xC664, [1], 1);
            mapper.AssertAreEqual("squidgyExtras.playerMoveUsed1", 0xC712, [10], "Scratch");
            mapper.AssertAreEqual("squidgyExtras.playerMoveUsed2", 0xC713, [0], null);
            mapper.AssertAreEqual("squidgyExtras.playerMoveUsed3", 0xC714, [0], null);
            mapper.AssertAreEqual("squidgyExtras.playerMoveUsed4", 0xC715, [0], null);
            mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.willRoomID", 0xD97F, [0], 0);
            mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.kogaRoomID", 0xD980, [0], 0);
            mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.brunoRoomID", 0xD981, [0], 0);
            mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.karenRoomID", 0xD982, [0], 0);
            mapper.AssertAreEqual("squidgyExtras.eliteFourRooms.lanceRoomID", 0xD983, [0], 0);
            mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseHP", 0xD237, [40], 40);
            mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseAtk", 0xD238, [45], 45);
            mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseDef", 0xD239, [40], 40);
            mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseSpA", 0xD23B, [35], 35);
            mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseSpD", 0xD23C, [35], 35);
            mapper.AssertAreEqual("squidgyExtras.enemyBaseStats.enemyBaseSpe", 0xD23A, [56], 56);
        }
        [TestMethod]
        public async Task Crystal_Deprecated_Patch()
        {
            await Load_GBC_PokemonCrystalDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("patch.turnCounter", 0xCFD8, [0, 0], 0);
            mapper.AssertAreEqual("patch.time.frameCount", 0x10191, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.time.oWFrameCount", 0x10195, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.time.battleFrameCount", 0x10199, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.time.menuFrameCount", 0x1019D, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.time.introsFrameCount", 0x101A1, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.saves.saveCount", 0x101A5, [0, 0], 0);
            mapper.AssertAreEqual("patch.saves.reloadCount", 0x101A7, [0, 0], 0);
            mapper.AssertAreEqual("patch.saves.clockResetCount", 0x101A9, [0, 0], 0);
            mapper.AssertAreEqual("patch.steps.stepCount", 0x101AB, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.steps.stepCountWalk", 0x101AF, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.steps.stepCountSurf", 0x101B3, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.steps.stepCountBike", 0x101B7, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.steps.bonks", 0x101BB, [0, 0], 0);
            mapper.AssertAreEqual("patch.battles.battles", 0x10223, [0, 0], 0);
            mapper.AssertAreEqual("patch.battles.trainerBattles", 0x10225, [0, 0], 0);
            mapper.AssertAreEqual("patch.battles.wildBattles", 0x10227, [0, 0], 0);
            mapper.AssertAreEqual("patch.battles.battlesFled", 0x10229, [0, 0], 0);
            mapper.AssertAreEqual("patch.battles.failedRuns", 0x1022B, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.damage.totalDamageDealt", 0x101BD, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.damage.actualDamageDealt", 0x101C1, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.damage.totalDamageTaken", 0x101C5, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.damage.actualDamageTaken", 0x101C9, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.ownMovesHit", 0x101CD, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.ownMovesMissed", 0x101CF, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.enemyMovesHit", 0x101D1, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.enemyMovesMissed", 0x101D3, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.ownMovesSE", 0x101D5, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.ownMovesNVE", 0x101D7, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.enemyMovesSE", 0x101D9, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.enemyMovesNVE", 0x101DB, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.criticalsDealt", 0x101DD, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.oHKOsDealt", 0x101DF, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.criticalsTaken", 0x101E1, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.hits.oHKOsTaken", 0x101E3, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.wasConfused", 0x101E5, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyBecameConfused", 0x101E7, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.wasParalyzed", 0x101E9, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyWasParalyzed", 0x101EB, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.wasBurned", 0x101ED, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyWasBurned", 0x101EF, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.wasFrozen", 0x101F1, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyWasFrozen", 0x101F3, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.wasPoisoned", 0x101F5, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyWasPoisoned", 0x101F7, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.wasPoisonedBadly", 0x101F9, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyWasPoisonedBadly", 0x101FB, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.fellAsleep", 0x101FD, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyFellAsleep", 0x101FF, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.playerTurnsConfused", 0x10201, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.playerTurnsConfusedHitSelf", 0x10203, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.playerTurnsParalyzed", 0x10205, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.playerTurnsParalyzedFully", 0x10207, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyTurnsConfused", 0x10209, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyTurnsConfusedHitSelf", 0x1020B, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyTurnsParalyzed", 0x1020D, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.status.enemyTurnsParalyzedFully", 0x1020F, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.heals.playerHPHealed", 0x10211, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.heals.enemyHPHealed", 0x10215, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.playerPokemonFainted", 0x10219, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.enemyPokemonFainted", 0x1021B, [0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.experienceGained", 0x1021D, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.battle_info.switchouts", 0x10221, [0, 0], 0);
            mapper.AssertAreEqual("patch.money.moneyMade", 0x1022D, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.money.moneySpent", 0x10231, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.money.moneyLost", 0x10235, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("patch.items.itemsPickedUp", 0x10239, [0, 0], 0);
            mapper.AssertAreEqual("patch.items.itemsBought", 0x1023B, [0, 0], 0);
            mapper.AssertAreEqual("patch.items.itemsSold", 0x1023D, [0, 0], 0);
            mapper.AssertAreEqual("patch.catching.ballsThrown", 0x10241, [0, 0], 0);
            mapper.AssertAreEqual("patch.catching.pokemonCaughtInBalls", 0x10243, [0, 0], 0);
            mapper.AssertAreEqual("patch.catching.numPokemaniacsFought", 0x10245, [0, 0], 0);
            mapper.AssertAreEqual("patch.movesLearnt", 0x1023F, [0, 0], 0);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Player()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x2024AD0, [199, 187, 211, 255, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("player.gender", 0x2024AD8, [1], "Female");
            mapper.AssertAreEqual("player.teamCount", 0x20244E9, [1], 1);
            mapper.AssertAreEqual("player.team.0.personalityValue", 0x0, [32, 6, 83, 204], 3427993120);
            mapper.AssertAreEqual("player.team.0.checksum", 0x1C, [255, 74], 19199);
            mapper.AssertAreEqual("player.team.0.otID", 0x4, [132, 201, 87, 244], 4099393924);
            mapper.AssertAreEqual("player.team.0.nickname", 0x8, [200, 195, 189, 197, 255, 255, 255, 255, 255, 255], "NICK");
            mapper.AssertAreEqual("player.team.0.species", 0x20, [24, 1], "Torchic");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0x20, [24, 1], "255");
            mapper.AssertAreEqual("player.team.0.speciesArray", 0x20, [24, 1], "{ pokedexNumber: 255, name: 'Torchic' }");
            mapper.AssertAreEqual("player.team.0.level", 0x54, [5], 5);
            mapper.AssertAreEqual("player.team.0.expPoints", 0x24, [167, 0, 0, 0], 167);
            mapper.AssertAreEqual("player.team.0.nature", 0x0, [32, 6, 83, 204], 20);
            mapper.AssertAreEqual("player.team.0.friendship", 0x29, [71], 71);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.0.hp", 0x56, [14, 0], 14);
            mapper.AssertAreEqual("player.team.0.maxHp", 0x58, [20, 0], 20);
            mapper.AssertAreEqual("player.team.0.attack", 0x5A, [10, 0], 10);
            mapper.AssertAreEqual("player.team.0.defense", 0x5C, [10, 0], 10);
            mapper.AssertAreEqual("player.team.0.speed", 0x5E, [10, 0], 10);
            mapper.AssertAreEqual("player.team.0.specialAttack", 0x60, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.specialDefense", 0x62, [12, 0], 12);
            mapper.AssertAreEqual("player.team.0.ivEggAbilityBlock", 0x48, [220, 251, 135, 43], 730332124);
            mapper.AssertAreEqual("player.team.0.ivHp", 0x48, [220, 251, 135, 43], 28);
            mapper.AssertAreEqual("player.team.0.ivAttack", 0x48, [220, 251, 135, 43], 30);
            mapper.AssertAreEqual("player.team.0.ivDefense", 0x48, [220, 251, 135, 43], 30);
            mapper.AssertAreEqual("player.team.0.ivSpeed", 0x48, [220, 251, 135, 43], 15);
            mapper.AssertAreEqual("player.team.0.ivSpecialAttack", 0x48, [220, 251, 135, 43], 24);
            mapper.AssertAreEqual("player.team.0.ivSpecialDefense", 0x48, [220, 251, 135, 43], 21);
            mapper.AssertAreEqual("player.team.0.isEgg", 0x48, [220, 251, 135, 43], false);
            mapper.AssertAreEqual("player.team.0.ability", 0x48, [220, 251, 135, 43], false);
            mapper.AssertAreEqual("player.team.0.evHp", 0x38, [1], 1);
            mapper.AssertAreEqual("player.team.0.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evSpeed", 0x3B, [1], 1);
            mapper.AssertAreEqual("player.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1", 0x2C, [10, 0], "SCRATCH");
            mapper.AssertAreEqual("player.team.0.move2", 0x2E, [45, 0], "GROWL");
            mapper.AssertAreEqual("player.team.0.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.move1pp", 0x34, [32], 32);
            mapper.AssertAreEqual("player.team.0.move2pp", 0x35, [40], 40);
            mapper.AssertAreEqual("player.team.0.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.otName", 0x14, [199, 187, 211, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("player.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.pokerusStatus", 0x24, [167], 167);
            mapper.AssertAreEqual("player.team.0.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.robbinsObedience", 0x2C, [10, 0, 45, 0], 2949130);
            mapper.AssertAreEqual("player.team.1.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.1.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.1.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.1.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.badge1", 0x2026D8A, [0], false);
            mapper.AssertAreEqual("player.badges.badge2", 0x2026D8A, [0], false);
            mapper.AssertAreEqual("player.badges.badge3", 0x2026D8A, [0], false);
            mapper.AssertAreEqual("player.badges.badge4", 0x2026D8A, [0], false);
            mapper.AssertAreEqual("player.badges.badge5", 0x2026D8A, [0], false);
            mapper.AssertAreEqual("player.badges.badge6", 0x2026D8A, [0], false);
            mapper.AssertAreEqual("player.badges.badge7", 0x2026D8A, [0], false);
            mapper.AssertAreEqual("player.badges.badge8", 0x2026D8A, [0], false);
            mapper.AssertAreEqual("player.bag.quantityDecyptionKey", 0x2024B7C, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.0.item", 0x2025FDC, [13, 0], "POTION");
            mapper.AssertAreEqual("player.bag.items.0.quantity", 0x2025FDE, [159, 244], 62623);
            mapper.AssertAreEqual("player.bag.items.1.item", 0x2025FE0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.1.quantity", 0x2025FE2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.2.item", 0x2025FE4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.2.quantity", 0x2025FE6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.3.item", 0x2025FE8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.3.quantity", 0x2025FEA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.4.item", 0x2025FEC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.4.quantity", 0x2025FEE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.5.item", 0x2025FF0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.5.quantity", 0x2025FF2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.6.item", 0x2025FF4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.6.quantity", 0x2025FF6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.7.item", 0x2025FF8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.7.quantity", 0x2025FFA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.8.item", 0x2025FFC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.8.quantity", 0x2025FFE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.9.item", 0x2026000, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.9.quantity", 0x2026002, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.10.item", 0x2026004, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.10.quantity", 0x2026006, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.11.item", 0x2026008, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.11.quantity", 0x202600A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.12.item", 0x202600C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.12.quantity", 0x202600E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.13.item", 0x2026010, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.13.quantity", 0x2026012, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.14.item", 0x2026014, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.14.quantity", 0x2026016, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.15.item", 0x2026018, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.15.quantity", 0x202601A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.16.item", 0x202601C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.16.quantity", 0x202601E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.17.item", 0x2026020, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.17.quantity", 0x2026022, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.18.item", 0x2026024, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.18.quantity", 0x2026026, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.19.item", 0x2026028, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.19.quantity", 0x202602A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.20.item", 0x202602C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.20.quantity", 0x202602E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.21.item", 0x2026030, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.21.quantity", 0x2026032, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.22.item", 0x2026034, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.22.quantity", 0x2026036, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.23.item", 0x2026038, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.23.quantity", 0x202603A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.24.item", 0x202603C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.24.quantity", 0x202603E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.25.item", 0x2026040, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.25.quantity", 0x2026042, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.26.item", 0x2026044, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.26.quantity", 0x2026046, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.27.item", 0x2026048, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.27.quantity", 0x202604A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.28.item", 0x202604C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.28.quantity", 0x202604E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.items.29.item", 0x2026050, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.29.quantity", 0x2026052, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.0.item", 0x2026054, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.0.quantity", 0x2026056, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.1.item", 0x2026058, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.1.quantity", 0x202605A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.2.item", 0x202605C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.2.quantity", 0x202605E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.3.item", 0x2026060, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.3.quantity", 0x2026062, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.4.item", 0x2026064, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.4.quantity", 0x2026066, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.5.item", 0x2026068, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.5.quantity", 0x202606A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.6.item", 0x202606C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.6.quantity", 0x202606E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.7.item", 0x2026070, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.7.quantity", 0x2026072, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.8.item", 0x2026074, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.8.quantity", 0x2026076, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.9.item", 0x2026078, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.9.quantity", 0x202607A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.10.item", 0x202607C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.10.quantity", 0x202607E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.11.item", 0x2026080, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.11.quantity", 0x2026082, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.12.item", 0x2026084, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.12.quantity", 0x2026086, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.13.item", 0x2026088, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.13.quantity", 0x202608A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.14.item", 0x202608C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.14.quantity", 0x202608E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.15.item", 0x2026090, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.15.quantity", 0x2026092, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.16.item", 0x2026094, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.16.quantity", 0x2026096, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.17.item", 0x2026098, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.17.quantity", 0x202609A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.18.item", 0x202609C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.18.quantity", 0x202609E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.19.item", 0x20260A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.19.quantity", 0x20260A2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.20.item", 0x20260A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.20.quantity", 0x20260A6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.21.item", 0x20260A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.21.quantity", 0x20260AA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.22.item", 0x20260AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.22.quantity", 0x20260AE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.23.item", 0x20260B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.23.quantity", 0x20260B2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.24.item", 0x20260B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.24.quantity", 0x20260B6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.25.item", 0x20260B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.25.quantity", 0x20260BA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.26.item", 0x20260BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.26.quantity", 0x20260BE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.27.item", 0x20260C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.27.quantity", 0x20260C2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.28.item", 0x20260C4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.28.quantity", 0x20260C6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.keyItems.29.item", 0x20260C8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.29.quantity", 0x20260CA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.0.item", 0x20260CC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.0.quantity", 0x20260CE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.1.item", 0x20260D0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.1.quantity", 0x20260D2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.2.item", 0x20260D4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.2.quantity", 0x20260D6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.3.item", 0x20260D8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.3.quantity", 0x20260DA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.4.item", 0x20260DC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.4.quantity", 0x20260DE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.5.item", 0x20260E0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.5.quantity", 0x20260E2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.6.item", 0x20260E4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.6.quantity", 0x20260E6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.7.item", 0x20260E8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.7.quantity", 0x20260EA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.8.item", 0x20260EC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.8.quantity", 0x20260EE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.9.item", 0x20260F0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.9.quantity", 0x20260F2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.10.item", 0x20260F4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.10.quantity", 0x20260F6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.11.item", 0x20260F8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.11.quantity", 0x20260FA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.12.item", 0x20260FC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.12.quantity", 0x20260FE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.13.item", 0x2026100, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.13.quantity", 0x2026102, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.14.item", 0x2026104, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.14.quantity", 0x2026106, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.pokeBalls.15.item", 0x2026108, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.15.quantity", 0x202610A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.0.item", 0x202610C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.0.quantity", 0x202610E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.1.item", 0x2026110, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.1.quantity", 0x2026112, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.2.item", 0x2026114, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.2.quantity", 0x2026116, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.3.item", 0x2026118, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.3.quantity", 0x202611A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.4.item", 0x202611C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.4.quantity", 0x202611E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.5.item", 0x2026120, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.5.quantity", 0x2026122, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.6.item", 0x2026124, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.6.quantity", 0x2026126, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.7.item", 0x2026128, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.7.quantity", 0x202612A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.8.item", 0x202612C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.8.quantity", 0x202612E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.9.item", 0x2026130, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.9.quantity", 0x2026132, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.10.item", 0x2026134, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.10.quantity", 0x2026136, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.11.item", 0x2026138, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.11.quantity", 0x202613A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.12.item", 0x202613C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.12.quantity", 0x202613E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.13.item", 0x2026140, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.13.quantity", 0x2026142, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.14.item", 0x2026144, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.14.quantity", 0x2026146, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.15.item", 0x2026148, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.15.quantity", 0x202614A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.16.item", 0x202614C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.16.quantity", 0x202614E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.17.item", 0x2026150, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.17.quantity", 0x2026152, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.18.item", 0x2026154, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.18.quantity", 0x2026156, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.19.item", 0x2026158, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.19.quantity", 0x202615A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.20.item", 0x202615C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.20.quantity", 0x202615E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.21.item", 0x2026160, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.21.quantity", 0x2026162, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.22.item", 0x2026164, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.22.quantity", 0x2026166, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.23.item", 0x2026168, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.23.quantity", 0x202616A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.24.item", 0x202616C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.24.quantity", 0x202616E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.25.item", 0x2026170, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.25.quantity", 0x2026172, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.26.item", 0x2026174, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.26.quantity", 0x2026176, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.27.item", 0x2026178, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.27.quantity", 0x202617A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.28.item", 0x202617C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.28.quantity", 0x202617E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.29.item", 0x2026180, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.29.quantity", 0x2026182, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.30.item", 0x2026184, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.30.quantity", 0x2026186, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.31.item", 0x2026188, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.31.quantity", 0x202618A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.32.item", 0x202618C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.32.quantity", 0x202618E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.33.item", 0x2026190, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.33.quantity", 0x2026192, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.34.item", 0x2026194, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.34.quantity", 0x2026196, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.35.item", 0x2026198, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.35.quantity", 0x202619A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.36.item", 0x202619C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.36.quantity", 0x202619E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.37.item", 0x20261A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.37.quantity", 0x20261A2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.38.item", 0x20261A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.38.quantity", 0x20261A6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.39.item", 0x20261A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.39.quantity", 0x20261AA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.40.item", 0x20261AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.40.quantity", 0x20261AE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.41.item", 0x20261B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.41.quantity", 0x20261B2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.42.item", 0x20261B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.42.quantity", 0x20261B6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.43.item", 0x20261B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.43.quantity", 0x20261BA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.44.item", 0x20261BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.44.quantity", 0x20261BE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.45.item", 0x20261C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.45.quantity", 0x20261C2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.46.item", 0x20261C4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.46.quantity", 0x20261C6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.47.item", 0x20261C8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.47.quantity", 0x20261CA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.48.item", 0x20261CC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.48.quantity", 0x20261CE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.49.item", 0x20261D0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.49.quantity", 0x20261D2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.50.item", 0x20261D4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.50.quantity", 0x20261D6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.51.item", 0x20261D8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.51.quantity", 0x20261DA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.52.item", 0x20261DC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.52.quantity", 0x20261DE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.53.item", 0x20261E0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.53.quantity", 0x20261E2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.54.item", 0x20261E4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.54.quantity", 0x20261E6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.55.item", 0x20261E8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.55.quantity", 0x20261EA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.56.item", 0x20261EC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.56.quantity", 0x20261EE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.57.item", 0x20261F0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.57.quantity", 0x20261F2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.58.item", 0x20261F4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.58.quantity", 0x20261F6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.59.item", 0x20261F8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.59.quantity", 0x20261FA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.60.item", 0x20261FC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.60.quantity", 0x20261FE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.61.item", 0x2026200, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.61.quantity", 0x2026202, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.62.item", 0x2026204, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.62.quantity", 0x2026206, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.tmhm.63.item", 0x2026208, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.63.quantity", 0x202620A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.0.item", 0x202620C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.0.quantity", 0x202620E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.1.item", 0x2026210, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.1.quantity", 0x2026212, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.2.item", 0x2026214, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.2.quantity", 0x2026216, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.3.item", 0x2026218, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.3.quantity", 0x202621A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.4.item", 0x202621C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.4.quantity", 0x202621E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.5.item", 0x2026220, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.5.quantity", 0x2026222, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.6.item", 0x2026224, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.6.quantity", 0x2026226, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.7.item", 0x2026228, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.7.quantity", 0x202622A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.8.item", 0x202622C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.8.quantity", 0x202622E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.9.item", 0x2026230, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.9.quantity", 0x2026232, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.10.item", 0x2026234, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.10.quantity", 0x2026236, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.11.item", 0x2026238, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.11.quantity", 0x202623A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.12.item", 0x202623C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.12.quantity", 0x202623E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.13.item", 0x2026240, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.13.quantity", 0x2026242, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.14.item", 0x2026244, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.14.quantity", 0x2026246, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.15.item", 0x2026248, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.15.quantity", 0x202624A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.16.item", 0x202624C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.16.quantity", 0x202624E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.17.item", 0x2026250, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.17.quantity", 0x2026252, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.18.item", 0x2026254, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.18.quantity", 0x2026256, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.19.item", 0x2026258, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.19.quantity", 0x202625A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.20.item", 0x202625C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.20.quantity", 0x202625E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.21.item", 0x2026260, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.21.quantity", 0x2026262, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.22.item", 0x2026264, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.22.quantity", 0x2026266, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.23.item", 0x2026268, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.23.quantity", 0x202626A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.24.item", 0x202626C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.24.quantity", 0x202626E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.25.item", 0x2026270, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.25.quantity", 0x2026272, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.26.item", 0x2026274, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.26.quantity", 0x2026276, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.27.item", 0x2026278, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.27.quantity", 0x202627A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.28.item", 0x202627C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.28.quantity", 0x202627E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.29.item", 0x2026280, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.29.quantity", 0x2026282, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.30.item", 0x2026284, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.30.quantity", 0x2026286, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.31.item", 0x2026288, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.31.quantity", 0x202628A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.32.item", 0x202628C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.32.quantity", 0x202628E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.33.item", 0x2026290, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.33.quantity", 0x2026292, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.34.item", 0x2026294, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.34.quantity", 0x2026296, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.35.item", 0x2026298, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.35.quantity", 0x202629A, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.36.item", 0x202629C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.36.quantity", 0x202629E, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.37.item", 0x20262A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.37.quantity", 0x20262A2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.38.item", 0x20262A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.38.quantity", 0x20262A6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.39.item", 0x20262A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.39.quantity", 0x20262AA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.40.item", 0x20262AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.40.quantity", 0x20262AE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.41.item", 0x20262B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.41.quantity", 0x20262B2, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.42.item", 0x20262B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.42.quantity", 0x20262B6, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.43.item", 0x20262B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.43.quantity", 0x20262BA, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.44.item", 0x20262BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.44.quantity", 0x20262BE, [158, 244], 62622);
            mapper.AssertAreEqual("player.bag.berries.45.item", 0x20262C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.45.quantity", 0x20262C2, [158, 244], 62622);
            mapper.AssertAreEqual("player.pcItems.0.item", 0x2025F14, [13, 0], "POTION");
            mapper.AssertAreEqual("player.pcItems.0.quantity", 0x2025F16, [1, 0], 1);
            mapper.AssertAreEqual("player.pcItems.1.item", 0x2025F18, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.1.quantity", 0x2025F1A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.2.item", 0x2025F1C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.2.quantity", 0x2025F1E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.3.item", 0x2025F20, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.3.quantity", 0x2025F22, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.4.item", 0x2025F24, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.4.quantity", 0x2025F26, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.5.item", 0x2025F28, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.5.quantity", 0x2025F2A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.6.item", 0x2025F2C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.6.quantity", 0x2025F2E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.7.item", 0x2025F30, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.7.quantity", 0x2025F32, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.8.item", 0x2025F34, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.8.quantity", 0x2025F36, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.9.item", 0x2025F38, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.9.quantity", 0x2025F3A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.10.item", 0x2025F3C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.10.quantity", 0x2025F3E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.11.item", 0x2025F40, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.11.quantity", 0x2025F42, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.12.item", 0x2025F44, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.12.quantity", 0x2025F46, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.13.item", 0x2025F48, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.13.quantity", 0x2025F4A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.14.item", 0x2025F4C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.14.quantity", 0x2025F4E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.15.item", 0x2025F50, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.15.quantity", 0x2025F52, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.16.item", 0x2025F54, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.16.quantity", 0x2025F56, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.17.item", 0x2025F58, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.17.quantity", 0x2025F5A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.18.item", 0x2025F5C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.18.quantity", 0x2025F5E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.19.item", 0x2025F60, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.19.quantity", 0x2025F62, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.20.item", 0x2025F64, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.20.quantity", 0x2025F66, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.21.item", 0x2025F68, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.21.quantity", 0x2025F6A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.22.item", 0x2025F6C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.22.quantity", 0x2025F6E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.23.item", 0x2025F70, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.23.quantity", 0x2025F72, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.24.item", 0x2025F74, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.24.quantity", 0x2025F76, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.25.item", 0x2025F78, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.25.quantity", 0x2025F7A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.26.item", 0x2025F7C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.26.quantity", 0x2025F7E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.27.item", 0x2025F80, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.27.quantity", 0x2025F82, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.28.item", 0x2025F84, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.28.quantity", 0x2025F86, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.29.item", 0x2025F88, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.29.quantity", 0x2025F8A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.30.item", 0x2025F8C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.30.quantity", 0x2025F8E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.31.item", 0x2025F90, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.31.quantity", 0x2025F92, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.32.item", 0x2025F94, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.32.quantity", 0x2025F96, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.33.item", 0x2025F98, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.33.quantity", 0x2025F9A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.34.item", 0x2025F9C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.34.quantity", 0x2025F9E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.35.item", 0x2025FA0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.35.quantity", 0x2025FA2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.36.item", 0x2025FA4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.36.quantity", 0x2025FA6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.37.item", 0x2025FA8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.37.quantity", 0x2025FAA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.38.item", 0x2025FAC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.38.quantity", 0x2025FAE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.39.item", 0x2025FB0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.39.quantity", 0x2025FB2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.40.item", 0x2025FB4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.40.quantity", 0x2025FB6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.41.item", 0x2025FB8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.41.quantity", 0x2025FBA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.42.item", 0x2025FBC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.42.quantity", 0x2025FBE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.43.item", 0x2025FC0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.43.quantity", 0x2025FC2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.44.item", 0x2025FC4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.44.quantity", 0x2025FC6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.45.item", 0x2025FC8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.45.quantity", 0x2025FCA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.46.item", 0x2025FCC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.46.quantity", 0x2025FCE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.47.item", 0x2025FD0, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.47.quantity", 0x2025FD2, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.48.item", 0x2025FD4, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.48.quantity", 0x2025FD6, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.49.item", 0x2025FD8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.49.quantity", 0x2025FDA, [0, 0], 0);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Overworld()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("overworld.mapName", 0x20322E4, [0, 18], "ROUTE 103");
            mapper.AssertAreEqual("overworld.walkRunState", 0x2037078, [255], null);
            mapper.AssertAreEqual("overworld.safariSteps", 0x2039996, [0], 0);
            mapper.AssertAreEqual("overworld.disabledEncounters", 0x2038C00, [0], 0);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Battle()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("battle.outcome", 0x202433A, [0], null);
            mapper.AssertAreEqual("battle.type.double", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.is_battle", 0x2022FEC, [12, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.type.trainer", 0x2022FEC, [12, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.type.first_battle", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link_in_battle", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.multi", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.safari", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.battle_tower", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.old_man_tutorial", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.roamer", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.eReader_trainer", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.kyogre_groudon", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost_unveiled", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.regi", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.pokedude", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.wild_scripted", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.legenadry_frlg", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.trainer_tower", 0x2022FEC, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.opponentA", 0x2038BCA, [14, 2], "RIVAL_BRENDAN_ROUTE_103_TORCHIC");
            mapper.AssertAreEqual("battle.trainer.opponentAId", 0x2038BCA, [14, 2], 526);
            mapper.AssertAreEqual("battle.trainer.opponentB", 0x2038BCC, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.opponentBId", 0x2038BCC, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.partnerId", 0x2038BCE, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.totalPokemon", 0x20244EA, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.personalityValue", 0x0, [136, 246, 9, 0], 652936);
            mapper.AssertAreEqual("battle.trainer.team.0.checksum", 0x1C, [151, 35], 9111);
            mapper.AssertAreEqual("battle.trainer.team.0.otID", 0x4, [238, 10, 198, 101], 1707477742);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0x8, [199, 207, 190, 197, 195, 202, 255, 4, 108, 0], "MUDKIP");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0x20, [27, 1], "Mudkip");
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0x20, [27, 1], "258");
            mapper.AssertAreEqual("battle.trainer.team.0.speciesArray", 0x20, [27, 1], "{ pokedexNumber: 258, name: 'Mudkip' }");
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0x54, [5], 5);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0x24, [135, 0, 0, 0], 135);
            mapper.AssertAreEqual("battle.trainer.team.0.nature", 0x0, [136, 246, 9, 0], 11);
            mapper.AssertAreEqual("battle.trainer.team.0.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0x56, [16, 0], 16);
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0x58, [20, 0], 20);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0x5A, [12, 0], 12);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0x5C, [9, 0], 9);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0x5E, [9, 0], 9);
            mapper.AssertAreEqual("battle.trainer.team.0.specialAttack", 0x60, [10, 0], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.specialDefense", 0x62, [10, 0], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0x2E, [45, 0], "GROWL");
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0x34, [34], 34);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0x35, [40], 40);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.trainer.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("battle.trainer.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.otName", 0x14, [199, 187, 211, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("battle.trainer.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerusStatus", 0x24, [135], 135);
            mapper.AssertAreEqual("battle.trainer.team.0.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.robbinsObedience", 0x2C, [33, 0, 45, 0], 2949153);
            mapper.AssertAreEqual("battle.trainer.team.1.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0x202406E, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.nickname", 0x20240B4, [200, 195, 189, 197, 255, 47, 0, 3, 11, 0, 0], "NICK");
            mapper.AssertAreEqual("battle.yourPokemon.speciesArray", 0x2024084, [24, 1], "{ pokedexNumber: 255, name: 'Torchic' }");
            mapper.AssertAreEqual("battle.yourPokemon.level", 0x20240AE, [5], 5);
            mapper.AssertAreEqual("battle.yourPokemon.expPoints", 0x20240C8, [167, 0, 0, 0], 167);
            mapper.AssertAreEqual("battle.yourPokemon.friendship", 0x20240AF, [71], 71);
            mapper.AssertAreEqual("battle.yourPokemon.personalityValue", 0x20240CC, [32, 6, 83, 204], 3427993120);
            mapper.AssertAreEqual("battle.yourPokemon.ability", 0x20240A4, [66], "BLAZE");
            mapper.AssertAreEqual("battle.yourPokemon.heldItem", 0x20240B2, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0x20240B0, [20, 0], 20);
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0x20240AC, [14, 0], 14);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0x2024086, [10, 0], 10);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0x2024088, [10, 0], 10);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0x202408A, [10, 0], 10);
            mapper.AssertAreEqual("battle.yourPokemon.specialAttack", 0x202408C, [13, 0], 13);
            mapper.AssertAreEqual("battle.yourPokemon.specialDefense", 0x202408E, [12, 0], 12);
            mapper.AssertAreEqual("battle.yourPokemon.ivEggAbilityBlock", 0x2024098, [220, 251, 135, 43], 730332124);
            mapper.AssertAreEqual("battle.yourPokemon.ivHp", 0x2024098, [220, 251, 135, 43], 28);
            mapper.AssertAreEqual("battle.yourPokemon.ivAttack", 0x2024098, [220, 251, 135, 43], 30);
            mapper.AssertAreEqual("battle.yourPokemon.ivDefense", 0x2024098, [220, 251, 135, 43], 30);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpeed", 0x2024098, [220, 251, 135, 43], 15);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialAttack", 0x2024098, [220, 251, 135, 43], 24);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialDefense", 0x2024098, [220, 251, 135, 43], 21);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0x2024090, [10, 0], "SCRATCH");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0x2024092, [45, 0], "GROWL");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0x2024094, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0x2024096, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0x20240A8, [32], 32);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0x20240A9, [40], 40);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0x20240AA, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0x20240AB, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move1ppUp", 0x20240BF, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move2ppUp", 0x20240BF, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move3ppUp", 0x20240BF, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4ppUp", 0x20240BF, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0x202409D, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0x202409E, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0x202409F, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialAttack", 0x20240A0, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialDefense", 0x20240A1, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0x20240A2, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0x20240A3, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.focusEnergy", 0x20240D6, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0x20240A5, [10], "Fire");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0x20240A6, [10], "Fire");
            mapper.AssertAreEqual("battle.yourPokemon.status1", 0x20240D0, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.status2", 0x20240D0, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.otName", 0x20240C0, [199, 187, 211, 255, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("battle.yourSecondPokemon.partyPos", 0x2024072, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.nickname", 0x2024164, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.yourSecondPokemon.speciesArray", 0x2024134, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.level", 0x202415E, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.expPoints", 0x2024178, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.friendship", 0x202415F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.personalityValue", 0x202417C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ability", 0x2024154, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.heldItem", 0x2024162, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.maxHp", 0x2024160, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.hp", 0x202415C, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.attack", 0x2024136, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.defense", 0x2024138, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.speed", 0x202413A, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialAttack", 0x202413C, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialDefense", 0x202413E, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivEggAbilityBlock", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivHp", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivAttack", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivDefense", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpeed", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialAttack", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialDefense", 0x2024148, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1", 0x2024140, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2", 0x2024142, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3", 0x2024144, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4", 0x2024146, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1pp", 0x2024158, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2pp", 0x2024159, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3pp", 0x202415A, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4pp", 0x202415B, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1ppUp", 0x202416F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2ppUp", 0x202416F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3ppUp", 0x202416F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4ppUp", 0x202416F, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAttack", 0x202414D, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageDefense", 0x202414E, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpeed", 0x202414F, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialAttack", 0x2024150, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialDefense", 0x2024151, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAccuracy", 0x2024152, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageEvasion", 0x2024153, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.focusEnergy", 0x2024186, [0], false);
            mapper.AssertAreEqual("battle.yourSecondPokemon.type1", 0x2024155, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.type2", 0x2024156, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.status1", 0x2024180, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.status2", 0x2024180, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.otName", 0x2024170, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0x2024070, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.nickname", 0x202410C, [199, 207, 190, 197, 195, 202, 255, 0, 0, 0, 0], "MUDKIP");
            mapper.AssertAreEqual("battle.enemyPokemon.speciesArray", 0x20240DC, [27, 1], "{ pokedexNumber: 258, name: 'Mudkip' }");
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0x2024106, [5], 5);
            mapper.AssertAreEqual("battle.enemyPokemon.expPoints", 0x2024120, [135, 0, 0, 0], 135);
            mapper.AssertAreEqual("battle.enemyPokemon.friendship", 0x2024107, [70], 70);
            mapper.AssertAreEqual("battle.enemyPokemon.personalityValue", 0x2024124, [136, 246, 9, 0], 652936);
            mapper.AssertAreEqual("battle.enemyPokemon.ability", 0x20240FC, [67], "TORRENT");
            mapper.AssertAreEqual("battle.enemyPokemon.heldItem", 0x202410A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0x2024108, [20, 0], 20);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0x2024104, [16, 0], 16);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0x20240DE, [12, 0], 12);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0x20240E0, [9, 0], 9);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0x20240E2, [9, 0], 9);
            mapper.AssertAreEqual("battle.enemyPokemon.specialAttack", 0x20240E4, [10, 0], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.specialDefense", 0x20240E6, [10, 0], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.ivEggAbilityBlock", 0x20240F0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivHp", 0x20240F0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivAttack", 0x20240F0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivDefense", 0x20240F0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpeed", 0x20240F0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialAttack", 0x20240F0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialDefense", 0x20240F0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0x20240E8, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0x20240EA, [45, 0], "GROWL");
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0x20240EC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0x20240EE, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move1pp", 0x2024100, [34], 34);
            mapper.AssertAreEqual("battle.enemyPokemon.move2pp", 0x2024101, [40], 40);
            mapper.AssertAreEqual("battle.enemyPokemon.move3pp", 0x2024102, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4pp", 0x2024103, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1ppUp", 0x2024117, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move2ppUp", 0x2024117, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3ppUp", 0x2024117, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4ppUp", 0x2024117, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAttack", 0x20240F5, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageDefense", 0x20240F6, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpeed", 0x20240F7, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialAttack", 0x20240F8, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialDefense", 0x20240F9, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAccuracy", 0x20240FA, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageEvasion", 0x20240FB, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.focusEnergy", 0x202412E, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.type1", 0x20240FD, [11], "Water");
            mapper.AssertAreEqual("battle.enemyPokemon.type2", 0x20240FE, [11], "Water");
            mapper.AssertAreEqual("battle.enemyPokemon.status1", 0x2024128, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.status2", 0x2024128, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.otName", 0x2024118, [199, 187, 211, 255, 255, 255, 255, 255], "MAY");
            mapper.AssertAreEqual("battle.enemySecondPokemon.partyPos", 0x2024074, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.nickname", 0x20241BC, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.enemySecondPokemon.speciesArray", 0x202418C, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.level", 0x20241B6, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.expPoints", 0x20241D0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.friendship", 0x20241B7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.personalityValue", 0x20241D4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ability", 0x20241AC, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.heldItem", 0x20241BA, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.maxHp", 0x20241B8, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.hp", 0x20241B4, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.attack", 0x202418E, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.defense", 0x2024190, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.speed", 0x2024192, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialAttack", 0x2024194, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialDefense", 0x2024196, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivEggAbilityBlock", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivHp", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivAttack", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivDefense", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpeed", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialAttack", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialDefense", 0x20241A0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1", 0x2024198, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2", 0x202419A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3", 0x202419C, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4", 0x202419E, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1pp", 0x20241B0, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2pp", 0x20241B1, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3pp", 0x20241B2, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4pp", 0x20241B3, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1ppUp", 0x20241C7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2ppUp", 0x20241C7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3ppUp", 0x20241C7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4ppUp", 0x20241C7, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAttack", 0x20241A5, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageDefense", 0x20241A6, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpeed", 0x20241A7, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialAttack", 0x20241A8, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialDefense", 0x20241A9, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAccuracy", 0x20241AA, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageEvasion", 0x20241AB, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.focusEnergy", 0x20241DE, [0], false);
            mapper.AssertAreEqual("battle.enemySecondPokemon.type1", 0x20241AD, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.type2", 0x20241AE, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.status1", 0x20241D8, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.status2", 0x20241D8, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.otName", 0x20241C8, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.field.player.statusSafeguard", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusReflect", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusLightScreen", 0x202428E, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.safeguardCount", 0x202429A, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightScreenCount", 0x2024296, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflectCount", 0x2024294, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.statusSafeguard", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusReflect", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusLightScreen", 0x2024290, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.safeguardCount", 0x20242A5, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.lightScreenCount", 0x20242A1, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.reflectCount", 0x202429F, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x20243CC, [0], null);
            mapper.AssertAreEqual("battle.field.weatherCount", 0x20243F8, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleWeather", 0x20243CC, [0], null);
            mapper.AssertAreEqual("battle.turnInfo.battleWeatherTurnCounter", 0x20243F8, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleOutcome", 0x202433A, [0], null);
            mapper.AssertAreEqual("battle.turnInfo.battleBackgroundTiles", 0x202305C, [44, 37, 0, 2], 33563948);
            mapper.AssertAreEqual("battle.turnInfo.battleBackgroundTilesBuffer", 0x2023060, [60, 69, 0, 2], 33572156);
            mapper.AssertAreEqual("battle.turnInfo.battleDialogue", 0x2023064, [18], "Player Control");
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Events()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("events.shoalCaveTidePatch", 0x2026DFF, [0], false);
            mapper.AssertAreEqual("events.rayquazaAwakeOW", 0x2026CF6, [199], true);
            mapper.AssertAreEqual("events.gameclockSet", 0x2026CF6, [199], true);
            mapper.AssertAreEqual("events.savedBirch", 0x2026CF6, [199], true);
            mapper.AssertAreEqual("events.afterKyogre", 0x2026CF6, [199], false);
            mapper.AssertAreEqual("events.pokeballContestRoomOW", 0x2026CF6, [199], true);
            mapper.AssertAreEqual("events.labAssistant", 0x2026CF7, [0], false);
            mapper.AssertAreEqual("events.mauvilleRewardReceived", 0x2026CF7, [0], false);
            mapper.AssertAreEqual("events.scottBattleFrontier", 0x2026CF7, [0], false);
            mapper.AssertAreEqual("events.safariZoneEntrance", 0x2026CF7, [0], false);
            mapper.AssertAreEqual("events.wailmerPail", 0x2026CF7, [0], false);
            mapper.AssertAreEqual("events.pokeblockCase", 0x2026CF7, [0], false);
            mapper.AssertAreEqual("events.secretPowerTM", 0x2026CF8, [0], false);
            mapper.AssertAreEqual("events.tvPersonMauville", 0x2026CF8, [0], false);
            mapper.AssertAreEqual("events.obtainedFlash", 0x2026CF9, [0], false);
            mapper.AssertAreEqual("events.obtainedFly", 0x2026CF9, [0], false);
            mapper.AssertAreEqual("events.aquaHideoutCleared", 0x2026CFA, [0], false);
            mapper.AssertAreEqual("events.obtainedMeteorite", 0x2026CFA, [0], false);
            mapper.AssertAreEqual("events.obtainedHiddenPower", 0x2026CFA, [0], false);
            mapper.AssertAreEqual("events.obtainedBrickBreak", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.obtainedSurf", 0x2026CFB, [0], false);
            mapper.AssertAreEqual("events.tide", 0x2026DFF, [0], false);
            mapper.AssertAreEqual("events.menu.pokemon", 0x2026DF8, [1], true);
            mapper.AssertAreEqual("events.menu.pokedex", 0x2026DF8, [1], false);
            mapper.AssertAreEqual("events.menu.pokenav", 0x2026DF8, [1], false);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Screen()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("screen.menu.itemsMenu", 0x203CE60, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.itemsOffset", 0x203CE6A, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.ballsMenu", 0x203CE62, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.ballsOffset", 0x203CE6C, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.tmhmMenu", 0x203CE64, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.tmhmOffset", 0x203CE6E, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.berriesMenu", 0x203CE66, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.berriesOffset", 0x203CE70, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.keyItemsMenu", 0x203CE68, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.keyItemsOffset", 0x203CE72, [0, 0], 0);
            mapper.AssertAreEqual("screen.menu.partyMenu", 0x203CED1, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleAction.playerL", 0x20244AC, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleAction.enemyL", 0x20244AD, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleAction.playerR", 0x20244AE, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleAction.enemyR", 0x20244AF, [0], "USE_MOVE");
            mapper.AssertAreEqual("screen.menu.battleMove.playerL", 0x20244B0, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.enemyL", 0x20244B1, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.playerR", 0x20244B2, [0], 0);
            mapper.AssertAreEqual("screen.menu.battleMove.enemyR", 0x20244B3, [0], 0);
            mapper.AssertAreEqual("screen.enemy_sprite.battlerSpriteIndex.playerL", 0x20241E4, [6], 6);
            mapper.AssertAreEqual("screen.enemy_sprite.battlerSpriteIndex.enemyL", 0x20241E5, [8], 8);
            mapper.AssertAreEqual("screen.enemy_sprite.battlerSpriteIndex.playerR", 0x20241E6, [0], 0);
            mapper.AssertAreEqual("screen.enemy_sprite.battlerSpriteIndex.enemyR", 0x20241E7, [0], 0);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Trainers()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("trainers.eliteFour.sidney", 0x2026D8C, [0], false);
            mapper.AssertAreEqual("trainers.eliteFour.phoebe", 0x2026D8C, [0], false);
            mapper.AssertAreEqual("trainers.eliteFour.glacia", 0x2026D8C, [0], false);
            mapper.AssertAreEqual("trainers.eliteFour.drake", 0x2026D8C, [0], false);
            mapper.AssertAreEqual("trainers.eliteFour.wallace", 0x2026DFC, [0], false);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Options()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("options.textSpeed", 0x2024AE4, [2], 2);
            mapper.AssertAreEqual("options.battleAnim", 0x2024AE5, [6], true);
            mapper.AssertAreEqual("options.battleStyle", 0x2024AE5, [6], true);
            mapper.AssertAreEqual("options.sound", 0x2024AE5, [6], false);
            mapper.AssertAreEqual("options.buttonMode", 0x2024AE3, [0], 0);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Audio()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("audio.overworldmusicID", 0x2037328, [103, 1], 359);
            mapper.AssertAreEqual("audio.musicID", 0x3007420, [184, 83, 150, 8], 144069560);
            mapper.AssertAreEqual("audio.sound_effect_1", 0x30075F0, [92, 194, 143, 8], 143639132);
            mapper.AssertAreEqual("audio.sound_effect_1_played", 0x30075F4, [0, 0, 0, 128], true);
            mapper.AssertAreEqual("audio.sound_effect_2", 0x3007630, [28, 193, 143, 8], 143638812);
            mapper.AssertAreEqual("audio.sound_effect_2_played", 0x3007634, [0, 0, 0, 128], true);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_GameTime()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("gameTime.hours", 0x2024ADE, [0], 0);
            mapper.AssertAreEqual("gameTime.minutes", 0x2024AE0, [5], 5);
            mapper.AssertAreEqual("gameTime.seconds", 0x2024AE1, [14], 14);
            mapper.AssertAreEqual("gameTime.frames", 0x2024AE2, [55], 55);
        }
        [TestMethod]
        public async Task Emerald_Deprecated_Pointers()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("pointers.dma1", 0x3005D8C, [124, 90, 2, 2], 33708668);
            mapper.AssertAreEqual("pointers.dma2", 0x3005D90, [208, 74, 2, 2], 33704656);
            mapper.AssertAreEqual("pointers.dma3", 0x3005D94, [132, 152, 2, 2], 33724548);
            mapper.AssertAreEqual("pointers.callback1", 0x30022C0, [241, 158, 3, 8], "Battle");
            mapper.AssertAreEqual("pointers.callback2", 0x30022C4, [33, 132, 3, 8], "Battle");
        }

        [TestMethod]
        public async Task Emerald_Deprecated_Misc()
        {
            await Load_GBA_PokemonEmeraldDeprecated(2);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("misc.rngValue1", 0x3005D80, [46, 204, 194, 234], -356332498);
            mapper.AssertAreEqual("misc.palette5", 0x2037724, [40, 61, 9, 41], null);
        }
        [TestMethod]
        public async Task FireRed_Deprecated_Player()
        {
            await Load_GBA_PokemonFireRedDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x20245B8, [187, 187, 188, 188, 189, 189, 255, 255], "AABBCC");
            mapper.AssertAreEqual("player.gender", 0x20245C0, [0], "Male");
            mapper.AssertAreEqual("player.teamCount", 0x20244E9, [86], 86);
            mapper.AssertAreEqual("player.team.0.personalityValue", 0x0, [104, 90, 111, 169], 2842647144);
            mapper.AssertAreEqual("player.team.0.checksum", 0x1C, [208, 83], 21456);
            mapper.AssertAreEqual("player.team.0.otID", 0x4, [21, 16, 192, 156], 2629832725);
            mapper.AssertAreEqual("player.team.0.nickname", 0x8, [200, 187, 199, 191, 198, 191, 205, 205, 255, 255], "NAMELESS");
            mapper.AssertAreEqual("player.team.0.speciesArray", 0x20, [7, 0], "{ pokedexNumber: 7, name: 'Squirtle' }");
            mapper.AssertAreEqual("player.team.0.species", 0x20, [7, 0], "Squirtle");
            mapper.AssertAreEqual("player.team.0.pokedexNumber", 0x20, [7, 0], "7");
            mapper.AssertAreEqual("player.team.0.level", 0x54, [13], 13);
            mapper.AssertAreEqual("player.team.0.expPoints", 0x24, [222, 5, 0, 0], 1502);
            mapper.AssertAreEqual("player.team.0.nature", 0x0, [104, 90, 111, 169], 19);
            mapper.AssertAreEqual("player.team.0.friendship", 0x29, [113], 113);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.0.hp", 0x56, [32, 0], 32);
            mapper.AssertAreEqual("player.team.0.maxHp", 0x58, [37, 0], 37);
            mapper.AssertAreEqual("player.team.0.attack", 0x5A, [20, 0], 20);
            mapper.AssertAreEqual("player.team.0.defense", 0x5C, [24, 0], 24);
            mapper.AssertAreEqual("player.team.0.speed", 0x5E, [16, 0], 16);
            mapper.AssertAreEqual("player.team.0.specialAttack", 0x60, [23, 0], 23);
            mapper.AssertAreEqual("player.team.0.specialDefense", 0x62, [22, 0], 22);
            mapper.AssertAreEqual("player.team.0.ivEggAbilityBlock", 0x48, [154, 218, 176, 59], 1001446042);
            mapper.AssertAreEqual("player.team.0.ivHp", 0x48, [154, 218, 176, 59], 26);
            mapper.AssertAreEqual("player.team.0.ivAttack", 0x48, [154, 218, 176, 59], 20);
            mapper.AssertAreEqual("player.team.0.ivDefense", 0x48, [154, 218, 176, 59], 22);
            mapper.AssertAreEqual("player.team.0.ivSpeed", 0x48, [154, 218, 176, 59], 1);
            mapper.AssertAreEqual("player.team.0.ivSpecialAttack", 0x48, [154, 218, 176, 59], 27);
            mapper.AssertAreEqual("player.team.0.ivSpecialDefense", 0x48, [154, 218, 176, 59], 29);
            mapper.AssertAreEqual("player.team.0.isEgg", 0x48, [154, 218, 176, 59], false);
            mapper.AssertAreEqual("player.team.0.ability", 0x48, [154, 218, 176, 59], false);
            mapper.AssertAreEqual("player.team.0.evHp", 0x38, [2], 2);
            mapper.AssertAreEqual("player.team.0.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.0.evDefense", 0x3A, [5], 5);
            mapper.AssertAreEqual("player.team.0.evSpeed", 0x3B, [11], 11);
            mapper.AssertAreEqual("player.team.0.evSpecialAttack", 0x3C, [1], 1);
            mapper.AssertAreEqual("player.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.0.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("player.team.0.move2", 0x2E, [55, 0], "WATER GUN");
            mapper.AssertAreEqual("player.team.0.move3", 0x30, [145, 0], "BUBBLE");
            mapper.AssertAreEqual("player.team.0.move4", 0x32, [110, 0], "WITHDRAW");
            mapper.AssertAreEqual("player.team.0.move1pp", 0x34, [34], 34);
            mapper.AssertAreEqual("player.team.0.move2pp", 0x35, [24], 24);
            mapper.AssertAreEqual("player.team.0.move3pp", 0x36, [27], 27);
            mapper.AssertAreEqual("player.team.0.move4pp", 0x37, [40], 40);
            mapper.AssertAreEqual("player.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("player.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("player.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("player.team.0.otName", 0x14, [187, 187, 188, 188, 189, 189, 255], "AABBCC");
            mapper.AssertAreEqual("player.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.0.pokerusStatus", 0x24, [222], 222);
            mapper.AssertAreEqual("player.team.0.metLocation", 0x25, [5], 5);
            mapper.AssertAreEqual("player.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.robbinsObedience", 0x2C, [33, 0, 55, 0], 3604513);
            mapper.AssertAreEqual("player.team.1.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.1.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.1.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.1.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.1.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.1.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.1.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.1.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.1.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("player.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("player.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("player.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("player.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("player.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("player.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("player.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("player.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("player.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("player.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("player.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("player.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("player.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.badge1", 0x20264D2, [0], false);
            mapper.AssertAreEqual("player.badges.badge2", 0x20264D2, [0], false);
            mapper.AssertAreEqual("player.badges.badge3", 0x20264D2, [0], false);
            mapper.AssertAreEqual("player.badges.badge4", 0x20264D2, [0], false);
            mapper.AssertAreEqual("player.badges.badge5", 0x20264D2, [0], false);
            mapper.AssertAreEqual("player.badges.badge6", 0x20264D2, [0], false);
            mapper.AssertAreEqual("player.badges.badge7", 0x20264D2, [0], false);
            mapper.AssertAreEqual("player.badges.badge8", 0x20264D2, [0], false);
            mapper.AssertAreEqual("player.vsSeeker.stepsUntilUse", 0x2025B94, [0], 0);
            mapper.AssertAreEqual("player.vsSeeker.stepsUntilCharged", 0x2025B95, [0], 0);
            mapper.AssertAreEqual("player.bag.quantityDecyptionKey", 0x20254D8, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.0.item", 0x202586C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.0.quantity", 0x202586E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.1.item", 0x2025870, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.1.quantity", 0x2025872, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.2.item", 0x2025874, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.2.quantity", 0x2025876, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.3.item", 0x2025878, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.3.quantity", 0x202587A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.4.item", 0x202587C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.4.quantity", 0x202587E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.5.item", 0x2025880, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.5.quantity", 0x2025882, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.6.item", 0x2025884, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.6.quantity", 0x2025886, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.7.item", 0x2025888, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.7.quantity", 0x202588A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.8.item", 0x202588C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.8.quantity", 0x202588E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.9.item", 0x2025890, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.9.quantity", 0x2025892, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.10.item", 0x2025894, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.10.quantity", 0x2025896, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.11.item", 0x2025898, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.11.quantity", 0x202589A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.12.item", 0x202589C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.12.quantity", 0x202589E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.13.item", 0x20258A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.13.quantity", 0x20258A2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.14.item", 0x20258A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.14.quantity", 0x20258A6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.15.item", 0x20258A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.15.quantity", 0x20258AA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.16.item", 0x20258AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.16.quantity", 0x20258AE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.17.item", 0x20258B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.17.quantity", 0x20258B2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.18.item", 0x20258B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.18.quantity", 0x20258B6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.19.item", 0x20258B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.19.quantity", 0x20258BA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.20.item", 0x20258BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.20.quantity", 0x20258BE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.21.item", 0x20258C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.21.quantity", 0x20258C2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.22.item", 0x20258C4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.22.quantity", 0x20258C6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.23.item", 0x20258C8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.23.quantity", 0x20258CA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.24.item", 0x20258CC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.24.quantity", 0x20258CE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.25.item", 0x20258D0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.25.quantity", 0x20258D2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.26.item", 0x20258D4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.26.quantity", 0x20258D6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.27.item", 0x20258D8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.27.quantity", 0x20258DA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.28.item", 0x20258DC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.28.quantity", 0x20258DE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.29.item", 0x20258E0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.29.quantity", 0x20258E2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.30.item", 0x20258E4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.30.quantity", 0x20258E6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.31.item", 0x20258E8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.31.quantity", 0x20258EA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.32.item", 0x20258EC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.32.quantity", 0x20258EE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.33.item", 0x20258F0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.33.quantity", 0x20258F2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.34.item", 0x20258F4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.34.quantity", 0x20258F6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.35.item", 0x20258F8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.35.quantity", 0x20258FA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.36.item", 0x20258FC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.36.quantity", 0x20258FE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.37.item", 0x2025900, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.37.quantity", 0x2025902, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.38.item", 0x2025904, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.38.quantity", 0x2025906, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.39.item", 0x2025908, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.39.quantity", 0x202590A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.40.item", 0x202590C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.40.quantity", 0x202590E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.items.41.item", 0x2025910, [0, 0], null);
            mapper.AssertAreEqual("player.bag.items.41.quantity", 0x2025912, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.0.item", 0x2025914, [110, 1], "TEACHY TV");
            mapper.AssertAreEqual("player.bag.keyItems.0.quantity", 0x2025916, [18, 129], 33042);
            mapper.AssertAreEqual("player.bag.keyItems.1.item", 0x2025918, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.1.quantity", 0x202591A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.2.item", 0x202591C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.2.quantity", 0x202591E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.3.item", 0x2025920, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.3.quantity", 0x2025922, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.4.item", 0x2025924, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.4.quantity", 0x2025926, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.5.item", 0x2025928, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.5.quantity", 0x202592A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.6.item", 0x202592C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.6.quantity", 0x202592E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.7.item", 0x2025930, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.7.quantity", 0x2025932, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.8.item", 0x2025934, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.8.quantity", 0x2025936, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.9.item", 0x2025938, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.9.quantity", 0x202593A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.10.item", 0x202593C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.10.quantity", 0x202593E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.11.item", 0x2025940, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.11.quantity", 0x2025942, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.12.item", 0x2025944, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.12.quantity", 0x2025946, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.13.item", 0x2025948, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.13.quantity", 0x202594A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.14.item", 0x202594C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.14.quantity", 0x202594E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.15.item", 0x2025950, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.15.quantity", 0x2025952, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.16.item", 0x2025954, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.16.quantity", 0x2025956, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.17.item", 0x2025958, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.17.quantity", 0x202595A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.18.item", 0x202595C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.18.quantity", 0x202595E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.19.item", 0x2025960, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.19.quantity", 0x2025962, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.20.item", 0x2025964, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.20.quantity", 0x2025966, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.21.item", 0x2025968, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.21.quantity", 0x202596A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.22.item", 0x202596C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.22.quantity", 0x202596E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.23.item", 0x2025970, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.23.quantity", 0x2025972, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.24.item", 0x2025974, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.24.quantity", 0x2025976, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.25.item", 0x2025978, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.25.quantity", 0x202597A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.26.item", 0x202597C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.26.quantity", 0x202597E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.27.item", 0x2025980, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.27.quantity", 0x2025982, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.28.item", 0x2025984, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.28.quantity", 0x2025986, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.keyItems.29.item", 0x2025988, [0, 0], null);
            mapper.AssertAreEqual("player.bag.keyItems.29.quantity", 0x202598A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.0.item", 0x202598C, [4, 0], "POKE BALL");
            mapper.AssertAreEqual("player.bag.pokeBalls.0.quantity", 0x202598E, [22, 129], 33046);
            mapper.AssertAreEqual("player.bag.pokeBalls.1.item", 0x2025990, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.1.quantity", 0x2025992, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.2.item", 0x2025994, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.2.quantity", 0x2025996, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.3.item", 0x2025998, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.3.quantity", 0x202599A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.4.item", 0x202599C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.4.quantity", 0x202599E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.5.item", 0x20259A0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.5.quantity", 0x20259A2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.6.item", 0x20259A4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.6.quantity", 0x20259A6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.7.item", 0x20259A8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.7.quantity", 0x20259AA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.8.item", 0x20259AC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.8.quantity", 0x20259AE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.9.item", 0x20259B0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.9.quantity", 0x20259B2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.10.item", 0x20259B4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.10.quantity", 0x20259B6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.11.item", 0x20259B8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.11.quantity", 0x20259BA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.pokeBalls.12.item", 0x20259BC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.pokeBalls.12.quantity", 0x20259BE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.0.item", 0x20259C0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.0.quantity", 0x20259C2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.1.item", 0x20259C4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.1.quantity", 0x20259C6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.2.item", 0x20259C8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.2.quantity", 0x20259CA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.3.item", 0x20259CC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.3.quantity", 0x20259CE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.4.item", 0x20259D0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.4.quantity", 0x20259D2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.5.item", 0x20259D4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.5.quantity", 0x20259D6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.6.item", 0x20259D8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.6.quantity", 0x20259DA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.7.item", 0x20259DC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.7.quantity", 0x20259DE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.8.item", 0x20259E0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.8.quantity", 0x20259E2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.9.item", 0x20259E4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.9.quantity", 0x20259E6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.10.item", 0x20259E8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.10.quantity", 0x20259EA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.11.item", 0x20259EC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.11.quantity", 0x20259EE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.12.item", 0x20259F0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.12.quantity", 0x20259F2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.13.item", 0x20259F4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.13.quantity", 0x20259F6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.14.item", 0x20259F8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.14.quantity", 0x20259FA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.15.item", 0x20259FC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.15.quantity", 0x20259FE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.16.item", 0x2025A00, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.16.quantity", 0x2025A02, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.17.item", 0x2025A04, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.17.quantity", 0x2025A06, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.18.item", 0x2025A08, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.18.quantity", 0x2025A0A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.19.item", 0x2025A0C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.19.quantity", 0x2025A0E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.20.item", 0x2025A10, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.20.quantity", 0x2025A12, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.21.item", 0x2025A14, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.21.quantity", 0x2025A16, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.22.item", 0x2025A18, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.22.quantity", 0x2025A1A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.23.item", 0x2025A1C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.23.quantity", 0x2025A1E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.24.item", 0x2025A20, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.24.quantity", 0x2025A22, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.25.item", 0x2025A24, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.25.quantity", 0x2025A26, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.26.item", 0x2025A28, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.26.quantity", 0x2025A2A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.27.item", 0x2025A2C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.27.quantity", 0x2025A2E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.28.item", 0x2025A30, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.28.quantity", 0x2025A32, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.29.item", 0x2025A34, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.29.quantity", 0x2025A36, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.30.item", 0x2025A38, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.30.quantity", 0x2025A3A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.31.item", 0x2025A3C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.31.quantity", 0x2025A3E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.32.item", 0x2025A40, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.32.quantity", 0x2025A42, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.33.item", 0x2025A44, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.33.quantity", 0x2025A46, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.34.item", 0x2025A48, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.34.quantity", 0x2025A4A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.35.item", 0x2025A4C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.35.quantity", 0x2025A4E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.36.item", 0x2025A50, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.36.quantity", 0x2025A52, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.37.item", 0x2025A54, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.37.quantity", 0x2025A56, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.38.item", 0x2025A58, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.38.quantity", 0x2025A5A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.39.item", 0x2025A5C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.39.quantity", 0x2025A5E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.40.item", 0x2025A60, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.40.quantity", 0x2025A62, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.41.item", 0x2025A64, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.41.quantity", 0x2025A66, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.42.item", 0x2025A68, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.42.quantity", 0x2025A6A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.43.item", 0x2025A6C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.43.quantity", 0x2025A6E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.44.item", 0x2025A70, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.44.quantity", 0x2025A72, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.45.item", 0x2025A74, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.45.quantity", 0x2025A76, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.46.item", 0x2025A78, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.46.quantity", 0x2025A7A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.47.item", 0x2025A7C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.47.quantity", 0x2025A7E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.48.item", 0x2025A80, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.48.quantity", 0x2025A82, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.49.item", 0x2025A84, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.49.quantity", 0x2025A86, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.50.item", 0x2025A88, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.50.quantity", 0x2025A8A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.51.item", 0x2025A8C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.51.quantity", 0x2025A8E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.52.item", 0x2025A90, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.52.quantity", 0x2025A92, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.53.item", 0x2025A94, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.53.quantity", 0x2025A96, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.54.item", 0x2025A98, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.54.quantity", 0x2025A9A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.55.item", 0x2025A9C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.55.quantity", 0x2025A9E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.56.item", 0x2025AA0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.56.quantity", 0x2025AA2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.tmhm.57.item", 0x2025AA4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.tmhm.57.quantity", 0x2025AA6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.0.item", 0x2025AA8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.0.quantity", 0x2025AAA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.1.item", 0x2025AAC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.1.quantity", 0x2025AAE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.2.item", 0x2025AB0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.2.quantity", 0x2025AB2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.3.item", 0x2025AB4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.3.quantity", 0x2025AB6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.4.item", 0x2025AB8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.4.quantity", 0x2025ABA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.5.item", 0x2025ABC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.5.quantity", 0x2025ABE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.6.item", 0x2025AC0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.6.quantity", 0x2025AC2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.7.item", 0x2025AC4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.7.quantity", 0x2025AC6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.8.item", 0x2025AC8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.8.quantity", 0x2025ACA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.9.item", 0x2025ACC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.9.quantity", 0x2025ACE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.10.item", 0x2025AD0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.10.quantity", 0x2025AD2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.11.item", 0x2025AD4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.11.quantity", 0x2025AD6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.12.item", 0x2025AD8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.12.quantity", 0x2025ADA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.13.item", 0x2025ADC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.13.quantity", 0x2025ADE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.14.item", 0x2025AE0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.14.quantity", 0x2025AE2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.15.item", 0x2025AE4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.15.quantity", 0x2025AE6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.16.item", 0x2025AE8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.16.quantity", 0x2025AEA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.17.item", 0x2025AEC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.17.quantity", 0x2025AEE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.18.item", 0x2025AF0, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.18.quantity", 0x2025AF2, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.19.item", 0x2025AF4, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.19.quantity", 0x2025AF6, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.20.item", 0x2025AF8, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.20.quantity", 0x2025AFA, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.21.item", 0x2025AFC, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.21.quantity", 0x2025AFE, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.22.item", 0x2025B00, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.22.quantity", 0x2025B02, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.23.item", 0x2025B04, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.23.quantity", 0x2025B06, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.24.item", 0x2025B08, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.24.quantity", 0x2025B0A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.25.item", 0x2025B0C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.25.quantity", 0x2025B0E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.26.item", 0x2025B10, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.26.quantity", 0x2025B12, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.27.item", 0x2025B14, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.27.quantity", 0x2025B16, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.28.item", 0x2025B18, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.28.quantity", 0x2025B1A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.29.item", 0x2025B1C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.29.quantity", 0x2025B1E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.30.item", 0x2025B20, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.30.quantity", 0x2025B22, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.31.item", 0x2025B24, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.31.quantity", 0x2025B26, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.32.item", 0x2025B28, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.32.quantity", 0x2025B2A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.33.item", 0x2025B2C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.33.quantity", 0x2025B2E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.34.item", 0x2025B30, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.34.quantity", 0x2025B32, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.35.item", 0x2025B34, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.35.quantity", 0x2025B36, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.36.item", 0x2025B38, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.36.quantity", 0x2025B3A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.37.item", 0x2025B3C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.37.quantity", 0x2025B3E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.38.item", 0x2025B40, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.38.quantity", 0x2025B42, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.39.item", 0x2025B44, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.39.quantity", 0x2025B46, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.40.item", 0x2025B48, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.40.quantity", 0x2025B4A, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.41.item", 0x2025B4C, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.41.quantity", 0x2025B4E, [19, 129], 33043);
            mapper.AssertAreEqual("player.bag.berries.42.item", 0x2025B50, [0, 0], null);
            mapper.AssertAreEqual("player.bag.berries.42.quantity", 0x2025B52, [19, 129], 33043);
            mapper.AssertAreEqual("player.pcItems.0.item", 0x20257F4, [13, 0], "POTION");
            mapper.AssertAreEqual("player.pcItems.0.quantity", 0x20257F6, [1, 0], 1);
            mapper.AssertAreEqual("player.pcItems.1.item", 0x20257F8, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.1.quantity", 0x20257FA, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.2.item", 0x20257FC, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.2.quantity", 0x20257FE, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.3.item", 0x2025800, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.3.quantity", 0x2025802, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.4.item", 0x2025804, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.4.quantity", 0x2025806, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.5.item", 0x2025808, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.5.quantity", 0x202580A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.6.item", 0x202580C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.6.quantity", 0x202580E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.7.item", 0x2025810, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.7.quantity", 0x2025812, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.8.item", 0x2025814, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.8.quantity", 0x2025816, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.9.item", 0x2025818, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.9.quantity", 0x202581A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.10.item", 0x202581C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.10.quantity", 0x202581E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.11.item", 0x2025820, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.11.quantity", 0x2025822, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.12.item", 0x2025824, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.12.quantity", 0x2025826, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.13.item", 0x2025828, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.13.quantity", 0x202582A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.14.item", 0x202582C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.14.quantity", 0x202582E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.15.item", 0x2025830, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.15.quantity", 0x2025832, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.16.item", 0x2025834, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.16.quantity", 0x2025836, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.17.item", 0x2025838, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.17.quantity", 0x202583A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.18.item", 0x202583C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.18.quantity", 0x202583E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.19.item", 0x2025840, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.19.quantity", 0x2025842, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.20.item", 0x2025844, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.20.quantity", 0x2025846, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.21.item", 0x2025848, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.21.quantity", 0x202584A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.22.item", 0x202584C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.22.quantity", 0x202584E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.23.item", 0x2025850, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.23.quantity", 0x2025852, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.24.item", 0x2025854, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.24.quantity", 0x2025856, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.25.item", 0x2025858, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.25.quantity", 0x202585A, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.26.item", 0x202585C, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.26.quantity", 0x202585E, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.27.item", 0x2025860, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.27.quantity", 0x2025862, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.28.item", 0x2025864, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.28.quantity", 0x2025866, [0, 0], 0);
            mapper.AssertAreEqual("player.pcItems.29.item", 0x2025868, [0, 0], null);
            mapper.AssertAreEqual("player.pcItems.29.quantity", 0x202586A, [0, 0], 0);
        }
        [TestMethod]
        public async Task FireRed_Deprecated_Overworld()
        {
            await Load_GBA_PokemonFireRedDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("overworld.mapName", 0x2031DBC, [15, 3], "ROUTE2 - VIRIDIAN_FOREST_NORTH_ENTRANCE");
        }
        [TestMethod]
        public async Task FireRed_Deprecated_Battle()
        {
            await Load_GBA_PokemonFireRedDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("battle.outcome", 0x2023E8A, [0], null);
            mapper.AssertAreEqual("battle.type.double", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.is_battle", 0x2022B4C, [12, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.type.trainer", 0x2022B4C, [12, 0, 0, 0], true);
            mapper.AssertAreEqual("battle.type.first_battle", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.link_in_battle", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.multi", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.safari", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.battle_tower", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.old_man_tutorial", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.roamer", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.eReader_trainer", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.kyogre_groudon", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost_unveiled", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.regi", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.ghost", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.pokedude", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.wild_scripted", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.legenadry_frlg", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.type.trainer_tower", 0x2022B4C, [12, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.opponent", 0x20386AE, [158, 1], "LEADER_BROCK");
            mapper.AssertAreEqual("battle.trainer.opponentId", 0x20386AE, [158, 1], 414);
            mapper.AssertAreEqual("battle.trainer.totalPokemon", 0x202402A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.personalityValue", 0x0, [136, 38, 9, 0], 599688);
            mapper.AssertAreEqual("battle.trainer.team.0.checksum", 0x1C, [214, 238], 61142);
            mapper.AssertAreEqual("battle.trainer.team.0.otID", 0x4, [105, 12, 84, 186], 3126070377);
            mapper.AssertAreEqual("battle.trainer.team.0.nickname", 0x8, [193, 191, 201, 190, 207, 190, 191, 255, 1, 0], "GEODUDE");
            mapper.AssertAreEqual("battle.trainer.team.0.speciesArray", 0x20, [74, 0], "{ pokedexNumber: 74, name: 'Geodude' }");
            mapper.AssertAreEqual("battle.trainer.team.0.species", 0x20, [74, 0], "Geodude");
            mapper.AssertAreEqual("battle.trainer.team.0.pokedexNumber", 0x20, [74, 0], "74");
            mapper.AssertAreEqual("battle.trainer.team.0.level", 0x54, [12], 12);
            mapper.AssertAreEqual("battle.trainer.team.0.expPoints", 0x24, [205, 3, 0, 0], 973);
            mapper.AssertAreEqual("battle.trainer.team.0.nature", 0x0, [136, 38, 9, 0], 13);
            mapper.AssertAreEqual("battle.trainer.team.0.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.0.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.maxHp", 0x58, [31, 0], 31);
            mapper.AssertAreEqual("battle.trainer.team.0.attack", 0x5A, [24, 0], 24);
            mapper.AssertAreEqual("battle.trainer.team.0.defense", 0x5C, [29, 0], 29);
            mapper.AssertAreEqual("battle.trainer.team.0.speed", 0x5E, [9, 0], 9);
            mapper.AssertAreEqual("battle.trainer.team.0.specialAttack", 0x60, [10, 0], 10);
            mapper.AssertAreEqual("battle.trainer.team.0.specialDefense", 0x62, [12, 0], 12);
            mapper.AssertAreEqual("battle.trainer.team.0.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.trainer.team.0.move2", 0x2E, [111, 0], "DEFENSE CURL");
            mapper.AssertAreEqual("battle.trainer.team.0.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.0.move1pp", 0x34, [35], 35);
            mapper.AssertAreEqual("battle.trainer.team.0.move2pp", 0x35, [40], 40);
            mapper.AssertAreEqual("battle.trainer.team.0.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.trainer.team.0.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("battle.trainer.team.0.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.0.otName", 0x14, [187, 187, 188, 188, 189, 189, 255], "AABBCC");
            mapper.AssertAreEqual("battle.trainer.team.0.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.0.pokerusStatus", 0x24, [205], 205);
            mapper.AssertAreEqual("battle.trainer.team.0.metLocation", 0x25, [3], 3);
            mapper.AssertAreEqual("battle.trainer.team.0.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.0.robbinsObedience", 0x2C, [33, 0, 111, 0], 7274529);
            mapper.AssertAreEqual("battle.trainer.team.1.personalityValue", 0x0, [136, 31, 16, 0], 1056648);
            mapper.AssertAreEqual("battle.trainer.team.1.checksum", 0x1C, [196, 226], 58052);
            mapper.AssertAreEqual("battle.trainer.team.1.otID", 0x4, [146, 197, 16, 169], 2836448658);
            mapper.AssertAreEqual("battle.trainer.team.1.nickname", 0x8, [201, 200, 195, 210, 255, 0, 0, 0, 80, 95], "ONIX");
            mapper.AssertAreEqual("battle.trainer.team.1.speciesArray", 0x20, [95, 0], "{ pokedexNumber: 95, name: 'Onix' }");
            mapper.AssertAreEqual("battle.trainer.team.1.species", 0x20, [95, 0], "Onix");
            mapper.AssertAreEqual("battle.trainer.team.1.pokedexNumber", 0x20, [95, 0], "95");
            mapper.AssertAreEqual("battle.trainer.team.1.level", 0x54, [14], 14);
            mapper.AssertAreEqual("battle.trainer.team.1.expPoints", 0x24, [184, 10, 0, 0], 2744);
            mapper.AssertAreEqual("battle.trainer.team.1.nature", 0x0, [136, 31, 16, 0], 23);
            mapper.AssertAreEqual("battle.trainer.team.1.friendship", 0x29, [70], 70);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.1.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.hp", 0x56, [33, 0], 33);
            mapper.AssertAreEqual("battle.trainer.team.1.maxHp", 0x58, [33, 0], 33);
            mapper.AssertAreEqual("battle.trainer.team.1.attack", 0x5A, [17, 0], 17);
            mapper.AssertAreEqual("battle.trainer.team.1.defense", 0x5C, [49, 0], 49);
            mapper.AssertAreEqual("battle.trainer.team.1.speed", 0x5E, [24, 0], 24);
            mapper.AssertAreEqual("battle.trainer.team.1.specialAttack", 0x60, [11, 0], 11);
            mapper.AssertAreEqual("battle.trainer.team.1.specialDefense", 0x62, [18, 0], 18);
            mapper.AssertAreEqual("battle.trainer.team.1.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1", 0x2C, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.trainer.team.1.move2", 0x2E, [20, 0], "BIND");
            mapper.AssertAreEqual("battle.trainer.team.1.move3", 0x30, [61, 1], "ROCK TOMB");
            mapper.AssertAreEqual("battle.trainer.team.1.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.1.move1pp", 0x34, [35], 35);
            mapper.AssertAreEqual("battle.trainer.team.1.move2pp", 0x35, [20], 20);
            mapper.AssertAreEqual("battle.trainer.team.1.move3pp", 0x36, [10], 10);
            mapper.AssertAreEqual("battle.trainer.team.1.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.language", 0x12, [2], "English");
            mapper.AssertAreEqual("battle.trainer.team.1.isBadEgg", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.1.hasSpecies", 0x13, [2], true);
            mapper.AssertAreEqual("battle.trainer.team.1.useEggName", 0x13, [2], false);
            mapper.AssertAreEqual("battle.trainer.team.1.otName", 0x14, [187, 187, 188, 188, 189, 189, 255], "AABBCC");
            mapper.AssertAreEqual("battle.trainer.team.1.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.1.pokerusStatus", 0x24, [184], 184);
            mapper.AssertAreEqual("battle.trainer.team.1.metLocation", 0x25, [10], 10);
            mapper.AssertAreEqual("battle.trainer.team.1.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.1.robbinsObedience", 0x2C, [33, 0, 20, 0], 1310753);
            mapper.AssertAreEqual("battle.trainer.team.2.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.2.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.2.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.2.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.2.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.2.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.2.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.3.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.3.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.3.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.3.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.3.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.3.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.4.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.4.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.4.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.4.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.4.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.4.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.personalityValue", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.checksum", 0x1C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.otID", 0x4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nickname", 0x8, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "          ");
            mapper.AssertAreEqual("battle.trainer.team.5.speciesArray", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.species", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.pokedexNumber", 0x20, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.level", 0x54, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.expPoints", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.nature", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.friendship", 0x29, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerus", 0x55, [255], 255);
            mapper.AssertAreEqual("battle.trainer.team.5.itemHeld", 0x22, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.statusCondition", 0x50, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.hp", 0x56, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.maxHp", 0x58, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.attack", 0x5A, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.defense", 0x5C, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.speed", 0x5E, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialAttack", 0x60, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.specialDefense", 0x62, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivEggAbilityBlock", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivHp", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpeed", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialAttack", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.ivSpecialDefense", 0x48, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.isEgg", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.ability", 0x48, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.evHp", 0x38, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evAttack", 0x39, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evDefense", 0x3A, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpeed", 0x3B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialAttack", 0x3C, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.evSpecialDefense", 0x3D, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move2", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move3", 0x30, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move4", 0x32, [0, 0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.move1pp", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2pp", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3pp", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4pp", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move1ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move2ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move3ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.move4ppUp", 0x5B, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.language", 0x12, [0], null);
            mapper.AssertAreEqual("battle.trainer.team.5.isBadEgg", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.hasSpecies", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.useEggName", 0x13, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.otName", 0x14, [0, 0, 0, 0, 0, 0, 0], "       ");
            mapper.AssertAreEqual("battle.trainer.team.5.markingCircle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingSquare", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingTriangle", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.markingHeart", 0x1B, [0], false);
            mapper.AssertAreEqual("battle.trainer.team.5.pokerusStatus", 0x24, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.metLocation", 0x25, [0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.originsInfo", 0x26, [0, 0], 0);
            mapper.AssertAreEqual("battle.trainer.team.5.robbinsObedience", 0x2C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.partyPos", 0x2023BCE, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.nickname", 0x2023C14, [200, 187, 199, 191, 198, 191, 205, 205, 255, 0, 0], "NAMELESS");
            mapper.AssertAreEqual("battle.yourPokemon.species", 0x2023BE4, [7, 0], "Squirtle");
            mapper.AssertAreEqual("battle.yourPokemon.pokedexNumber", 0x2023BE4, [7, 0], "7");
            mapper.AssertAreEqual("battle.yourPokemon.speciesArray", 0x2023BE4, [7, 0], "{ pokedexNumber: 7, name: 'Squirtle' }");
            mapper.AssertAreEqual("battle.yourPokemon.level", 0x2023C0E, [13], 13);
            mapper.AssertAreEqual("battle.yourPokemon.expPoints", 0x2023C28, [2, 5, 0, 0], 1282);
            mapper.AssertAreEqual("battle.yourPokemon.friendship", 0x2023C0F, [113], 113);
            mapper.AssertAreEqual("battle.yourPokemon.personalityValue", 0x2023C2C, [104, 90, 111, 169], 2842647144);
            mapper.AssertAreEqual("battle.yourPokemon.ability", 0x2023C04, [67], "TORRENT");
            mapper.AssertAreEqual("battle.yourPokemon.heldItem", 0x2023C12, [0, 0], null);
            mapper.AssertAreEqual("battle.yourPokemon.maxHp", 0x2023C10, [37, 0], 37);
            mapper.AssertAreEqual("battle.yourPokemon.hp", 0x2023C0C, [32, 0], 32);
            mapper.AssertAreEqual("battle.yourPokemon.attack", 0x2023BE6, [20, 0], 20);
            mapper.AssertAreEqual("battle.yourPokemon.defense", 0x2023BE8, [24, 0], 24);
            mapper.AssertAreEqual("battle.yourPokemon.speed", 0x2023BEA, [16, 0], 16);
            mapper.AssertAreEqual("battle.yourPokemon.specialAttack", 0x2023BEC, [23, 0], 23);
            mapper.AssertAreEqual("battle.yourPokemon.specialDefense", 0x2023BEE, [22, 0], 22);
            mapper.AssertAreEqual("battle.yourPokemon.ivEggAbilityBlock", 0x2023BF8, [154, 218, 176, 59], 1001446042);
            mapper.AssertAreEqual("battle.yourPokemon.ivHp", 0x2023BF8, [154, 218, 176, 59], 26);
            mapper.AssertAreEqual("battle.yourPokemon.ivAttack", 0x2023BF8, [154, 218, 176, 59], 20);
            mapper.AssertAreEqual("battle.yourPokemon.ivDefense", 0x2023BF8, [154, 218, 176, 59], 22);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpeed", 0x2023BF8, [154, 218, 176, 59], 1);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialAttack", 0x2023BF8, [154, 218, 176, 59], 27);
            mapper.AssertAreEqual("battle.yourPokemon.ivSpecialDefense", 0x2023BF8, [154, 218, 176, 59], 29);
            mapper.AssertAreEqual("battle.yourPokemon.move1", 0x2023BF0, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.yourPokemon.move2", 0x2023BF2, [55, 0], "WATER GUN");
            mapper.AssertAreEqual("battle.yourPokemon.move3", 0x2023BF4, [145, 0], "BUBBLE");
            mapper.AssertAreEqual("battle.yourPokemon.move4", 0x2023BF6, [110, 0], "WITHDRAW");
            mapper.AssertAreEqual("battle.yourPokemon.move1pp", 0x2023C08, [34], 34);
            mapper.AssertAreEqual("battle.yourPokemon.move2pp", 0x2023C09, [24], 24);
            mapper.AssertAreEqual("battle.yourPokemon.move3pp", 0x2023C0A, [27], 27);
            mapper.AssertAreEqual("battle.yourPokemon.move4pp", 0x2023C0B, [40], 40);
            mapper.AssertAreEqual("battle.yourPokemon.move1ppUp", 0x2023C1F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move2ppUp", 0x2023C1F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move3ppUp", 0x2023C1F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.move4ppUp", 0x2023C1F, [0], 0);
            mapper.AssertAreEqual("battle.yourPokemon.modStageAttack", 0x2023BFD, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageDefense", 0x2023BFE, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpeed", 0x2023BFF, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialAttack", 0x2023C00, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageSpecialDefense", 0x2023C01, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageAccuracy", 0x2023C02, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.modStageEvasion", 0x2023C03, [6], "0");
            mapper.AssertAreEqual("battle.yourPokemon.focusEnergy", 0x2023C36, [0], false);
            mapper.AssertAreEqual("battle.yourPokemon.type1", 0x2023C05, [11], "Water");
            mapper.AssertAreEqual("battle.yourPokemon.type2", 0x2023C06, [11], "Water");
            mapper.AssertAreEqual("battle.yourPokemon.status1", 0x2023C30, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.status2", 0x2023C30, [0], null);
            mapper.AssertAreEqual("battle.yourPokemon.otName", 0x2023C20, [187, 187, 188, 188, 189, 189, 255, 255], "AABBCC");
            mapper.AssertAreEqual("battle.yourSecondPokemon.partyPos", 0x2023BD2, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.nickname", 0x2023CC4, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.yourSecondPokemon.species", 0x2023C94, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.pokedexNumber", 0x2023C94, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.speciesArray", 0x2023C94, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.level", 0x2023CBE, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.expPoints", 0x2023CD8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.friendship", 0x2023CBF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.personalityValue", 0x2023CDC, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ability", 0x2023CB4, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.heldItem", 0x2023CC2, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.maxHp", 0x2023CC0, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.hp", 0x2023CBC, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.attack", 0x2023C96, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.defense", 0x2023C98, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.speed", 0x2023C9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialAttack", 0x2023C9C, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.specialDefense", 0x2023C9E, [0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivEggAbilityBlock", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivHp", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivAttack", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivDefense", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpeed", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialAttack", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.ivSpecialDefense", 0x2023CA8, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1", 0x2023CA0, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2", 0x2023CA2, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3", 0x2023CA4, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4", 0x2023CA6, [0, 0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1pp", 0x2023CB8, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2pp", 0x2023CB9, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3pp", 0x2023CBA, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4pp", 0x2023CBB, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move1ppUp", 0x2023CCF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move2ppUp", 0x2023CCF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move3ppUp", 0x2023CCF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.move4ppUp", 0x2023CCF, [0], 0);
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAttack", 0x2023CAD, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageDefense", 0x2023CAE, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpeed", 0x2023CAF, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialAttack", 0x2023CB0, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageSpecialDefense", 0x2023CB1, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageAccuracy", 0x2023CB2, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.modStageEvasion", 0x2023CB3, [0], "-6");
            mapper.AssertAreEqual("battle.yourSecondPokemon.focusEnergy", 0x2023CE6, [0], false);
            mapper.AssertAreEqual("battle.yourSecondPokemon.type1", 0x2023CB5, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.type2", 0x2023CB6, [0], "Normal");
            mapper.AssertAreEqual("battle.yourSecondPokemon.status1", 0x2023CE0, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.status2", 0x2023CE0, [0], null);
            mapper.AssertAreEqual("battle.yourSecondPokemon.otName", 0x2023CD0, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.enemyPokemon.partyPos", 0x2023BD0, [1, 0], 1);
            mapper.AssertAreEqual("battle.enemyPokemon.nickname", 0x2023C6C, [201, 200, 195, 210, 255, 0, 0, 0, 1, 0, 0], "ONIX");
            mapper.AssertAreEqual("battle.enemyPokemon.species", 0x2023C3C, [95, 0], "Onix");
            mapper.AssertAreEqual("battle.enemyPokemon.pokedexNumber", 0x2023C3C, [95, 0], "95");
            mapper.AssertAreEqual("battle.enemyPokemon.speciesArray", 0x2023C3C, [95, 0], "{ pokedexNumber: 95, name: 'Onix' }");
            mapper.AssertAreEqual("battle.enemyPokemon.level", 0x2023C66, [14], 14);
            mapper.AssertAreEqual("battle.enemyPokemon.expPoints", 0x2023C80, [184, 10, 0, 0], 2744);
            mapper.AssertAreEqual("battle.enemyPokemon.friendship", 0x2023C67, [70], 70);
            mapper.AssertAreEqual("battle.enemyPokemon.personalityValue", 0x2023C84, [136, 31, 16, 0], 1056648);
            mapper.AssertAreEqual("battle.enemyPokemon.ability", 0x2023C5C, [69], "ROCK HEAD");
            mapper.AssertAreEqual("battle.enemyPokemon.heldItem", 0x2023C6A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.maxHp", 0x2023C68, [33, 0], 33);
            mapper.AssertAreEqual("battle.enemyPokemon.hp", 0x2023C64, [33, 0], 33);
            mapper.AssertAreEqual("battle.enemyPokemon.attack", 0x2023C3E, [17, 0], 17);
            mapper.AssertAreEqual("battle.enemyPokemon.defense", 0x2023C40, [49, 0], 49);
            mapper.AssertAreEqual("battle.enemyPokemon.speed", 0x2023C42, [24, 0], 24);
            mapper.AssertAreEqual("battle.enemyPokemon.specialAttack", 0x2023C44, [11, 0], 11);
            mapper.AssertAreEqual("battle.enemyPokemon.specialDefense", 0x2023C46, [18, 0], 18);
            mapper.AssertAreEqual("battle.enemyPokemon.ivEggAbilityBlock", 0x2023C50, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivHp", 0x2023C50, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivAttack", 0x2023C50, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivDefense", 0x2023C50, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpeed", 0x2023C50, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialAttack", 0x2023C50, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.ivSpecialDefense", 0x2023C50, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1", 0x2023C48, [33, 0], "TACKLE");
            mapper.AssertAreEqual("battle.enemyPokemon.move2", 0x2023C4A, [20, 0], "BIND");
            mapper.AssertAreEqual("battle.enemyPokemon.move3", 0x2023C4C, [61, 1], "ROCK TOMB");
            mapper.AssertAreEqual("battle.enemyPokemon.move4", 0x2023C4E, [0, 0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.move1pp", 0x2023C60, [35], 35);
            mapper.AssertAreEqual("battle.enemyPokemon.move2pp", 0x2023C61, [20], 20);
            mapper.AssertAreEqual("battle.enemyPokemon.move3pp", 0x2023C62, [10], 10);
            mapper.AssertAreEqual("battle.enemyPokemon.move4pp", 0x2023C63, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move1ppUp", 0x2023C77, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move2ppUp", 0x2023C77, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move3ppUp", 0x2023C77, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.move4ppUp", 0x2023C77, [0], 0);
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAttack", 0x2023C55, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageDefense", 0x2023C56, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpeed", 0x2023C57, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialAttack", 0x2023C58, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageSpecialDefense", 0x2023C59, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageAccuracy", 0x2023C5A, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.modStageEvasion", 0x2023C5B, [6], "0");
            mapper.AssertAreEqual("battle.enemyPokemon.focusEnergy", 0x2023C8E, [0], false);
            mapper.AssertAreEqual("battle.enemyPokemon.type1", 0x2023C5D, [5], "Rock");
            mapper.AssertAreEqual("battle.enemyPokemon.type2", 0x2023C5E, [4], "Ground");
            mapper.AssertAreEqual("battle.enemyPokemon.status1", 0x2023C88, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.status2", 0x2023C88, [0], null);
            mapper.AssertAreEqual("battle.enemyPokemon.otName", 0x2023C78, [187, 187, 188, 188, 189, 189, 255, 255], "AABBCC");
            mapper.AssertAreEqual("battle.enemySecondPokemon.partyPos", 0x2023BD4, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.nickname", 0x2023D1C, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "           ");
            mapper.AssertAreEqual("battle.enemySecondPokemon.species", 0x2023CEC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.pokedexNumber", 0x2023CEC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.speciesArray", 0x2023CEC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.level", 0x2023D16, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.expPoints", 0x2023D30, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.friendship", 0x2023D17, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.personalityValue", 0x2023D34, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ability", 0x2023D0C, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.heldItem", 0x2023D1A, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.maxHp", 0x2023D18, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.hp", 0x2023D14, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.attack", 0x2023CEE, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.defense", 0x2023CF0, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.speed", 0x2023CF2, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialAttack", 0x2023CF4, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.specialDefense", 0x2023CF6, [0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivEggAbilityBlock", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivHp", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivAttack", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivDefense", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpeed", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialAttack", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.ivSpecialDefense", 0x2023D00, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1", 0x2023CF8, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2", 0x2023CFA, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3", 0x2023CFC, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4", 0x2023CFE, [0, 0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1pp", 0x2023D10, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2pp", 0x2023D11, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3pp", 0x2023D12, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4pp", 0x2023D13, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move1ppUp", 0x2023D27, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move2ppUp", 0x2023D27, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move3ppUp", 0x2023D27, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.move4ppUp", 0x2023D27, [0], 0);
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAttack", 0x2023D05, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageDefense", 0x2023D06, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpeed", 0x2023D07, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialAttack", 0x2023D08, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageSpecialDefense", 0x2023D09, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageAccuracy", 0x2023D0A, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.modStageEvasion", 0x2023D0B, [0], "-6");
            mapper.AssertAreEqual("battle.enemySecondPokemon.focusEnergy", 0x2023D3E, [0], false);
            mapper.AssertAreEqual("battle.enemySecondPokemon.type1", 0x2023D0D, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.type2", 0x2023D0E, [0], "Normal");
            mapper.AssertAreEqual("battle.enemySecondPokemon.status1", 0x2023D38, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.status2", 0x2023D38, [0], null);
            mapper.AssertAreEqual("battle.enemySecondPokemon.otName", 0x2023D28, [0, 0, 0, 0, 0, 0, 0, 0], "        ");
            mapper.AssertAreEqual("battle.field.player.statusSafeguard", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusReflect", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.statusLightScreen", 0x2023DDE, [0, 0], false);
            mapper.AssertAreEqual("battle.field.player.safeguardCount", 0x2023DEA, [0], 0);
            mapper.AssertAreEqual("battle.field.player.lightScreenCount", 0x2023DE6, [0], 0);
            mapper.AssertAreEqual("battle.field.player.reflectCount", 0x2023DE4, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.statusSafeguard", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusReflect", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.statusLightScreen", 0x2023DE0, [0, 0], false);
            mapper.AssertAreEqual("battle.field.enemy.safeguardCount", 0x2023DF5, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.lightScreenCount", 0x2023DF1, [0], 0);
            mapper.AssertAreEqual("battle.field.enemy.reflectCount", 0x2023DEF, [0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x2023F1C, [0], null);
            mapper.AssertAreEqual("battle.field.weatherCount", 0x2023F48, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleWeather", 0x2023F1C, [0], null);
            mapper.AssertAreEqual("battle.turnInfo.battleWeatherTurnCounter", 0x2023F48, [0], 0);
            mapper.AssertAreEqual("battle.turnInfo.battleOutcome", 0x2023E8A, [0], null);
            mapper.AssertAreEqual("battle.turnInfo.battleBackgroundTiles", 0x2024018, [132, 84, 0, 2], 33576068);
            mapper.AssertAreEqual("battle.turnInfo.battleBackgroundTilesBuffer", 0x202401C, [132, 85, 0, 2], 33576324);
            mapper.AssertAreEqual("battle.turnInfo.battleDialogue", 0x2023D44, [6], null);
        }
        [TestMethod]
        public async Task FireRed_Deprecated_Events()
        {
            await Load_GBA_PokemonFireRedDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("events.trashCanPuzzle", 0x2026488, [0], false);
            mapper.AssertAreEqual("events.beatChampion", 0x20264D3, [0], false);
            mapper.AssertAreEqual("events.gameClear", 0x2026541, [3], false);
        }
        [TestMethod]
        public async Task FireRed_Deprecated_Options()
        {
            await Load_GBA_PokemonFireRedDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("options.battleAnim", 0x20245CD, [6], true);
            mapper.AssertAreEqual("options.battleStyle", 0x20245CD, [6], true);
            mapper.AssertAreEqual("options.sound", 0x20245CD, [6], false);
            mapper.AssertAreEqual("options.buttonMode", 0x20245CB, [0], 0);
        }
        [TestMethod]
        public async Task FireRed_Deprecated_GameTime()
        {
            await Load_GBA_PokemonFireRedDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("gameTime.hours", 0x20245C6, [0], 0);
            mapper.AssertAreEqual("gameTime.minutes", 0x20245C8, [23], 23);
            mapper.AssertAreEqual("gameTime.seconds", 0x20245C9, [51], 51);
            mapper.AssertAreEqual("gameTime.frames", 0x20245CA, [28], 28);
        }
        [TestMethod]
        public async Task FireRed_Deprecated_Pointers()
        {
            await Load_GBA_PokemonFireRedDeprecated(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("pointers.dma1", 0x3005008, [92, 85, 2, 2], 33707356);
            mapper.AssertAreEqual("pointers.dma2", 0x300500C, [184, 69, 2, 2], 33703352);
            mapper.AssertAreEqual("pointers.dma3", 0x3005010, [68, 147, 2, 2], 33723204);
            mapper.AssertAreEqual("pointers.callback1", 0x30030F0, [249, 35, 1, 8], "Battle");
            mapper.AssertAreEqual("pointers.callback2", 0x30030F4, [21, 17, 1, 8], "Battle");
        }
    }
}

