using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Numerics;
using System.Threading.Tasks;

namespace GameHook.IntegrationTests
{
    [TestClass]
    public class PokemonDiamond : BaseTest
    {
        [TestMethod]
        public async Task Diamond_Player()
        {
            await Load_NDS_PokemonDiamond();

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("player.name", 0x226D578, [46, 1, 43, 1, 65, 1, 56, 1, 255, 255, 0, 0, 0, 0], "DAWN");
            mapper.AssertAreEqual("player.gender", 0x226D590, [1], 1);
            mapper.AssertAreEqual("player.player_id", 0x226D588, [67, 103], 26435);
            mapper.AssertAreEqual("player.secret_id", 0x226D58A, [192, 104], 26816);
            mapper.AssertAreEqual("player.team_count", 0x226D5A8, [1], 1);
            mapper.AssertAreEqual("player.party_position", 0);
            mapper.AssertAreEqual("player.active_pokemon.species", null);
            mapper.AssertAreEqual("player.active_pokemon.dex_number", null);
            mapper.AssertAreEqual("player.active_pokemon.nickname", null);
            mapper.AssertAreEqual("player.active_pokemon.level", null);
            mapper.AssertAreEqual("player.active_pokemon.type_1", null);
            mapper.AssertAreEqual("player.active_pokemon.type_2", null);
            mapper.AssertAreEqual("player.active_pokemon.exp", null);
            mapper.AssertAreEqual("player.active_pokemon.ot_name", null);
            mapper.AssertAreEqual("player.active_pokemon.ot_id", null);
            mapper.AssertAreEqual("player.active_pokemon.ability", null);
            mapper.AssertAreEqual("player.active_pokemon.nature", null);
            mapper.AssertAreEqual("player.active_pokemon.held_item", null);
            mapper.AssertAreEqual("player.active_pokemon.friendship", null);
            mapper.AssertAreEqual("player.active_pokemon.pokerus", null);
            mapper.AssertAreEqual("player.active_pokemon.status_condition", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.move", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.0.pp_up", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.move", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.1.pp_up", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.move", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.2.pp_up", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.move", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp", null);
            mapper.AssertAreEqual("player.active_pokemon.moves.3.pp_up", null);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp", null);
            mapper.AssertAreEqual("player.active_pokemon.stats.hp_max", null);
            mapper.AssertAreEqual("player.active_pokemon.stats.attack", null);
            mapper.AssertAreEqual("player.active_pokemon.stats.defense", null);
            mapper.AssertAreEqual("player.active_pokemon.stats.speed", null);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_attack", null);
            mapper.AssertAreEqual("player.active_pokemon.stats.special_defense", null);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.attack", null);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.defense", null);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.speed", null);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_attack", null);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.special_defense", null);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.accuracy", null);
            mapper.AssertAreEqual("player.active_pokemon.modifiers.evasion", null);
            mapper.AssertAreEqual("player.active_pokemon.ivs.hp", null);
            mapper.AssertAreEqual("player.active_pokemon.ivs.attack", null);
            mapper.AssertAreEqual("player.active_pokemon.ivs.defense", null);
            mapper.AssertAreEqual("player.active_pokemon.ivs.speed", null);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special_attack", null);
            mapper.AssertAreEqual("player.active_pokemon.ivs.special_defense", null);
            mapper.AssertAreEqual("player.active_pokemon.evs.hp", null);
            mapper.AssertAreEqual("player.active_pokemon.evs.attack", null);
            mapper.AssertAreEqual("player.active_pokemon.evs.defense", null);
            mapper.AssertAreEqual("player.active_pokemon.evs.speed", null);
            mapper.AssertAreEqual("player.active_pokemon.evs.special_attack", null);
            mapper.AssertAreEqual("player.active_pokemon.evs.special_defense", null);
            mapper.AssertAreEqual("player.active_pokemon.flags.is_egg", null);
            mapper.AssertAreEqual("player.active_pokemon.flags.is_nicknamed", null);
            mapper.AssertAreEqual("player.active_pokemon.flags.skip_checksum_1", null);
            mapper.AssertAreEqual("player.active_pokemon.flags.skip_checksum_2", null);
            mapper.AssertAreEqual("player.active_pokemon.flags.is_bad_egg", null);
            mapper.AssertAreEqual("player.active_pokemon.internals.personality_value", null);
            mapper.AssertAreEqual("player.active_pokemon.internals.checksum", null);
            mapper.AssertAreEqual("player.active_pokemon.internals.secret_id", null);
            mapper.AssertAreEqual("player.active_pokemon.internals.language", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.markings", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.sheen", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.hgss_ball", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.performance", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_info.date_egg_received", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_info.date_met", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_info.egg_location", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_info.met_location", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_info.pokeball", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_info.met_level", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_info.female_ot_gender", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.met_info.encounter_type", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.contest.contest_cool", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.contest.contest_beauty", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.contest.contest_cute", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.contest.contest_smart", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.contest.contest_tough", null);
            mapper.AssertAreEqual("player.active_pokemon.misc.ribbons.ribbons_sinnoh_set_1", null);
            mapper.AssertAreEqual("player.team.0.species", 0x8, [134, 1], "Chimchar");
            mapper.AssertAreEqual("player.team.0.dex_number", 0x8, [134, 1], 390);
            mapper.AssertAreEqual("player.team.0.nickname", 0x48, [43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 39, 1, 255, 255, 120, 187], "AAAAABBB6");
            mapper.AssertAreEqual("player.team.0.level", 0x8C, [8], 8);
            mapper.AssertAreEqual("player.team.0.exp", 0x10, [59, 1, 0, 0], 315);
            mapper.AssertAreEqual("player.team.0.ot_name", 0x68, [46, 1, 43, 1, 65, 1, 56, 1, 255, 255, 0, 0, 0, 0, 0, 0], "DAWN");
            mapper.AssertAreEqual("player.team.0.ot_id", 0xC, [67, 103], 26435);
            mapper.AssertAreEqual("player.team.0.ability", 0x15, [66], "Blaze");
            mapper.AssertAreEqual("player.team.0.nature", 0x0, [141, 192, 226, 196], "Modest");
            mapper.AssertAreEqual("player.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.0.friendship", 0x14, [88], 88);
            mapper.AssertAreEqual("player.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.0.moves.0.move", 0x28, [10, 0], "Scratch");
            mapper.AssertAreEqual("player.team.0.moves.0.pp", 0x30, [30], 30);
            mapper.AssertAreEqual("player.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.1.move", 0x2A, [43, 0], "Leer");
            mapper.AssertAreEqual("player.team.0.moves.1.pp", 0x31, [30], 30);
            mapper.AssertAreEqual("player.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.2.move", 0x2C, [52, 0], "Ember");
            mapper.AssertAreEqual("player.team.0.moves.2.pp", 0x32, [21], 21);
            mapper.AssertAreEqual("player.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.0.moves.3.move", 0x2E, [241, 0], "Sunny Day");
            mapper.AssertAreEqual("player.team.0.moves.3.pp", 0x33, [5], 5);
            mapper.AssertAreEqual("player.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.0.stats.hp", 0x8E, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.stats.hp_max", 0x90, [25, 0], 25);
            mapper.AssertAreEqual("player.team.0.stats.attack", 0x92, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.stats.defense", 0x94, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.stats.speed", 0x96, [16, 0], 16);
            mapper.AssertAreEqual("player.team.0.stats.special_attack", 0x98, [15, 0], 15);
            mapper.AssertAreEqual("player.team.0.stats.special_defense", 0x9A, [13, 0], 13);
            mapper.AssertAreEqual("player.team.0.ivs.hp", 0x38, [68, 86, 90, 152], 4);
            mapper.AssertAreEqual("player.team.0.ivs.attack", 0x38, [68, 86, 90, 152], 18);
            mapper.AssertAreEqual("player.team.0.ivs.defense", 0x38, [68, 86, 90, 152], 21);
            mapper.AssertAreEqual("player.team.0.ivs.speed", 0x38, [68, 86, 90, 152], 20);
            mapper.AssertAreEqual("player.team.0.ivs.special_attack", 0x38, [68, 86, 90, 152], 5);
            mapper.AssertAreEqual("player.team.0.ivs.special_defense", 0x38, [68, 86, 90, 152], 12);
            mapper.AssertAreEqual("player.team.0.evs.hp", 0x18, [2], 2);
            mapper.AssertAreEqual("player.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.speed", 0x1B, [4], 4);
            mapper.AssertAreEqual("player.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.0.flags.is_egg", 0x38, [68, 86, 90, 152], false);
            mapper.AssertAreEqual("player.team.0.flags.is_nicknamed", 0x38, [68, 86, 90, 152], true);
            mapper.AssertAreEqual("player.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.0.internals.personality_value", 0x0, [141, 192, 226, 196], 3303194765);
            mapper.AssertAreEqual("player.team.0.internals.checksum", 0x6, [229, 30], 7909);
            mapper.AssertAreEqual("player.team.0.internals.secret_id", 0xE, [192, 104], 26816);
            mapper.AssertAreEqual("player.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("player.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("player.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.met_location", 0x80, [76, 0], 76);
            mapper.AssertAreEqual("player.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("player.team.0.misc.met_info.met_level", 0x84, [133], 0);
            mapper.AssertAreEqual("player.team.0.misc.met_info.female_ot_gender", 0x84, [133], true);
            mapper.AssertAreEqual("player.team.0.misc.met_info.encounter_type", 0x85, [12], 12);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.1.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("player.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.1.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.2.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("player.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.2.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.3.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("player.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.3.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.4.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("player.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.4.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("player.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("player.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("player.team.5.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("player.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("player.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("player.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("player.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("player.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("player.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("player.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("player.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("player.team.5.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("player.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("player.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("player.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("player.badges.0", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.1", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.2", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.3", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.4", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.5", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.6", 0x226D592, [0], false);
            mapper.AssertAreEqual("player.badges.7", 0x226D592, [0], false);
        }
        [TestMethod]
        public async Task Diamond_Bag()
        {
            await Load_NDS_PokemonDiamond();

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("bag.money", 0x226D58C, [224, 1, 0, 0], 480);
            mapper.AssertAreEqual("bag.coins", 0x226D598, [0], 0);
            mapper.AssertAreEqual("bag.items.0.item", 0x226DB38, [117, 0], "unknown");
            mapper.AssertAreEqual("bag.items.0.quantity", 0x226DB3A, [1, 0], 1);
            mapper.AssertAreEqual("bag.items.1.item", 0x226DB3C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.1.quantity", 0x226DB3E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.2.item", 0x226DB40, [0, 0], null);
            mapper.AssertAreEqual("bag.items.2.quantity", 0x226DB42, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.3.item", 0x226DB44, [0, 0], null);
            mapper.AssertAreEqual("bag.items.3.quantity", 0x226DB46, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.4.item", 0x226DB48, [0, 0], null);
            mapper.AssertAreEqual("bag.items.4.quantity", 0x226DB4A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.5.item", 0x226DB4C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.5.quantity", 0x226DB4E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.6.item", 0x226DB50, [0, 0], null);
            mapper.AssertAreEqual("bag.items.6.quantity", 0x226DB52, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.7.item", 0x226DB54, [0, 0], null);
            mapper.AssertAreEqual("bag.items.7.quantity", 0x226DB56, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.8.item", 0x226DB58, [0, 0], null);
            mapper.AssertAreEqual("bag.items.8.quantity", 0x226DB5A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.9.item", 0x226DB5C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.9.quantity", 0x226DB5E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.10.item", 0x226DB60, [0, 0], null);
            mapper.AssertAreEqual("bag.items.10.quantity", 0x226DB62, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.11.item", 0x226DB64, [0, 0], null);
            mapper.AssertAreEqual("bag.items.11.quantity", 0x226DB66, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.12.item", 0x226DB68, [0, 0], null);
            mapper.AssertAreEqual("bag.items.12.quantity", 0x226DB6A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.13.item", 0x226DB6C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.13.quantity", 0x226DB6E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.14.item", 0x226DB70, [0, 0], null);
            mapper.AssertAreEqual("bag.items.14.quantity", 0x226DB72, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.15.item", 0x226DB74, [0, 0], null);
            mapper.AssertAreEqual("bag.items.15.quantity", 0x226DB76, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.16.item", 0x226DB78, [0, 0], null);
            mapper.AssertAreEqual("bag.items.16.quantity", 0x226DB7A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.17.item", 0x226DB7C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.17.quantity", 0x226DB7E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.18.item", 0x226DB80, [0, 0], null);
            mapper.AssertAreEqual("bag.items.18.quantity", 0x226DB82, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.19.item", 0x226DB84, [0, 0], null);
            mapper.AssertAreEqual("bag.items.19.quantity", 0x226DB86, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.20.item", 0x226DB88, [0, 0], null);
            mapper.AssertAreEqual("bag.items.20.quantity", 0x226DB8A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.21.item", 0x226DB8C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.21.quantity", 0x226DB8E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.22.item", 0x226DB90, [0, 0], null);
            mapper.AssertAreEqual("bag.items.22.quantity", 0x226DB92, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.23.item", 0x226DB94, [0, 0], null);
            mapper.AssertAreEqual("bag.items.23.quantity", 0x226DB96, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.24.item", 0x226DB98, [0, 0], null);
            mapper.AssertAreEqual("bag.items.24.quantity", 0x226DB9A, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.25.item", 0x226DB9C, [0, 0], null);
            mapper.AssertAreEqual("bag.items.25.quantity", 0x226DB9E, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.26.item", 0x226DBA0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.26.quantity", 0x226DBA2, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.27.item", 0x226DBA4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.27.quantity", 0x226DBA6, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.28.item", 0x226DBA8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.28.quantity", 0x226DBAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.29.item", 0x226DBAC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.29.quantity", 0x226DBAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.30.item", 0x226DBB0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.30.quantity", 0x226DBB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.31.item", 0x226DBB4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.31.quantity", 0x226DBB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.32.item", 0x226DBB8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.32.quantity", 0x226DBBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.33.item", 0x226DBBC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.33.quantity", 0x226DBBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.34.item", 0x226DBC0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.34.quantity", 0x226DBC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.35.item", 0x226DBC4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.35.quantity", 0x226DBC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.36.item", 0x226DBC8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.36.quantity", 0x226DBCA, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.37.item", 0x226DBCC, [0, 0], null);
            mapper.AssertAreEqual("bag.items.37.quantity", 0x226DBCE, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.38.item", 0x226DBD0, [0, 0], null);
            mapper.AssertAreEqual("bag.items.38.quantity", 0x226DBD2, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.39.item", 0x226DBD4, [0, 0], null);
            mapper.AssertAreEqual("bag.items.39.quantity", 0x226DBD6, [0, 0], 0);
            mapper.AssertAreEqual("bag.items.40.item", 0x226DBD8, [0, 0], null);
            mapper.AssertAreEqual("bag.items.40.quantity", 0x226DBDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.0.item", 0x226E054, [18, 0], "Antidote");
            mapper.AssertAreEqual("bag.medicine.0.quantity", 0x226E056, [2, 0], 2);
            mapper.AssertAreEqual("bag.medicine.1.item", 0x226E058, [22, 0], "Paralyze Heal");
            mapper.AssertAreEqual("bag.medicine.1.quantity", 0x226E05A, [3, 0], 3);
            mapper.AssertAreEqual("bag.medicine.2.item", 0x226E05C, [17, 0], "Potion");
            mapper.AssertAreEqual("bag.medicine.2.quantity", 0x226E05E, [3, 0], 3);
            mapper.AssertAreEqual("bag.medicine.3.item", 0x226E060, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.3.quantity", 0x226E062, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.4.item", 0x226E064, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.4.quantity", 0x226E066, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.5.item", 0x226E068, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.5.quantity", 0x226E06A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.6.item", 0x226E06C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.6.quantity", 0x226E06E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.7.item", 0x226E070, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.7.quantity", 0x226E072, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.8.item", 0x226E074, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.8.quantity", 0x226E076, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.9.item", 0x226E078, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.9.quantity", 0x226E07A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.10.item", 0x226E07C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.10.quantity", 0x226E07E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.11.item", 0x226E080, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.11.quantity", 0x226E082, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.12.item", 0x226E084, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.12.quantity", 0x226E086, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.13.item", 0x226E088, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.13.quantity", 0x226E08A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.14.item", 0x226E08C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.14.quantity", 0x226E08E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.15.item", 0x226E090, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.15.quantity", 0x226E092, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.16.item", 0x226E094, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.16.quantity", 0x226E096, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.17.item", 0x226E098, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.17.quantity", 0x226E09A, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.18.item", 0x226E09C, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.18.quantity", 0x226E09E, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.19.item", 0x226E0A0, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.19.quantity", 0x226E0A2, [0, 0], 0);
            mapper.AssertAreEqual("bag.medicine.20.item", 0x226E0A4, [0, 0], null);
            mapper.AssertAreEqual("bag.medicine.20.quantity", 0x226E0A6, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.0.item", 0x226E1F4, [4, 0], "Pok\u00e9 Ball");
            mapper.AssertAreEqual("bag.balls.0.quantity", 0x226E1F6, [8, 0], 8);
            mapper.AssertAreEqual("bag.balls.1.item", 0x226E1F8, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.1.quantity", 0x226E1FA, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.2.item", 0x226E1FC, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.2.quantity", 0x226E1FE, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.3.item", 0x226E200, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.3.quantity", 0x226E202, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.4.item", 0x226E204, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.4.quantity", 0x226E206, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.5.item", 0x226E208, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.5.quantity", 0x226E20A, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.6.item", 0x226E20C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.6.quantity", 0x226E20E, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.7.item", 0x226E210, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.7.quantity", 0x226E212, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.8.item", 0x226E214, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.8.quantity", 0x226E216, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.9.item", 0x226E218, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.9.quantity", 0x226E21A, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.10.item", 0x226E21C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.10.quantity", 0x226E21E, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.11.item", 0x226E220, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.11.quantity", 0x226E222, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.12.item", 0x226E224, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.12.quantity", 0x226E226, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.13.item", 0x226E228, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.13.quantity", 0x226E22A, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.14.item", 0x226E22C, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.14.quantity", 0x226E22E, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.15.item", 0x226E230, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.15.quantity", 0x226E232, [0, 0], 0);
            mapper.AssertAreEqual("bag.balls.16.item", 0x226E234, [0, 0], null);
            mapper.AssertAreEqual("bag.balls.16.quantity", 0x226E236, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.0.item", 0x226DE94, [1, 0], "Master Ball");
            mapper.AssertAreEqual("bag.tmhm.0.quantity", 0x226DE96, [1, 0], 1);
            mapper.AssertAreEqual("bag.tmhm.1.item", 0x226DE98, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.1.quantity", 0x226DE9A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.2.item", 0x226DE9C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.2.quantity", 0x226DE9E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.3.item", 0x226DEA0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.3.quantity", 0x226DEA2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.4.item", 0x226DEA4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.4.quantity", 0x226DEA6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.5.item", 0x226DEA8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.5.quantity", 0x226DEAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.6.item", 0x226DEAC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.6.quantity", 0x226DEAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.7.item", 0x226DEB0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.7.quantity", 0x226DEB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.8.item", 0x226DEB4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.8.quantity", 0x226DEB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.9.item", 0x226DEB8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.9.quantity", 0x226DEBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.10.item", 0x226DEBC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.10.quantity", 0x226DEBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.11.item", 0x226DEC0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.11.quantity", 0x226DEC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.12.item", 0x226DEC4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.12.quantity", 0x226DEC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.13.item", 0x226DEC8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.13.quantity", 0x226DECA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.14.item", 0x226DECC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.14.quantity", 0x226DECE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.15.item", 0x226DED0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.15.quantity", 0x226DED2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.16.item", 0x226DED4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.16.quantity", 0x226DED6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.17.item", 0x226DED8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.17.quantity", 0x226DEDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.18.item", 0x226DEDC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.18.quantity", 0x226DEDE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.19.item", 0x226DEE0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.19.quantity", 0x226DEE2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.20.item", 0x226DEE4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.20.quantity", 0x226DEE6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.21.item", 0x226DEE8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.21.quantity", 0x226DEEA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.22.item", 0x226DEEC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.22.quantity", 0x226DEEE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.23.item", 0x226DEF0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.23.quantity", 0x226DEF2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.24.item", 0x226DEF4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.24.quantity", 0x226DEF6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.25.item", 0x226DEF8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.25.quantity", 0x226DEFA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.26.item", 0x226DEFC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.26.quantity", 0x226DEFE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.27.item", 0x226DF00, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.27.quantity", 0x226DF02, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.28.item", 0x226DF04, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.28.quantity", 0x226DF06, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.29.item", 0x226DF08, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.29.quantity", 0x226DF0A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.30.item", 0x226DF0C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.30.quantity", 0x226DF0E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.31.item", 0x226DF10, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.31.quantity", 0x226DF12, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.32.item", 0x226DF14, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.32.quantity", 0x226DF16, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.33.item", 0x226DF18, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.33.quantity", 0x226DF1A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.34.item", 0x226DF1C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.34.quantity", 0x226DF1E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.35.item", 0x226DF20, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.35.quantity", 0x226DF22, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.36.item", 0x226DF24, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.36.quantity", 0x226DF26, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.37.item", 0x226DF28, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.37.quantity", 0x226DF2A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.38.item", 0x226DF2C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.38.quantity", 0x226DF2E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.39.item", 0x226DF30, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.39.quantity", 0x226DF32, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.40.item", 0x226DF34, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.40.quantity", 0x226DF36, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.41.item", 0x226DF38, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.41.quantity", 0x226DF3A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.42.item", 0x226DF3C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.42.quantity", 0x226DF3E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.43.item", 0x226DF40, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.43.quantity", 0x226DF42, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.44.item", 0x226DF44, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.44.quantity", 0x226DF46, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.45.item", 0x226DF48, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.45.quantity", 0x226DF4A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.46.item", 0x226DF4C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.46.quantity", 0x226DF4E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.47.item", 0x226DF50, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.47.quantity", 0x226DF52, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.48.item", 0x226DF54, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.48.quantity", 0x226DF56, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.49.item", 0x226DF58, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.49.quantity", 0x226DF5A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.50.item", 0x226DF5C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.50.quantity", 0x226DF5E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.51.item", 0x226DF60, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.51.quantity", 0x226DF62, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.52.item", 0x226DF64, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.52.quantity", 0x226DF66, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.53.item", 0x226DF68, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.53.quantity", 0x226DF6A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.54.item", 0x226DF6C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.54.quantity", 0x226DF6E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.55.item", 0x226DF70, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.55.quantity", 0x226DF72, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.56.item", 0x226DF74, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.56.quantity", 0x226DF76, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.57.item", 0x226DF78, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.57.quantity", 0x226DF7A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.58.item", 0x226DF7C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.58.quantity", 0x226DF7E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.59.item", 0x226DF80, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.59.quantity", 0x226DF82, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.60.item", 0x226DF84, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.60.quantity", 0x226DF86, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.61.item", 0x226DF88, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.61.quantity", 0x226DF8A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.62.item", 0x226DF8C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.62.quantity", 0x226DF8E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.63.item", 0x226DF90, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.63.quantity", 0x226DF92, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.64.item", 0x226DF94, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.64.quantity", 0x226DF96, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.65.item", 0x226DF98, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.65.quantity", 0x226DF9A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.66.item", 0x226DF9C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.66.quantity", 0x226DF9E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.67.item", 0x226DFA0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.67.quantity", 0x226DFA2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.68.item", 0x226DFA4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.68.quantity", 0x226DFA6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.69.item", 0x226DFA8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.69.quantity", 0x226DFAA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.70.item", 0x226DFAC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.70.quantity", 0x226DFAE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.71.item", 0x226DFB0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.71.quantity", 0x226DFB2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.72.item", 0x226DFB4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.72.quantity", 0x226DFB6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.73.item", 0x226DFB8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.73.quantity", 0x226DFBA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.74.item", 0x226DFBC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.74.quantity", 0x226DFBE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.75.item", 0x226DFC0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.75.quantity", 0x226DFC2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.76.item", 0x226DFC4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.76.quantity", 0x226DFC6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.77.item", 0x226DFC8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.77.quantity", 0x226DFCA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.78.item", 0x226DFCC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.78.quantity", 0x226DFCE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.79.item", 0x226DFD0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.79.quantity", 0x226DFD2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.80.item", 0x226DFD4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.80.quantity", 0x226DFD6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.81.item", 0x226DFD8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.81.quantity", 0x226DFDA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.82.item", 0x226DFDC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.82.quantity", 0x226DFDE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.83.item", 0x226DFE0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.83.quantity", 0x226DFE2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.84.item", 0x226DFE4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.84.quantity", 0x226DFE6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.85.item", 0x226DFE8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.85.quantity", 0x226DFEA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.86.item", 0x226DFEC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.86.quantity", 0x226DFEE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.87.item", 0x226DFF0, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.87.quantity", 0x226DFF2, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.88.item", 0x226DFF4, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.88.quantity", 0x226DFF6, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.89.item", 0x226DFF8, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.89.quantity", 0x226DFFA, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.90.item", 0x226DFFC, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.90.quantity", 0x226DFFE, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.91.item", 0x226E000, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.91.quantity", 0x226E002, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.92.item", 0x226E004, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.92.quantity", 0x226E006, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.93.item", 0x226E008, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.93.quantity", 0x226E00A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.94.item", 0x226E00C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.94.quantity", 0x226E00E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.95.item", 0x226E010, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.95.quantity", 0x226E012, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.96.item", 0x226E014, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.96.quantity", 0x226E016, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.97.item", 0x226E018, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.97.quantity", 0x226E01A, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.98.item", 0x226E01C, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.98.quantity", 0x226E01E, [0, 0], 0);
            mapper.AssertAreEqual("bag.tmhm.99.item", 0x226E020, [0, 0], null);
            mapper.AssertAreEqual("bag.tmhm.99.quantity", 0x226E022, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.0.item", 0x226E0E4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.0.quantity", 0x226E0E6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.1.item", 0x226E0E8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.1.quantity", 0x226E0EA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.2.item", 0x226E0EC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.2.quantity", 0x226E0EE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.3.item", 0x226E0F0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.3.quantity", 0x226E0F2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.4.item", 0x226E0F4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.4.quantity", 0x226E0F6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.5.item", 0x226E0F8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.5.quantity", 0x226E0FA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.6.item", 0x226E0FC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.6.quantity", 0x226E0FE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.7.item", 0x226E100, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.7.quantity", 0x226E102, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.8.item", 0x226E104, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.8.quantity", 0x226E106, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.9.item", 0x226E108, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.9.quantity", 0x226E10A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.10.item", 0x226E10C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.10.quantity", 0x226E10E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.11.item", 0x226E110, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.11.quantity", 0x226E112, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.12.item", 0x226E114, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.12.quantity", 0x226E116, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.13.item", 0x226E118, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.13.quantity", 0x226E11A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.14.item", 0x226E11C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.14.quantity", 0x226E11E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.15.item", 0x226E120, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.15.quantity", 0x226E122, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.16.item", 0x226E124, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.16.quantity", 0x226E126, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.17.item", 0x226E128, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.17.quantity", 0x226E12A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.18.item", 0x226E12C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.18.quantity", 0x226E12E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.19.item", 0x226E130, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.19.quantity", 0x226E132, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.20.item", 0x226E134, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.20.quantity", 0x226E136, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.21.item", 0x226E138, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.21.quantity", 0x226E13A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.22.item", 0x226E13C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.22.quantity", 0x226E13E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.23.item", 0x226E140, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.23.quantity", 0x226E142, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.24.item", 0x226E144, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.24.quantity", 0x226E146, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.25.item", 0x226E148, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.25.quantity", 0x226E14A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.26.item", 0x226E14C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.26.quantity", 0x226E14E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.27.item", 0x226E150, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.27.quantity", 0x226E152, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.28.item", 0x226E154, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.28.quantity", 0x226E156, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.29.item", 0x226E158, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.29.quantity", 0x226E15A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.30.item", 0x226E15C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.30.quantity", 0x226E15E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.31.item", 0x226E160, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.31.quantity", 0x226E162, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.32.item", 0x226E164, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.32.quantity", 0x226E166, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.33.item", 0x226E168, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.33.quantity", 0x226E16A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.34.item", 0x226E16C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.34.quantity", 0x226E16E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.35.item", 0x226E170, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.35.quantity", 0x226E172, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.36.item", 0x226E174, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.36.quantity", 0x226E176, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.37.item", 0x226E178, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.37.quantity", 0x226E17A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.38.item", 0x226E17C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.38.quantity", 0x226E17E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.39.item", 0x226E180, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.39.quantity", 0x226E182, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.40.item", 0x226E184, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.40.quantity", 0x226E186, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.41.item", 0x226E188, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.41.quantity", 0x226E18A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.42.item", 0x226E18C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.42.quantity", 0x226E18E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.43.item", 0x226E190, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.43.quantity", 0x226E192, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.44.item", 0x226E194, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.44.quantity", 0x226E196, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.45.item", 0x226E198, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.45.quantity", 0x226E19A, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.46.item", 0x226E19C, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.46.quantity", 0x226E19E, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.47.item", 0x226E1A0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.47.quantity", 0x226E1A2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.48.item", 0x226E1A4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.48.quantity", 0x226E1A6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.49.item", 0x226E1A8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.49.quantity", 0x226E1AA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.50.item", 0x226E1AC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.50.quantity", 0x226E1AE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.51.item", 0x226E1B0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.51.quantity", 0x226E1B2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.52.item", 0x226E1B4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.52.quantity", 0x226E1B6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.53.item", 0x226E1B8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.53.quantity", 0x226E1BA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.54.item", 0x226E1BC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.54.quantity", 0x226E1BE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.55.item", 0x226E1C0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.55.quantity", 0x226E1C2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.56.item", 0x226E1C4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.56.quantity", 0x226E1C6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.57.item", 0x226E1C8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.57.quantity", 0x226E1CA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.58.item", 0x226E1CC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.58.quantity", 0x226E1CE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.59.item", 0x226E1D0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.59.quantity", 0x226E1D2, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.60.item", 0x226E1D4, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.60.quantity", 0x226E1D6, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.61.item", 0x226E1D8, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.61.quantity", 0x226E1DA, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.62.item", 0x226E1DC, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.62.quantity", 0x226E1DE, [0, 0], 0);
            mapper.AssertAreEqual("bag.berries.63.item", 0x226E1E0, [0, 0], null);
            mapper.AssertAreEqual("bag.berries.63.quantity", 0x226E1E2, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.0.item", 0x226E230, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.0.quantity", 0x226E232, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.1.item", 0x226E234, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.1.quantity", 0x226E236, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.2.item", 0x226E238, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.2.quantity", 0x226E23A, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.3.item", 0x226E23C, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.3.quantity", 0x226E23E, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.4.item", 0x226E240, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.4.quantity", 0x226E242, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.5.item", 0x226E244, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.5.quantity", 0x226E246, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.6.item", 0x226E248, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.6.quantity", 0x226E24A, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.7.item", 0x226E24C, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.7.quantity", 0x226E24E, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.8.item", 0x226E250, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.8.quantity", 0x226E252, [0, 0], 0);
            mapper.AssertAreEqual("bag.battle_items.9.item", 0x226E254, [0, 0], null);
            mapper.AssertAreEqual("bag.battle_items.9.quantity", 0x226E256, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.0.item", 0x226E024, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.0.quantity", 0x226E026, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.1.item", 0x226E028, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.1.quantity", 0x226E02A, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.2.item", 0x226E02C, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.2.quantity", 0x226E02E, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.3.item", 0x226E030, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.3.quantity", 0x226E032, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.4.item", 0x226E034, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.4.quantity", 0x226E036, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.5.item", 0x226E038, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.5.quantity", 0x226E03A, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.6.item", 0x226E03C, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.6.quantity", 0x226E03E, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.7.item", 0x226E040, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.7.quantity", 0x226E042, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.8.item", 0x226E044, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.8.quantity", 0x226E046, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.9.item", 0x226E048, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.9.quantity", 0x226E04A, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.10.item", 0x226E04C, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.10.quantity", 0x226E04E, [0, 0], 0);
            mapper.AssertAreEqual("bag.mail.11.item", 0x226E050, [0, 0], null);
            mapper.AssertAreEqual("bag.mail.11.quantity", 0x226E052, [0, 0], 0);
        }
        [TestMethod]
        public async Task Diamond_Overworld()
        {
            await Load_NDS_PokemonDiamond();

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("overworld.map_name", 0x226E74C, [162, 1], "Sandgem Town - Map 1");
            mapper.AssertAreEqual("overworld.map_index", 0x226E74C, [162, 1], 418);
            mapper.AssertAreEqual("overworld.x", 0x226E754, [179, 0, 0, 0], 179);
            mapper.AssertAreEqual("overworld.y", 0x226E758, [76, 3, 0, 0], 844);
            mapper.AssertAreEqual("overworld.encounter_rate", 0);
            mapper.AssertAreEqual("overworld.encounter_rates.walking", 0x22918C0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.surfing", 0x229198C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.old_rod", 0x22919E4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.good_rod", 0x2291A10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("overworld.encounter_rates.super_rod", 0x2291A3C, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("overworld.encounter_table.walking.0.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.0.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.0.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.0.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.0.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.1.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.1.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.1.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.1.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.1.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.2.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.2.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.2.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.2.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.2.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.3.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.3.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.3.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.3.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.3.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.4.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.4.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.4.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.4.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.4.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.5.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.5.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.5.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.5.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.5.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.6.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.6.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.6.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.6.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.6.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.7.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.7.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.7.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.7.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.7.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.8.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.8.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.8.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.8.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.8.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.9.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.9.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.9.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.9.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.9.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.10.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.10.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.10.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.10.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.10.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.11.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.11.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.11.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.11.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.11.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.12.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.12.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.12.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.12.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.12.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.13.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.13.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.13.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.13.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.13.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.14.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.14.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.14.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.14.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.14.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.15.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.15.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.15.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.15.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.15.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.16.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.16.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.16.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.16.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.16.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.17.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.17.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.17.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.17.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.17.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.18.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.18.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.18.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.18.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.18.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.19.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.19.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.19.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.19.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.19.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.20.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.20.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.20.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.20.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.20.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.21.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.21.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.21.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.21.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.21.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.22.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.22.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.22.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.22.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.walking.22.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.0.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.0.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.0.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.0.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.0.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.1.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.1.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.1.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.1.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.1.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.2.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.2.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.2.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.2.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.2.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.3.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.3.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.3.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.3.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.3.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.4.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.4.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.4.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.4.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.surfing.4.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.0.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.0.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.0.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.0.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.0.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.1.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.1.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.1.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.1.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.1.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.2.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.2.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.2.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.2.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.2.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.3.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.3.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.3.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.3.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.3.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.4.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.4.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.4.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.4.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.old_rod.4.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.0.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.0.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.0.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.0.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.0.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.1.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.1.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.1.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.1.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.1.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.2.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.2.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.2.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.2.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.2.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.3.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.3.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.3.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.3.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.3.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.4.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.4.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.4.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.4.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.good_rod.4.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.0.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.0.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.0.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.0.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.0.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.1.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.1.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.1.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.1.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.1.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.2.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.2.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.2.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.2.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.2.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.3.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.3.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.3.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.3.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.3.dex_number", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.4.level", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.4.level_low", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.4.level_high", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.4.species", null);
            mapper.AssertAreEqual("overworld.encounter_table.super_rod.4.dex_number", null);
        }
        [TestMethod]
        public async Task Diamond_Rival()
        {
            await Load_NDS_PokemonDiamond();

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("rival.name", 0x226FABC, [43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1], "AAAAAAA");
        }
        [TestMethod]
        public async Task Diamond_Screen()
        {
            await Load_NDS_PokemonDiamond();

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("screen.menu.scene", 0x22C3D3F, [0], 0);
            mapper.AssertAreEqual("screen.menu.cursor.flag", 0x22C3D90, [0], 0);
            mapper.AssertAreEqual("screen.menu.cursor.x", 0x22C3D92, [0], 0);
            mapper.AssertAreEqual("screen.menu.cursor.y", 0x22C3D91, [0], 0);
        }
        [TestMethod]
        public async Task Diamond_GameTime()
        {
            await Load_NDS_PokemonDiamond();

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("game_time.hours", 0x226D59A, [8, 0], 8);
            mapper.AssertAreEqual("game_time.minutes", 0x226D59C, [4], 4);
            mapper.AssertAreEqual("game_time.seconds", 0x226D59D, [28], 28);
        }
        [TestMethod]
        public async Task Diamond_Meta_State_Overworld()
        {
            await Load_NDS_PokemonDiamond();

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("meta.generation", "4");
            mapper.AssertAreEqual("meta.game_name", "Diamond and Pearl");
            mapper.AssertAreEqual("meta.game_type", "Originals");
            mapper.AssertAreEqual("meta.state", "Overworld");
            mapper.AssertAreEqual("meta.state_enemy", "N/A");
            mapper.AssertAreEqual("meta.global_pointer", 0x2106FAC, [0, 3, 38, 2], 36045568);
            mapper.AssertAreEqual("meta.enemy_pointer", 0x22967C8, [204, 252, 40, 2], 36240588);
        }
        [TestMethod]
        public async Task Diamond_Battle_State_Overworld()
        {
            await Load_NDS_PokemonDiamond();

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("battle.mode", null);
            mapper.AssertAreEqual("battle.outcome", null);
            mapper.AssertAreEqual("battle.player.party_position", 0x22B5C6C, [255], 255);
            mapper.AssertAreEqual("battle.player.party_position_2", 0x22B5C78, [3], 3);
            mapper.AssertAreEqual("battle.player.team_count", 0x22B9AD4, [99], 99);
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0x22B5880, [132, 88], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.nickname", 0x22B58B6, [0, 0, 200, 65, 43, 2, 164, 88, 43, 2, 196, 88, 43, 2, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0x22B58B4, [16], 16);
            mapper.AssertAreEqual("battle.player.active_pokemon.exp", 0x22B58E4, [16, 48, 16, 48], 806367248);
            mapper.AssertAreEqual("battle.player.active_pokemon.nature", 0x22B58E8, [16, 48, 16, 48], "Careful");
            mapper.AssertAreEqual("battle.player.active_pokemon.friendship", 0x22B58B5, [140], 140);
            mapper.AssertAreEqual("battle.player.active_pokemon.ability", 0x22B58A7, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0x22B58A4, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0x22B58A5, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon.ot_name", 0x22B58D4, [73, 48, 16, 48, 16, 48, 16, 48], "");
            mapper.AssertAreEqual("battle.player.active_pokemon.held_item", 0x22B58F8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.status_condition", 0x22B58EC, [212], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0x22B588C, [116, 88], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0x22B58AC, [148], 20);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0x22B588E, [43, 2], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0x22B58AD, [88], 24);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0x22B5890, [148, 88], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0x22B58AE, [43], 43);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0x22B5892, [43, 2], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0x22B58AF, [2], 2);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0x22B58CC, [180, 88], 22708);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0x22B58D0, [212, 88], 22740);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0x22B5882, [43, 2], 555);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0x22B5884, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0x22B5886, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_attack", 0x22B5888, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_defense", 0x22B588A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0x22B5899, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0x22B589A, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0x22B589B, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_attack", 0x22B589C, [132], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_defense", 0x22B589D, [88], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0x22B589E, [43], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0x22B589F, [2], -4);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.hp", 0x22B5894, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.attack", 0x22B5894, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.defense", 0x22B5894, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.speed", 0x22B5894, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_attack", 0x22B5894, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_defense", 0x22B5894, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.internals.personality_value", 0x22B58E8, [16, 48, 16, 48], 806367248);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.species", 0x22B5A00, [4, 90], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nickname", 0x22B5A36, [3, 16, 3, 16, 3, 16, 36, 90, 43, 2, 68, 90, 43, 2, 3, 16, 3, 16, 3, 16, 3, 16], "");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.level", 0x22B5A34, [3], 3);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.exp", 0x22B5A64, [8, 16, 8, 16], 268963848);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nature", 0x22B5A68, [8, 16, 8, 16], "Careful");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.friendship", 0x22B5A35, [16], 16);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ability", 0x22B5A27, [48], "Early Bird");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_1", 0x22B5A24, [21], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_2", 0x22B5A25, [48], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ot_name", 0x22B5A54, [8, 16, 8, 16, 8, 16, 8, 16], "");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.held_item", 0x22B5A78, [13, 16], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.status_condition", 0x22B5A6C, [84], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.move", 0x22B5A0C, [244, 89], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp", 0x22B5A2C, [20], 20);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.move", 0x22B5A0E, [43, 2], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp", 0x22B5A2D, [90], 26);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.move", 0x22B5A10, [20, 90], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp", 0x22B5A2E, [43], 43);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.move", 0x22B5A12, [43, 2], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp", 0x22B5A2F, [2], 2);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp", 0x22B5A4C, [52, 90], 23092);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp_max", 0x22B5A50, [84, 90], 23124);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.attack", 0x22B5A02, [43, 2], 555);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.defense", 0x22B5A04, [3, 16], 4099);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.speed", 0x22B5A06, [3, 16], 4099);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_attack", 0x22B5A08, [3, 16], 4099);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_defense", 0x22B5A0A, [3, 16], 4099);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.attack", 0x22B5A19, [48], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.defense", 0x22B5A1A, [21], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.speed", 0x22B5A1B, [48], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_attack", 0x22B5A1C, [4], -2);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_defense", 0x22B5A1D, [90], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.accuracy", 0x22B5A1E, [43], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.evasion", 0x22B5A1F, [2], -4);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.hp", 0x22B5A14, [140, 48, 21, 48], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.attack", 0x22B5A14, [140, 48, 21, 48], 4);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.defense", 0x22B5A14, [140, 48, 21, 48], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.speed", 0x22B5A14, [140, 48, 21, 48], 10);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_attack", 0x22B5A14, [140, 48, 21, 48], 1);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_defense", 0x22B5A14, [140, 48, 21, 48], 24);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.internals.personality_value", 0x22B5A68, [8, 16, 8, 16], 268963848);
            mapper.AssertAreEqual("battle.player.team.0.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.0.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.nickname", 0x48, [214, 93, 120, 145, 197, 22, 210, 19, 163, 73, 205, 171, 93, 55, 128, 48, 124, 64, 251, 72, 116, 3], "");
            mapper.AssertAreEqual("battle.player.team.0.level", 0x8C, [13], 13);
            mapper.AssertAreEqual("battle.player.team.0.exp", 0x10, [115, 209, 160, 144], -1868508813);
            mapper.AssertAreEqual("battle.player.team.0.ot_name", 0x68, [179, 251, 225, 191, 142, 60, 199, 6, 204, 64, 96, 201, 174, 190, 182, 56], "");
            mapper.AssertAreEqual("battle.player.team.0.ot_id", 0xC, [18, 99], 25362);
            mapper.AssertAreEqual("battle.player.team.0.ability", 0x15, [175], null);
            mapper.AssertAreEqual("battle.player.team.0.nature", 0x0, [49, 95, 107, 50], "Gentle");
            mapper.AssertAreEqual("battle.player.team.0.held_item", 0xA, [126, 233], null);
            mapper.AssertAreEqual("battle.player.team.0.friendship", 0x14, [197], 197);
            mapper.AssertAreEqual("battle.player.team.0.pokerus", 0x82, [83], 83);
            mapper.AssertAreEqual("battle.player.team.0.status_condition", 0x88, [160], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.move", 0x28, [141, 234], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp", 0x30, [59], 59);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp_up", 0x34, [170], 2);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.move", 0x2A, [150, 98], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp", 0x31, [121], 57);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp_up", 0x35, [49], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.move", 0x2C, [15, 163], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp", 0x32, [102], 38);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp_up", 0x36, [137], 2);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.move", 0x2E, [200, 215], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp", 0x33, [12], 12);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp_up", 0x37, [170], 2);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp", 0x8E, [24, 179], 45848);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp_max", 0x90, [88, 149], 38232);
            mapper.AssertAreEqual("battle.player.team.0.stats.attack", 0x92, [146, 133], 34194);
            mapper.AssertAreEqual("battle.player.team.0.stats.defense", 0x94, [206, 210], 53966);
            mapper.AssertAreEqual("battle.player.team.0.stats.speed", 0x96, [241, 57], 14833);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_attack", 0x98, [56, 161], 41272);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_defense", 0x9A, [235, 92], 23787);
            mapper.AssertAreEqual("battle.player.team.0.ivs.hp", 0x38, [197, 211, 234, 195], 5);
            mapper.AssertAreEqual("battle.player.team.0.ivs.attack", 0x38, [197, 211, 234, 195], 30);
            mapper.AssertAreEqual("battle.player.team.0.ivs.defense", 0x38, [197, 211, 234, 195], 20);
            mapper.AssertAreEqual("battle.player.team.0.ivs.speed", 0x38, [197, 211, 234, 195], 21);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_attack", 0x38, [197, 211, 234, 195], 30);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_defense", 0x38, [197, 211, 234, 195], 1);
            mapper.AssertAreEqual("battle.player.team.0.evs.hp", 0x18, [51], 51);
            mapper.AssertAreEqual("battle.player.team.0.evs.attack", 0x19, [252], 252);
            mapper.AssertAreEqual("battle.player.team.0.evs.defense", 0x1A, [44], 44);
            mapper.AssertAreEqual("battle.player.team.0.evs.speed", 0x1B, [239], 239);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_attack", 0x1C, [61], 61);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_defense", 0x1D, [205], 205);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_egg", 0x38, [197, 211, 234, 195], true);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_nicknamed", 0x38, [197, 211, 234, 195], true);
            mapper.AssertAreEqual("battle.player.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.internals.personality_value", 0x0, [49, 95, 107, 50], 845897521);
            mapper.AssertAreEqual("battle.player.team.0.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.internals.secret_id", 0xE, [239, 67], 17391);
            mapper.AssertAreEqual("battle.player.team.0.internals.language", 0x17, [103], null);
            mapper.AssertAreEqual("battle.player.team.0.misc.markings", 0x16, [219], 219);
            mapper.AssertAreEqual("battle.player.team.0.misc.sheen", 0x23, [168], 168);
            mapper.AssertAreEqual("battle.player.team.0.misc.hgss_ball", 0x86, [171], 171);
            mapper.AssertAreEqual("battle.player.team.0.misc.performance", 0x87, [187], 187);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.date_egg_received", 0x78, [101, 146, 34], 2265701);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.date_met", 0x7B, [243, 117, 126], 8287731);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.egg_location", 0x7E, [11, 184], 47115);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.met_location", 0x80, [78, 222], 56910);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.pokeball", 0x83, [98], 98);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.met_level", 0x84, [131], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.female_ot_gender", 0x84, [131], true);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.encounter_type", 0x85, [218], 218);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_cool", 0x1E, [154], 154);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_beauty", 0x1F, [184], 184);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_cute", 0x20, [231], 231);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_smart", 0x21, [180], 180);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_tough", 0x22, [78], 78);
            mapper.AssertAreEqual("battle.player.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [188, 122, 167, 203], -878216516);
            mapper.AssertAreEqual("battle.player.team.1.species", 0x8, [207, 76], null);
            mapper.AssertAreEqual("battle.player.team.1.dex_number", 0x8, [207, 76], 19663);
            mapper.AssertAreEqual("battle.player.team.1.nickname", 0x48, [46, 206, 253, 8, 171, 25, 214, 215, 108, 62, 254, 186, 61, 235, 60, 8, 16, 133, 49, 235, 173, 146], "");
            mapper.AssertAreEqual("battle.player.team.1.level", 0x8C, [51], 51);
            mapper.AssertAreEqual("battle.player.team.1.exp", 0x10, [228, 121, 82, 152], -1739425308);
            mapper.AssertAreEqual("battle.player.team.1.ot_name", 0x68, [99, 148, 226, 144, 243, 69, 252, 77, 171, 223, 252, 112, 32, 113, 246, 71], "");
            mapper.AssertAreEqual("battle.player.team.1.ot_id", 0xC, [40, 1], 296);
            mapper.AssertAreEqual("battle.player.team.1.ability", 0x15, [161], null);
            mapper.AssertAreEqual("battle.player.team.1.nature", 0x0, [34, 30, 28, 23], "Modest");
            mapper.AssertAreEqual("battle.player.team.1.held_item", 0xA, [143, 242], null);
            mapper.AssertAreEqual("battle.player.team.1.friendship", 0x14, [150], 150);
            mapper.AssertAreEqual("battle.player.team.1.pokerus", 0x82, [202], 202);
            mapper.AssertAreEqual("battle.player.team.1.status_condition", 0x88, [32], "Frozen");
            mapper.AssertAreEqual("battle.player.team.1.moves.0.move", 0x28, [38, 196], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp", 0x30, [109], 45);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp_up", 0x34, [19], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.move", 0x2A, [107, 26], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp", 0x31, [54], 54);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp_up", 0x35, [220], 3);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.move", 0x2C, [71, 12], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp", 0x32, [73], 9);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp_up", 0x36, [203], 3);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.move", 0x2E, [197, 40], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp", 0x33, [71], 7);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp_up", 0x37, [1], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp", 0x8E, [9, 192], 49161);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp_max", 0x90, [232, 98], 25320);
            mapper.AssertAreEqual("battle.player.team.1.stats.attack", 0x92, [217, 233], 59865);
            mapper.AssertAreEqual("battle.player.team.1.stats.defense", 0x94, [21, 85], 21781);
            mapper.AssertAreEqual("battle.player.team.1.stats.speed", 0x96, [86, 32], 8278);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_attack", 0x98, [164, 124], 31908);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_defense", 0x9A, [70, 233], 59718);
            mapper.AssertAreEqual("battle.player.team.1.ivs.hp", 0x38, [189, 0, 168, 25], 29);
            mapper.AssertAreEqual("battle.player.team.1.ivs.attack", 0x38, [189, 0, 168, 25], 5);
            mapper.AssertAreEqual("battle.player.team.1.ivs.defense", 0x38, [189, 0, 168, 25], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.speed", 0x38, [189, 0, 168, 25], 16);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_attack", 0x38, [189, 0, 168, 25], 26);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_defense", 0x38, [189, 0, 168, 25], 12);
            mapper.AssertAreEqual("battle.player.team.1.evs.hp", 0x18, [29], 29);
            mapper.AssertAreEqual("battle.player.team.1.evs.attack", 0x19, [28], 28);
            mapper.AssertAreEqual("battle.player.team.1.evs.defense", 0x1A, [117], 117);
            mapper.AssertAreEqual("battle.player.team.1.evs.speed", 0x1B, [92], 92);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_attack", 0x1C, [100], 100);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_defense", 0x1D, [82], 82);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_egg", 0x38, [189, 0, 168, 25], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_nicknamed", 0x38, [189, 0, 168, 25], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.skip_checksum_1", 0x4, [42], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.skip_checksum_2", 0x4, [42], true);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_bad_egg", 0x4, [42], false);
            mapper.AssertAreEqual("battle.player.team.1.internals.personality_value", 0x0, [34, 30, 28, 23], 387718690);
            mapper.AssertAreEqual("battle.player.team.1.internals.checksum", 0x6, [31, 29], 7455);
            mapper.AssertAreEqual("battle.player.team.1.internals.secret_id", 0xE, [197, 226], 58053);
            mapper.AssertAreEqual("battle.player.team.1.internals.language", 0x17, [156], null);
            mapper.AssertAreEqual("battle.player.team.1.misc.markings", 0x16, [37], 37);
            mapper.AssertAreEqual("battle.player.team.1.misc.sheen", 0x23, [221], 221);
            mapper.AssertAreEqual("battle.player.team.1.misc.hgss_ball", 0x86, [73], 73);
            mapper.AssertAreEqual("battle.player.team.1.misc.performance", 0x87, [30], 30);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.date_egg_received", 0x78, [235, 63, 203], 13320171);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.date_met", 0x7B, [143, 190, 136], 8961679);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.egg_location", 0x7E, [208, 235], 60368);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.met_location", 0x80, [197, 155], 39877);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.pokeball", 0x83, [22], 22);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.met_level", 0x84, [25], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.female_ot_gender", 0x84, [25], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.encounter_type", 0x85, [162], 162);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_cool", 0x1E, [70], 70);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_beauty", 0x1F, [253], 253);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_cute", 0x20, [172], 172);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_smart", 0x21, [208], 208);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_tough", 0x22, [8], 8);
            mapper.AssertAreEqual("battle.player.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [1, 92, 162, 171], -1415422975);
            mapper.AssertAreEqual("battle.player.team.2.species", 0x8, [52, 0], "Meowth");
            mapper.AssertAreEqual("battle.player.team.2.dex_number", 0x8, [52, 0], 52);
            mapper.AssertAreEqual("battle.player.team.2.nickname", 0x48, [237, 234, 150, 98, 10, 146, 151, 163, 45, 28, 3, 110, 204, 49, 136, 170, 173, 211, 234, 195, 179, 130], "");
            mapper.AssertAreEqual("battle.player.team.2.level", 0x8C, [129], 129);
            mapper.AssertAreEqual("battle.player.team.2.exp", 0x10, [122, 142, 204, 226], -489910662);
            mapper.AssertAreEqual("battle.player.team.2.ot_name", 0x68, [199, 251, 225, 191, 246, 123, 127, 0, 184, 64, 72, 200, 175, 191, 182, 56], "");
            mapper.AssertAreEqual("battle.player.team.2.ot_id", 0xC, [71, 82], 21063);
            mapper.AssertAreEqual("battle.player.team.2.ability", 0x15, [175], null);
            mapper.AssertAreEqual("battle.player.team.2.nature", 0x0, [44, 0, 0, 0], "Rash");
            mapper.AssertAreEqual("battle.player.team.2.held_item", 0xA, [126, 233], null);
            mapper.AssertAreEqual("battle.player.team.2.friendship", 0x14, [249], 249);
            mapper.AssertAreEqual("battle.player.team.2.pokerus", 0x82, [106], 106);
            mapper.AssertAreEqual("battle.player.team.2.status_condition", 0x88, [159], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.move", 0x28, [154, 93], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp", 0x30, [194], 2);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp_up", 0x34, [15], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.move", 0x2A, [120, 145], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp", 0x31, [22], 22);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp_up", 0x35, [55], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.move", 0x2C, [232, 39], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp", 0x32, [184], 56);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp_up", 0x36, [128], 2);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.move", 0x2E, [141, 97], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp", 0x33, [207], 15);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp_up", 0x37, [48], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp", 0x8E, [206, 26], 6862);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp_max", 0x90, [116, 13], 3444);
            mapper.AssertAreEqual("battle.player.team.2.stats.attack", 0x92, [171, 76], 19627);
            mapper.AssertAreEqual("battle.player.team.2.stats.defense", 0x94, [127, 92], 23679);
            mapper.AssertAreEqual("battle.player.team.2.stats.speed", 0x96, [255, 33], 8703);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_attack", 0x98, [191, 187], 48063);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_defense", 0x9A, [13, 8], 2061);
            mapper.AssertAreEqual("battle.player.team.2.ivs.hp", 0x38, [40, 64, 251, 72], 8);
            mapper.AssertAreEqual("battle.player.team.2.ivs.attack", 0x38, [40, 64, 251, 72], 1);
            mapper.AssertAreEqual("battle.player.team.2.ivs.defense", 0x38, [40, 64, 251, 72], 16);
            mapper.AssertAreEqual("battle.player.team.2.ivs.speed", 0x38, [40, 64, 251, 72], 22);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_attack", 0x38, [40, 64, 251, 72], 15);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_defense", 0x38, [40, 64, 251, 72], 4);
            mapper.AssertAreEqual("battle.player.team.2.evs.hp", 0x18, [13], 13);
            mapper.AssertAreEqual("battle.player.team.2.evs.attack", 0x19, [252], 252);
            mapper.AssertAreEqual("battle.player.team.2.evs.defense", 0x1A, [44], 44);
            mapper.AssertAreEqual("battle.player.team.2.evs.speed", 0x1B, [239], 239);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_attack", 0x1C, [30], 30);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_defense", 0x1D, [252], 252);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_egg", 0x38, [40, 64, 251, 72], true);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_nicknamed", 0x38, [40, 64, 251, 72], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.skip_checksum_1", 0x4, [48], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.skip_checksum_2", 0x4, [48], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_bad_egg", 0x4, [48], false);
            mapper.AssertAreEqual("battle.player.team.2.internals.personality_value", 0x0, [44, 0, 0, 0], 44);
            mapper.AssertAreEqual("battle.player.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.internals.secret_id", 0xE, [176, 49], 12720);
            mapper.AssertAreEqual("battle.player.team.2.internals.language", 0x17, [103], null);
            mapper.AssertAreEqual("battle.player.team.2.misc.markings", 0x16, [219], 219);
            mapper.AssertAreEqual("battle.player.team.2.misc.sheen", 0x23, [153], 153);
            mapper.AssertAreEqual("battle.player.team.2.misc.hgss_ball", 0x86, [132], 132);
            mapper.AssertAreEqual("battle.player.team.2.misc.performance", 0x87, [186], 186);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.date_egg_received", 0x78, [187, 144, 35], 2330811);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.date_met", 0x7B, [251, 61, 125], 8207867);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.egg_location", 0x7E, [52, 190], 48692);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.met_location", 0x80, [132, 218], 55940);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.pokeball", 0x83, [112], 112);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.met_level", 0x84, [77], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.female_ot_gender", 0x84, [77], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.encounter_type", 0x85, [223], 223);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_cool", 0x1E, [197], 197);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_beauty", 0x1F, [202], 202);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_cute", 0x20, [146], 146);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_smart", 0x21, [235], 235);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_tough", 0x22, [61], 61);
            mapper.AssertAreEqual("battle.player.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [244, 122, 167, 203], -878216460);
            mapper.AssertAreEqual("battle.player.team.3.species", 0x8, [190, 208], null);
            mapper.AssertAreEqual("battle.player.team.3.dex_number", 0x8, [190, 208], 53438);
            mapper.AssertAreEqual("battle.player.team.3.nickname", 0x48, [31, 61, 210, 156, 201, 70, 104, 100, 244, 60, 230, 184, 1, 104, 185, 255, 148, 241, 69, 174, 171, 198], "");
            mapper.AssertAreEqual("battle.player.team.3.level", 0x8C, [112], 112);
            mapper.AssertAreEqual("battle.player.team.3.exp", 0x10, [95, 129, 15, 150], -1777368737);
            mapper.AssertAreEqual("battle.player.team.3.ot_name", 0x68, [200, 179, 190, 23, 94, 49, 141, 172, 11, 240, 186, 157, 13, 162, 151, 14], "");
            mapper.AssertAreEqual("battle.player.team.3.ot_id", 0xC, [157, 14], 3741);
            mapper.AssertAreEqual("battle.player.team.3.ability", 0x15, [44], "Rain Dish");
            mapper.AssertAreEqual("battle.player.team.3.nature", 0x0, [97, 115, 97, 104], "Bashful");
            mapper.AssertAreEqual("battle.player.team.3.held_item", 0xA, [1, 208], null);
            mapper.AssertAreEqual("battle.player.team.3.friendship", 0x14, [60], 60);
            mapper.AssertAreEqual("battle.player.team.3.pokerus", 0x82, [123], 123);
            mapper.AssertAreEqual("battle.player.team.3.status_condition", 0x88, [172], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.move", 0x28, [76, 214], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp", 0x30, [103], 39);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp_up", 0x34, [164], 2);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.move", 0x2A, [55, 232], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp", 0x31, [231], 39);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp_up", 0x35, [137], 2);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.move", 0x2C, [83, 36], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp", 0x32, [150], 22);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp_up", 0x36, [87], 1);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.move", 0x2E, [203, 222], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp", 0x33, [241], 49);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp_up", 0x37, [26], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp", 0x8E, [172, 90], 23212);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp_max", 0x90, [141, 2], 653);
            mapper.AssertAreEqual("battle.player.team.3.stats.attack", 0x92, [72, 213], 54600);
            mapper.AssertAreEqual("battle.player.team.3.stats.defense", 0x94, [68, 240], 61508);
            mapper.AssertAreEqual("battle.player.team.3.stats.speed", 0x96, [170, 201], 51626);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_attack", 0x98, [162, 90], 23202);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_defense", 0x9A, [77, 193], 49485);
            mapper.AssertAreEqual("battle.player.team.3.ivs.hp", 0x38, [181, 195, 29, 101], 21);
            mapper.AssertAreEqual("battle.player.team.3.ivs.attack", 0x38, [181, 195, 29, 101], 29);
            mapper.AssertAreEqual("battle.player.team.3.ivs.defense", 0x38, [181, 195, 29, 101], 16);
            mapper.AssertAreEqual("battle.player.team.3.ivs.speed", 0x38, [181, 195, 29, 101], 27);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_attack", 0x38, [181, 195, 29, 101], 17);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_defense", 0x38, [181, 195, 29, 101], 18);
            mapper.AssertAreEqual("battle.player.team.3.evs.hp", 0x18, [198], 198);
            mapper.AssertAreEqual("battle.player.team.3.evs.attack", 0x19, [251], 251);
            mapper.AssertAreEqual("battle.player.team.3.evs.defense", 0x1A, [238], 238);
            mapper.AssertAreEqual("battle.player.team.3.evs.speed", 0x1B, [82], 82);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_attack", 0x1C, [43], 43);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_defense", 0x1D, [34], 34);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_egg", 0x38, [181, 195, 29, 101], true);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_nicknamed", 0x38, [181, 195, 29, 101], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.skip_checksum_1", 0x4, [97], true);
            mapper.AssertAreEqual("battle.player.team.3.flags.skip_checksum_2", 0x4, [97], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_bad_egg", 0x4, [97], false);
            mapper.AssertAreEqual("battle.player.team.3.internals.personality_value", 0x0, [97, 115, 97, 104], 1751216993);
            mapper.AssertAreEqual("battle.player.team.3.internals.checksum", 0x6, [97, 98], 25185);
            mapper.AssertAreEqual("battle.player.team.3.internals.secret_id", 0xE, [50, 42], 10802);
            mapper.AssertAreEqual("battle.player.team.3.internals.language", 0x17, [246], null);
            mapper.AssertAreEqual("battle.player.team.3.misc.markings", 0x16, [95], 95);
            mapper.AssertAreEqual("battle.player.team.3.misc.sheen", 0x23, [107], 107);
            mapper.AssertAreEqual("battle.player.team.3.misc.hgss_ball", 0x86, [25], 25);
            mapper.AssertAreEqual("battle.player.team.3.misc.performance", 0x87, [4], 4);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.date_egg_received", 0x78, [96, 7, 13], 853856);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.date_met", 0x7B, [122, 48, 89], 5845114);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.egg_location", 0x7E, [197, 251], 64453);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.met_location", 0x80, [147, 54], 13971);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.pokeball", 0x83, [208], 208);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.met_level", 0x84, [69], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.female_ot_gender", 0x84, [69], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.encounter_type", 0x85, [62], 62);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_cool", 0x1E, [223], 223);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_beauty", 0x1F, [126], 126);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_cute", 0x20, [30], 30);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_smart", 0x21, [99], 99);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_tough", 0x22, [109], 109);
            mapper.AssertAreEqual("battle.player.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [36, 131, 223, 152], -1730182364);
            mapper.AssertAreEqual("battle.player.team.4.species", 0x8, [163, 107], null);
            mapper.AssertAreEqual("battle.player.team.4.dex_number", 0x8, [163, 107], 27555);
            mapper.AssertAreEqual("battle.player.team.4.nickname", 0x48, [165, 10, 171, 92, 90, 12, 126, 248, 2, 242, 179, 76, 64, 231, 49, 42, 160, 98, 40, 210, 163, 158], "\u7eaf");
            mapper.AssertAreEqual("battle.player.team.4.level", 0x8C, [113], 113);
            mapper.AssertAreEqual("battle.player.team.4.exp", 0x10, [26, 184, 31, 198], -970999782);
            mapper.AssertAreEqual("battle.player.team.4.ot_name", 0x68, [33, 198, 115, 33, 158, 195, 156, 194, 11, 6, 100, 84, 181, 180, 155, 9], "");
            mapper.AssertAreEqual("battle.player.team.4.ot_id", 0xC, [221, 14], 3805);
            mapper.AssertAreEqual("battle.player.team.4.ability", 0x15, [92], "Skill Link");
            mapper.AssertAreEqual("battle.player.team.4.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.team.4.held_item", 0xA, [240, 168], null);
            mapper.AssertAreEqual("battle.player.team.4.friendship", 0x14, [14], 14);
            mapper.AssertAreEqual("battle.player.team.4.pokerus", 0x82, [174], 174);
            mapper.AssertAreEqual("battle.player.team.4.status_condition", 0x88, [101], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.move", 0x28, [242, 85], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp", 0x30, [36], 36);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp_up", 0x34, [228], 3);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.move", 0x2A, [228, 213], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp", 0x31, [135], 7);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp_up", 0x35, [14], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.move", 0x2C, [72, 74], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp", 0x32, [147], 19);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp_up", 0x36, [133], 2);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.move", 0x2E, [68, 179], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp", 0x33, [97], 33);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp_up", 0x37, [248], 3);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp", 0x8E, [176, 49], 12720);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp_max", 0x90, [66, 142], 36418);
            mapper.AssertAreEqual("battle.player.team.4.stats.attack", 0x92, [204, 226], 58060);
            mapper.AssertAreEqual("battle.player.team.4.stats.defense", 0x94, [172, 194], 49836);
            mapper.AssertAreEqual("battle.player.team.4.stats.speed", 0x96, [171, 2], 683);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_attack", 0x98, [87, 252], 64599);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_defense", 0x9A, [44, 239], 61228);
            mapper.AssertAreEqual("battle.player.team.4.ivs.hp", 0x38, [218, 204, 58, 150], 26);
            mapper.AssertAreEqual("battle.player.team.4.ivs.attack", 0x38, [218, 204, 58, 150], 6);
            mapper.AssertAreEqual("battle.player.team.4.ivs.defense", 0x38, [218, 204, 58, 150], 19);
            mapper.AssertAreEqual("battle.player.team.4.ivs.speed", 0x38, [218, 204, 58, 150], 21);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_attack", 0x38, [218, 204, 58, 150], 3);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_defense", 0x38, [218, 204, 58, 150], 11);
            mapper.AssertAreEqual("battle.player.team.4.evs.hp", 0x18, [37], 37);
            mapper.AssertAreEqual("battle.player.team.4.evs.attack", 0x19, [168], 168);
            mapper.AssertAreEqual("battle.player.team.4.evs.defense", 0x1A, [7], 7);
            mapper.AssertAreEqual("battle.player.team.4.evs.speed", 0x1B, [95], 95);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_attack", 0x1C, [50], 50);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_defense", 0x1D, [61], 61);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_egg", 0x38, [218, 204, 58, 150], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_nicknamed", 0x38, [218, 204, 58, 150], true);
            mapper.AssertAreEqual("battle.player.team.4.flags.skip_checksum_1", 0x4, [99], true);
            mapper.AssertAreEqual("battle.player.team.4.flags.skip_checksum_2", 0x4, [99], true);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_bad_egg", 0x4, [99], false);
            mapper.AssertAreEqual("battle.player.team.4.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.checksum", 0x6, [99, 108], 27747);
            mapper.AssertAreEqual("battle.player.team.4.internals.secret_id", 0xE, [207, 251], 64463);
            mapper.AssertAreEqual("battle.player.team.4.internals.language", 0x17, [8], "Korean");
            mapper.AssertAreEqual("battle.player.team.4.misc.markings", 0x16, [165], 165);
            mapper.AssertAreEqual("battle.player.team.4.misc.sheen", 0x23, [213], 213);
            mapper.AssertAreEqual("battle.player.team.4.misc.hgss_ball", 0x86, [151], 151);
            mapper.AssertAreEqual("battle.player.team.4.misc.performance", 0x87, [239], 239);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.date_egg_received", 0x78, [201, 140, 160], 10521801);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.date_met", 0x7B, [58, 210, 188], 12374586);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.egg_location", 0x7E, [96, 141], 36192);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.met_location", 0x80, [254, 145], 37374);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.pokeball", 0x83, [192], 192);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.met_level", 0x84, [44], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.female_ot_gender", 0x84, [44], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.encounter_type", 0x85, [67], 67);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_cool", 0x1E, [230], 230);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_beauty", 0x1F, [206], 206);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_cute", 0x20, [152], 152);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_smart", 0x21, [72], 72);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_tough", 0x22, [193], 193);
            mapper.AssertAreEqual("battle.player.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [81, 89, 198, 131], -2084153007);
            mapper.AssertAreEqual("battle.player.team.5.species", 0x8, [110, 101], null);
            mapper.AssertAreEqual("battle.player.team.5.dex_number", 0x8, [110, 101], 25966);
            mapper.AssertAreEqual("battle.player.team.5.nickname", 0x48, [253, 134, 247, 12, 28, 160, 151, 163, 73, 28, 3, 110, 170, 49, 137, 170, 181, 166, 142, 167, 181, 231], "");
            mapper.AssertAreEqual("battle.player.team.5.level", 0x8C, [16], 16);
            mapper.AssertAreEqual("battle.player.team.5.exp", 0x10, [49, 142, 204, 226], -489910735);
            mapper.AssertAreEqual("battle.player.team.5.ot_name", 0x68, [195, 142, 133, 219, 226, 30, 32, 98, 196, 64, 72, 200, 209, 191, 182, 56], "");
            mapper.AssertAreEqual("battle.player.team.5.ot_id", 0xC, [22, 32], 8214);
            mapper.AssertAreEqual("battle.player.team.5.ability", 0x15, [175], null);
            mapper.AssertAreEqual("battle.player.team.5.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.team.5.held_item", 0xA, [29, 157], null);
            mapper.AssertAreEqual("battle.player.team.5.friendship", 0x14, [197], 197);
            mapper.AssertAreEqual("battle.player.team.5.pokerus", 0x82, [106], 106);
            mapper.AssertAreEqual("battle.player.team.5.status_condition", 0x88, [114], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.move", 0x28, [184, 53], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp", 0x30, [146], 18);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp_up", 0x34, [93], 1);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.move", 0x2A, [25, 255], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp", 0x31, [22], 22);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp_up", 0x35, [55], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.move", 0x2C, [199, 39], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp", 0x32, [184], 56);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp_up", 0x36, [128], 2);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.move", 0x2E, [141, 97], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp", 0x33, [207], 15);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp_up", 0x37, [48], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp", 0x8E, [176, 49], 12720);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp_max", 0x90, [66, 142], 36418);
            mapper.AssertAreEqual("battle.player.team.5.stats.attack", 0x92, [204, 226], 58060);
            mapper.AssertAreEqual("battle.player.team.5.stats.defense", 0x94, [197, 175], 44997);
            mapper.AssertAreEqual("battle.player.team.5.stats.speed", 0x96, [219, 103], 26587);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_attack", 0x98, [64, 157], 40256);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_defense", 0x9A, [66, 139], 35650);
            mapper.AssertAreEqual("battle.player.team.5.ivs.hp", 0x38, [18, 51, 154, 38], 18);
            mapper.AssertAreEqual("battle.player.team.5.ivs.attack", 0x38, [18, 51, 154, 38], 24);
            mapper.AssertAreEqual("battle.player.team.5.ivs.defense", 0x38, [18, 51, 154, 38], 12);
            mapper.AssertAreEqual("battle.player.team.5.ivs.speed", 0x38, [18, 51, 154, 38], 20);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_attack", 0x38, [18, 51, 154, 38], 9);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_defense", 0x38, [18, 51, 154, 38], 19);
            mapper.AssertAreEqual("battle.player.team.5.evs.hp", 0x18, [93], 93);
            mapper.AssertAreEqual("battle.player.team.5.evs.attack", 0x19, [153], 153);
            mapper.AssertAreEqual("battle.player.team.5.evs.defense", 0x1A, [91], 91);
            mapper.AssertAreEqual("battle.player.team.5.evs.speed", 0x1B, [156], 156);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_attack", 0x1C, [42], 42);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_defense", 0x1D, [153], 153);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_egg", 0x38, [18, 51, 154, 38], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_nicknamed", 0x38, [18, 51, 154, 38], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.secret_id", 0xE, [209, 66], 17105);
            mapper.AssertAreEqual("battle.player.team.5.internals.language", 0x17, [103], null);
            mapper.AssertAreEqual("battle.player.team.5.misc.markings", 0x16, [219], 219);
            mapper.AssertAreEqual("battle.player.team.5.misc.sheen", 0x23, [153], 153);
            mapper.AssertAreEqual("battle.player.team.5.misc.hgss_ball", 0x86, [132], 132);
            mapper.AssertAreEqual("battle.player.team.5.misc.performance", 0x87, [186], 186);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.date_egg_received", 0x78, [75, 229, 71], 4711755);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.date_met", 0x7B, [159, 79, 24], 1593247);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.egg_location", 0x7E, [68, 190], 48708);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.met_location", 0x80, [0, 218], 55808);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.pokeball", 0x83, [112], 112);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.met_level", 0x84, [197], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.female_ot_gender", 0x84, [197], true);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.encounter_type", 0x85, [223], 223);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_cool", 0x1E, [181], 181);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_beauty", 0x1F, [202], 202);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_cute", 0x20, [214], 214);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_smart", 0x21, [235], 235);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_tough", 0x22, [61], 61);
            mapper.AssertAreEqual("battle.player.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [188, 122, 167, 203], -878216516);
            mapper.AssertAreEqual("battle.wild.0.species", 0x8, [28, 111], null);
            mapper.AssertAreEqual("battle.wild.0.dex_number", 0x8, [28, 111], 28444);
            mapper.AssertAreEqual("battle.wild.0.nickname", 0x48, [149, 252, 12, 46, 144, 45, 128, 53, 151, 176, 131, 185, 116, 224, 213, 5, 245, 65, 0, 148, 109, 190], "");
            mapper.AssertAreEqual("battle.wild.0.level", 0x8C, [29], 29);
            mapper.AssertAreEqual("battle.wild.0.exp", 0x10, [99, 38, 112, 103], 1735403107);
            mapper.AssertAreEqual("battle.wild.0.ot_name", 0x68, [172, 149, 210, 107, 245, 25, 7, 209, 197, 174, 105, 102, 141, 254, 125, 7], "");
            mapper.AssertAreEqual("battle.wild.0.ot_id", 0xC, [128, 159], 40832);
            mapper.AssertAreEqual("battle.wild.0.ability", 0x15, [134], null);
            mapper.AssertAreEqual("battle.wild.0.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.wild.0.held_item", 0xA, [160, 235], null);
            mapper.AssertAreEqual("battle.wild.0.friendship", 0x14, [228], 228);
            mapper.AssertAreEqual("battle.wild.0.pokerus", 0x82, [83], 83);
            mapper.AssertAreEqual("battle.wild.0.status_condition", 0x88, [95], null);
            mapper.AssertAreEqual("battle.wild.0.moves.0.move", 0x28, [135, 196], null);
            mapper.AssertAreEqual("battle.wild.0.moves.0.pp", 0x30, [119], 55);
            mapper.AssertAreEqual("battle.wild.0.moves.0.pp_up", 0x34, [120], 1);
            mapper.AssertAreEqual("battle.wild.0.moves.1.move", 0x2A, [51, 236], null);
            mapper.AssertAreEqual("battle.wild.0.moves.1.pp", 0x31, [205], 13);
            mapper.AssertAreEqual("battle.wild.0.moves.1.pp_up", 0x35, [191], 2);
            mapper.AssertAreEqual("battle.wild.0.moves.2.move", 0x2C, [129, 26], null);
            mapper.AssertAreEqual("battle.wild.0.moves.2.pp", 0x32, [255], 63);
            mapper.AssertAreEqual("battle.wild.0.moves.2.pp_up", 0x36, [106], 1);
            mapper.AssertAreEqual("battle.wild.0.moves.3.move", 0x2E, [192, 202], null);
            mapper.AssertAreEqual("battle.wild.0.moves.3.pp", 0x33, [36], 36);
            mapper.AssertAreEqual("battle.wild.0.moves.3.pp_up", 0x37, [110], 1);
            mapper.AssertAreEqual("battle.wild.0.stats.hp", 0x8E, [176, 49], 12720);
            mapper.AssertAreEqual("battle.wild.0.stats.hp_max", 0x90, [66, 142], 36418);
            mapper.AssertAreEqual("battle.wild.0.stats.attack", 0x92, [204, 226], 58060);
            mapper.AssertAreEqual("battle.wild.0.stats.defense", 0x94, [166, 158], 40614);
            mapper.AssertAreEqual("battle.wild.0.stats.speed", 0x96, [132, 1], 388);
            mapper.AssertAreEqual("battle.wild.0.stats.special_attack", 0x98, [108, 142], 36460);
            mapper.AssertAreEqual("battle.wild.0.stats.special_defense", 0x9A, [115, 159], 40819);
            mapper.AssertAreEqual("battle.wild.0.ivs.hp", 0x38, [224, 228, 180, 243], 0);
            mapper.AssertAreEqual("battle.wild.0.ivs.attack", 0x38, [224, 228, 180, 243], 7);
            mapper.AssertAreEqual("battle.wild.0.ivs.defense", 0x38, [224, 228, 180, 243], 25);
            mapper.AssertAreEqual("battle.wild.0.ivs.speed", 0x38, [224, 228, 180, 243], 9);
            mapper.AssertAreEqual("battle.wild.0.ivs.special_attack", 0x38, [224, 228, 180, 243], 27);
            mapper.AssertAreEqual("battle.wild.0.ivs.special_defense", 0x38, [224, 228, 180, 243], 25);
            mapper.AssertAreEqual("battle.wild.0.evs.hp", 0x18, [175], 175);
            mapper.AssertAreEqual("battle.wild.0.evs.attack", 0x19, [158], 158);
            mapper.AssertAreEqual("battle.wild.0.evs.defense", 0x1A, [221], 221);
            mapper.AssertAreEqual("battle.wild.0.evs.speed", 0x1B, [118], 118);
            mapper.AssertAreEqual("battle.wild.0.evs.special_attack", 0x1C, [237], 237);
            mapper.AssertAreEqual("battle.wild.0.evs.special_defense", 0x1D, [10], 10);
            mapper.AssertAreEqual("battle.wild.0.flags.is_egg", 0x38, [224, 228, 180, 243], true);
            mapper.AssertAreEqual("battle.wild.0.flags.is_nicknamed", 0x38, [224, 228, 180, 243], true);
            mapper.AssertAreEqual("battle.wild.0.flags.skip_checksum_1", 0x4, [116], false);
            mapper.AssertAreEqual("battle.wild.0.flags.skip_checksum_2", 0x4, [116], false);
            mapper.AssertAreEqual("battle.wild.0.flags.is_bad_egg", 0x4, [116], true);
            mapper.AssertAreEqual("battle.wild.0.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.internals.checksum", 0x6, [101, 101], 25957);
            mapper.AssertAreEqual("battle.wild.0.internals.secret_id", 0xE, [98, 170], 43618);
            mapper.AssertAreEqual("battle.wild.0.internals.language", 0x17, [146], null);
            mapper.AssertAreEqual("battle.wild.0.misc.markings", 0x16, [4], 4);
            mapper.AssertAreEqual("battle.wild.0.misc.sheen", 0x23, [244], 244);
            mapper.AssertAreEqual("battle.wild.0.misc.hgss_ball", 0x86, [68], 68);
            mapper.AssertAreEqual("battle.wild.0.misc.performance", 0x87, [20], 20);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.date_egg_received", 0x78, [194, 119, 113], 7436226);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.date_met", 0x7B, [92, 252, 1], 130140);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.egg_location", 0x7E, [8, 143], 36616);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.met_location", 0x80, [95, 103], 26463);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.pokeball", 0x83, [102], 102);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.met_level", 0x84, [5], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.female_ot_gender", 0x84, [5], false);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.encounter_type", 0x85, [131], 131);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_cool", 0x1E, [251], 251);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_beauty", 0x1F, [248], 248);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_cute", 0x20, [53], 53);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_smart", 0x21, [192], 192);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_tough", 0x22, [11], 11);
            mapper.AssertAreEqual("battle.wild.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [176, 197, 93, 8], 140363184);
            mapper.AssertAreEqual("battle.wild.1.species", 0x8, [99, 49], null);
            mapper.AssertAreEqual("battle.wild.1.dex_number", 0x8, [99, 49], 12643);
            mapper.AssertAreEqual("battle.wild.1.nickname", 0x48, [181, 108, 39, 227, 151, 120, 253, 13, 146, 22, 184, 207, 93, 55, 128, 48, 31, 113, 164, 58, 34, 109], "");
            mapper.AssertAreEqual("battle.wild.1.level", 0x8C, [29], 29);
            mapper.AssertAreEqual("battle.wild.1.exp", 0x10, [29, 254, 160, 226], -492765667);
            mapper.AssertAreEqual("battle.wild.1.ot_name", 0x68, [238, 219, 201, 16, 89, 205, 226, 199, 22, 108, 111, 110, 170, 49, 137, 170], "");
            mapper.AssertAreEqual("battle.wild.1.ot_id", 0xC, [64, 13], 3392);
            mapper.AssertAreEqual("battle.wild.1.ability", 0x15, [175], null);
            mapper.AssertAreEqual("battle.wild.1.nature", 0x0, [95, 112, 108, 0], "Bold");
            mapper.AssertAreEqual("battle.wild.1.held_item", 0xA, [33, 155], null);
            mapper.AssertAreEqual("battle.wild.1.friendship", 0x14, [197], 197);
            mapper.AssertAreEqual("battle.wild.1.pokerus", 0x82, [87], 87);
            mapper.AssertAreEqual("battle.wild.1.status_condition", 0x88, [167], null);
            mapper.AssertAreEqual("battle.wild.1.moves.0.move", 0x28, [212, 202], null);
            mapper.AssertAreEqual("battle.wild.1.moves.0.pp", 0x30, [155], 27);
            mapper.AssertAreEqual("battle.wild.1.moves.0.pp_up", 0x34, [209], 3);
            mapper.AssertAreEqual("battle.wild.1.moves.1.move", 0x2A, [190, 203], null);
            mapper.AssertAreEqual("battle.wild.1.moves.1.pp", 0x31, [48], 48);
            mapper.AssertAreEqual("battle.wild.1.moves.1.pp_up", 0x35, [191], 2);
            mapper.AssertAreEqual("battle.wild.1.moves.2.move", 0x2C, [252, 30], null);
            mapper.AssertAreEqual("battle.wild.1.moves.2.pp", 0x32, [36], 36);
            mapper.AssertAreEqual("battle.wild.1.moves.2.pp_up", 0x36, [182], 2);
            mapper.AssertAreEqual("battle.wild.1.moves.3.move", 0x2E, [26, 98], null);
            mapper.AssertAreEqual("battle.wild.1.moves.3.pp", 0x33, [200], 8);
            mapper.AssertAreEqual("battle.wild.1.moves.3.pp_up", 0x37, [56], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.hp", 0x8E, [221, 248], 63709);
            mapper.AssertAreEqual("battle.wild.1.stats.hp_max", 0x90, [182, 65], 16822);
            mapper.AssertAreEqual("battle.wild.1.stats.attack", 0x92, [53, 7], 1845);
            mapper.AssertAreEqual("battle.wild.1.stats.defense", 0x94, [173, 243], 62381);
            mapper.AssertAreEqual("battle.wild.1.stats.speed", 0x96, [148, 188], 48276);
            mapper.AssertAreEqual("battle.wild.1.stats.special_attack", 0x98, [16, 170], 43536);
            mapper.AssertAreEqual("battle.wild.1.stats.special_defense", 0x9A, [219, 245], 62939);
            mapper.AssertAreEqual("battle.wild.1.ivs.hp", 0x38, [92, 226, 74, 159], 28);
            mapper.AssertAreEqual("battle.wild.1.ivs.attack", 0x38, [92, 226, 74, 159], 18);
            mapper.AssertAreEqual("battle.wild.1.ivs.defense", 0x38, [92, 226, 74, 159], 24);
            mapper.AssertAreEqual("battle.wild.1.ivs.speed", 0x38, [92, 226, 74, 159], 21);
            mapper.AssertAreEqual("battle.wild.1.ivs.special_attack", 0x38, [92, 226, 74, 159], 20);
            mapper.AssertAreEqual("battle.wild.1.ivs.special_defense", 0x38, [92, 226, 74, 159], 15);
            mapper.AssertAreEqual("battle.wild.1.evs.hp", 0x18, [80], 80);
            mapper.AssertAreEqual("battle.wild.1.evs.attack", 0x19, [205], 205);
            mapper.AssertAreEqual("battle.wild.1.evs.defense", 0x1A, [115], 115);
            mapper.AssertAreEqual("battle.wild.1.evs.speed", 0x1B, [157], 157);
            mapper.AssertAreEqual("battle.wild.1.evs.special_attack", 0x1C, [111], 111);
            mapper.AssertAreEqual("battle.wild.1.evs.special_defense", 0x1D, [163], 163);
            mapper.AssertAreEqual("battle.wild.1.flags.is_egg", 0x38, [92, 226, 74, 159], false);
            mapper.AssertAreEqual("battle.wild.1.flags.is_nicknamed", 0x38, [92, 226, 74, 159], true);
            mapper.AssertAreEqual("battle.wild.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.internals.personality_value", 0x0, [95, 112, 108, 0], 7106655);
            mapper.AssertAreEqual("battle.wild.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.internals.secret_id", 0xE, [219, 3], 987);
            mapper.AssertAreEqual("battle.wild.1.internals.language", 0x17, [103], null);
            mapper.AssertAreEqual("battle.wild.1.misc.markings", 0x16, [219], 219);
            mapper.AssertAreEqual("battle.wild.1.misc.sheen", 0x23, [153], 153);
            mapper.AssertAreEqual("battle.wild.1.misc.hgss_ball", 0x86, [40], 40);
            mapper.AssertAreEqual("battle.wild.1.misc.performance", 0x87, [36], 36);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.date_egg_received", 0x78, [162, 226, 181], 11920034);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.date_met", 0x7B, [183, 171, 231], 15182775);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.egg_location", 0x7E, [163, 129], 33187);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.met_location", 0x80, [3, 228], 58371);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.pokeball", 0x83, [78], 78);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.met_level", 0x84, [95], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.female_ot_gender", 0x84, [95], false);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.encounter_type", 0x85, [90], 90);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_cool", 0x1E, [169], 169);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_beauty", 0x1F, [184], 184);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_cute", 0x20, [137], 137);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_smart", 0x21, [155], 155);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_tough", 0x22, [81], 81);
            mapper.AssertAreEqual("battle.wild.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [188, 122, 167, 203], -878216516);
            mapper.AssertAreEqual("battle.ally.id", 0x22AFD80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.enemy_bar_synced_hp", 0x22B5A4C, [52, 90], 23092);
            mapper.AssertAreEqual("battle.ally.party_position", 0x22B5C78, [3], 3);
            mapper.AssertAreEqual("battle.ally.team_count", 0x22BA634, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.species", 0x22B5A00, [4, 90], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nickname", 0x22B5A36, [3, 16, 3, 16, 3, 16, 36, 90, 43, 2, 68, 90, 43, 2, 3, 16, 3, 16, 3, 16, 3, 16], "");
            mapper.AssertAreEqual("battle.ally.active_pokemon.level", 0x22B5A34, [3], 3);
            mapper.AssertAreEqual("battle.ally.active_pokemon.exp", 0x22B5A64, [8, 16, 8, 16], 268963848);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nature", 0x22B5A68, [8, 16, 8, 16], "Careful");
            mapper.AssertAreEqual("battle.ally.active_pokemon.friendship", 0x22B5A35, [16], 16);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ability", 0x22B5A27, [48], "Early Bird");
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_1", 0x22B5A24, [21], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_2", 0x22B5A25, [48], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ot_name", 0x22B5A54, [8, 16, 8, 16, 8, 16, 8, 16], "");
            mapper.AssertAreEqual("battle.ally.active_pokemon.held_item", 0x22B5A78, [13, 16], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.status_condition", 0x22B5A6C, [84], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.move", 0x22B5A0C, [244, 89], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp", 0x22B5A2C, [20], 20);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.move", 0x22B5A0E, [43, 2], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp", 0x22B5A2D, [90], 26);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.move", 0x22B5A10, [20, 90], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp", 0x22B5A2E, [43], 43);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.move", 0x22B5A12, [43, 2], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp", 0x22B5A2F, [2], 2);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp", 0x22B5A4C, [52, 90], 23092);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp_max", 0x22B5A50, [84, 90], 23124);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.attack", 0x22B5A02, [43, 2], 555);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.defense", 0x22B5A04, [3, 16], 4099);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.speed", 0x22B5A06, [3, 16], 4099);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_attack", 0x22B5A08, [3, 16], 4099);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_defense", 0x22B5A0A, [3, 16], 4099);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.attack", 0x22B5A19, [48], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.defense", 0x22B5A1A, [21], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.speed", 0x22B5A1B, [48], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_attack", 0x22B5A1C, [4], -2);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_defense", 0x22B5A1D, [90], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.accuracy", 0x22B5A1E, [43], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.evasion", 0x22B5A1F, [2], -4);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.hp", 0x22B5A14, [140, 48, 21, 48], 12);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.attack", 0x22B5A14, [140, 48, 21, 48], 4);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.defense", 0x22B5A14, [140, 48, 21, 48], 12);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.speed", 0x22B5A14, [140, 48, 21, 48], 10);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_attack", 0x22B5A14, [140, 48, 21, 48], 1);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_defense", 0x22B5A14, [140, 48, 21, 48], 24);
            mapper.AssertAreEqual("battle.ally.active_pokemon.internals.personality_value", 0x22B5A68, [8, 16, 8, 16], 268963848);
            mapper.AssertAreEqual("battle.ally.team.0.species", 0x8, [151, 84], null);
            mapper.AssertAreEqual("battle.ally.team.0.dex_number", 0x8, [151, 84], 21655);
            mapper.AssertAreEqual("battle.ally.team.0.nickname", 0x48, [139, 143, 83, 184, 61, 83, 192, 66, 187, 108, 14, 149, 184, 76, 231, 113, 73, 173, 233, 173, 218, 151], "");
            mapper.AssertAreEqual("battle.ally.team.0.level", 0x8C, [250], 250);
            mapper.AssertAreEqual("battle.ally.team.0.exp", 0x10, [140, 13, 190, 82], 1388187020);
            mapper.AssertAreEqual("battle.ally.team.0.ot_name", 0x68, [61, 22, 77, 202, 93, 180, 93, 160, 175, 37, 72, 83, 249, 4, 45, 41], "");
            mapper.AssertAreEqual("battle.ally.team.0.ot_id", 0xC, [178, 110], 28338);
            mapper.AssertAreEqual("battle.ally.team.0.ability", 0x15, [215], null);
            mapper.AssertAreEqual("battle.ally.team.0.nature", 0x0, [3, 0, 0, 0], "Adamant");
            mapper.AssertAreEqual("battle.ally.team.0.held_item", 0xA, [107, 29], null);
            mapper.AssertAreEqual("battle.ally.team.0.friendship", 0x14, [180], 180);
            mapper.AssertAreEqual("battle.ally.team.0.pokerus", 0x82, [106], 106);
            mapper.AssertAreEqual("battle.ally.team.0.status_condition", 0x88, [133], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.move", 0x28, [223, 69], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp", 0x30, [160], 32);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp_up", 0x34, [106], 1);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.move", 0x2A, [175, 63], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp", 0x31, [200], 8);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp_up", 0x35, [153], 2);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.move", 0x2C, [181, 136], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp", 0x32, [1], 1);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp_up", 0x36, [37], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.move", 0x2E, [227, 183], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp", 0x33, [87], 23);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp_up", 0x37, [102], 1);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp", 0x8E, [228, 250], 64228);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp_max", 0x90, [0, 115], 29440);
            mapper.AssertAreEqual("battle.ally.team.0.stats.attack", 0x92, [64, 125], 32064);
            mapper.AssertAreEqual("battle.ally.team.0.stats.defense", 0x94, [101, 129], 33125);
            mapper.AssertAreEqual("battle.ally.team.0.stats.speed", 0x96, [80, 195], 50000);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_attack", 0x98, [129, 45], 11649);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_defense", 0x9A, [98, 188], 48226);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.hp", 0x38, [152, 42, 170, 251], 24);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.attack", 0x38, [152, 42, 170, 251], 20);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.defense", 0x38, [152, 42, 170, 251], 10);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.speed", 0x38, [152, 42, 170, 251], 20);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_attack", 0x38, [152, 42, 170, 251], 26);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_defense", 0x38, [152, 42, 170, 251], 29);
            mapper.AssertAreEqual("battle.ally.team.0.evs.hp", 0x18, [115], 115);
            mapper.AssertAreEqual("battle.ally.team.0.evs.attack", 0x19, [97], 97);
            mapper.AssertAreEqual("battle.ally.team.0.evs.defense", 0x1A, [236], 236);
            mapper.AssertAreEqual("battle.ally.team.0.evs.speed", 0x1B, [101], 101);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_attack", 0x1C, [142], 142);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_defense", 0x1D, [53], 53);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_egg", 0x38, [152, 42, 170, 251], true);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_nicknamed", 0x38, [152, 42, 170, 251], true);
            mapper.AssertAreEqual("battle.ally.team.0.flags.skip_checksum_1", 0x4, [34], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.skip_checksum_2", 0x4, [34], true);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_bad_egg", 0x4, [34], false);
            mapper.AssertAreEqual("battle.ally.team.0.internals.personality_value", 0x0, [3, 0, 0, 0], 3);
            mapper.AssertAreEqual("battle.ally.team.0.internals.checksum", 0x6, [35, 34], 8739);
            mapper.AssertAreEqual("battle.ally.team.0.internals.secret_id", 0xE, [96, 128], 32864);
            mapper.AssertAreEqual("battle.ally.team.0.internals.language", 0x17, [74], null);
            mapper.AssertAreEqual("battle.ally.team.0.misc.markings", 0x16, [211], 211);
            mapper.AssertAreEqual("battle.ally.team.0.misc.sheen", 0x23, [126], 126);
            mapper.AssertAreEqual("battle.ally.team.0.misc.hgss_ball", 0x86, [5], 5);
            mapper.AssertAreEqual("battle.ally.team.0.misc.performance", 0x87, [149], 149);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.date_egg_received", 0x78, [204, 170, 209], 13740748);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.date_met", 0x7B, [236, 89, 236], 15489516);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.egg_location", 0x7E, [140, 194], 49804);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.met_location", 0x80, [71, 167], 42823);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.pokeball", 0x83, [72], 72);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.met_level", 0x84, [32], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.female_ot_gender", 0x84, [32], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.encounter_type", 0x85, [59], 59);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_cool", 0x1E, [15], 15);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_beauty", 0x1F, [212], 212);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_cute", 0x20, [23], 23);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_smart", 0x21, [55], 55);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_tough", 0x22, [191], 191);
            mapper.AssertAreEqual("battle.ally.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [83, 171, 225, 81], 1373743955);
            mapper.AssertAreEqual("battle.ally.team.1.species", 0x8, [54, 210], null);
            mapper.AssertAreEqual("battle.ally.team.1.dex_number", 0x8, [54, 210], 53814);
            mapper.AssertAreEqual("battle.ally.team.1.nickname", 0x48, [206, 68, 49, 3, 232, 13, 12, 92, 92, 211, 189, 236, 83, 204, 80, 128, 74, 31, 192, 68, 201, 208], "");
            mapper.AssertAreEqual("battle.ally.team.1.level", 0x8C, [126], 126);
            mapper.AssertAreEqual("battle.ally.team.1.exp", 0x10, [27, 72, 143, 162], -1567668197);
            mapper.AssertAreEqual("battle.ally.team.1.ot_name", 0x68, [84, 20, 192, 27, 22, 219, 150, 207, 42, 101, 153, 68, 181, 183, 18, 81], "");
            mapper.AssertAreEqual("battle.ally.team.1.ot_id", 0xC, [92, 1], 348);
            mapper.AssertAreEqual("battle.ally.team.1.ability", 0x15, [91], "Adaptability");
            mapper.AssertAreEqual("battle.ally.team.1.nature", 0x0, [16, 252, 176, 0], "Naive");
            mapper.AssertAreEqual("battle.ally.team.1.held_item", 0xA, [198, 46], null);
            mapper.AssertAreEqual("battle.ally.team.1.friendship", 0x14, [126], 126);
            mapper.AssertAreEqual("battle.ally.team.1.pokerus", 0x82, [133], 133);
            mapper.AssertAreEqual("battle.ally.team.1.status_condition", 0x88, [152], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.move", 0x28, [151, 229], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp", 0x30, [9], 9);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp_up", 0x34, [244], 3);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.move", 0x2A, [113, 108], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp", 0x31, [151], 23);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp_up", 0x35, [133], 2);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.move", 0x2C, [139, 122], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp", 0x32, [199], 7);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp_up", 0x36, [59], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.move", 0x2E, [137, 138], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp", 0x33, [150], 22);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp_up", 0x37, [42], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp", 0x8E, [137, 244], 62601);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp_max", 0x90, [65, 151], 38721);
            mapper.AssertAreEqual("battle.ally.team.1.stats.attack", 0x92, [120, 160], 41080);
            mapper.AssertAreEqual("battle.ally.team.1.stats.defense", 0x94, [174, 27], 7086);
            mapper.AssertAreEqual("battle.ally.team.1.stats.speed", 0x96, [142, 82], 21134);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_attack", 0x98, [118, 173], 44406);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_defense", 0x9A, [49, 204], 52273);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.hp", 0x38, [147, 211, 235, 172], 19);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.attack", 0x38, [147, 211, 235, 172], 28);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.defense", 0x38, [147, 211, 235, 172], 20);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.speed", 0x38, [147, 211, 235, 172], 23);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_attack", 0x38, [147, 211, 235, 172], 14);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_defense", 0x38, [147, 211, 235, 172], 22);
            mapper.AssertAreEqual("battle.ally.team.1.evs.hp", 0x18, [147], 147);
            mapper.AssertAreEqual("battle.ally.team.1.evs.attack", 0x19, [158], 158);
            mapper.AssertAreEqual("battle.ally.team.1.evs.defense", 0x1A, [151], 151);
            mapper.AssertAreEqual("battle.ally.team.1.evs.speed", 0x1B, [206], 206);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_attack", 0x1C, [12], 12);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_defense", 0x1D, [107], 107);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_egg", 0x38, [147, 211, 235, 172], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_nicknamed", 0x38, [147, 211, 235, 172], true);
            mapper.AssertAreEqual("battle.ally.team.1.flags.skip_checksum_1", 0x4, [237], true);
            mapper.AssertAreEqual("battle.ally.team.1.flags.skip_checksum_2", 0x4, [237], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_bad_egg", 0x4, [237], true);
            mapper.AssertAreEqual("battle.ally.team.1.internals.personality_value", 0x0, [16, 252, 176, 0], 11598864);
            mapper.AssertAreEqual("battle.ally.team.1.internals.checksum", 0x6, [227, 214], 55011);
            mapper.AssertAreEqual("battle.ally.team.1.internals.secret_id", 0xE, [98, 148], 37986);
            mapper.AssertAreEqual("battle.ally.team.1.internals.language", 0x17, [33], null);
            mapper.AssertAreEqual("battle.ally.team.1.misc.markings", 0x16, [154], 154);
            mapper.AssertAreEqual("battle.ally.team.1.misc.sheen", 0x23, [1], 1);
            mapper.AssertAreEqual("battle.ally.team.1.misc.hgss_ball", 0x86, [29], 29);
            mapper.AssertAreEqual("battle.ally.team.1.misc.performance", 0x87, [169], 169);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.date_egg_received", 0x78, [180, 124, 49], 3243188);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.date_met", 0x7B, [183, 90, 79], 5200567);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.egg_location", 0x7E, [119, 151], 38775);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.met_location", 0x80, [15, 208], 53263);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.pokeball", 0x83, [152], 152);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.met_level", 0x84, [199], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.female_ot_gender", 0x84, [199], true);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.encounter_type", 0x85, [103], 103);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_cool", 0x1E, [168], 168);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_beauty", 0x1F, [3], 3);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_cute", 0x20, [237], 237);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_smart", 0x21, [20], 20);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_tough", 0x22, [41], 41);
            mapper.AssertAreEqual("battle.ally.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [66, 232, 89, 13], 223995970);
            mapper.AssertAreEqual("battle.ally.team.2.species", 0x8, [174, 5], null);
            mapper.AssertAreEqual("battle.ally.team.2.dex_number", 0x8, [174, 5], 1454);
            mapper.AssertAreEqual("battle.ally.team.2.nickname", 0x48, [232, 11, 153, 1, 254, 113, 126, 245, 134, 58, 122, 148, 69, 181, 50, 147, 130, 30, 61, 77, 35, 219], "\u871c\u00fa");
            mapper.AssertAreEqual("battle.ally.team.2.level", 0x8C, [117], 117);
            mapper.AssertAreEqual("battle.ally.team.2.exp", 0x10, [89, 215, 54, 137], -1992894631);
            mapper.AssertAreEqual("battle.ally.team.2.ot_name", 0x68, [68, 223, 34, 4, 196, 57, 252, 50, 14, 247, 63, 134, 100, 228, 14, 164], "");
            mapper.AssertAreEqual("battle.ally.team.2.ot_id", 0xC, [117, 94], 24181);
            mapper.AssertAreEqual("battle.ally.team.2.ability", 0x15, [185], null);
            mapper.AssertAreEqual("battle.ally.team.2.nature", 0x0, [96, 0, 192, 2], "Modest");
            mapper.AssertAreEqual("battle.ally.team.2.held_item", 0xA, [180, 55], null);
            mapper.AssertAreEqual("battle.ally.team.2.friendship", 0x14, [231], 231);
            mapper.AssertAreEqual("battle.ally.team.2.pokerus", 0x82, [195], 195);
            mapper.AssertAreEqual("battle.ally.team.2.status_condition", 0x88, [29], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.move", 0x28, [103, 126], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp", 0x30, [91], 27);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp_up", 0x34, [140], 2);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.move", 0x2A, [171, 74], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp", 0x31, [2], 2);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp_up", 0x35, [63], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.move", 0x2C, [48, 25], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp", 0x32, [205], 13);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp_up", 0x36, [198], 3);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.move", 0x2E, [104, 163], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp", 0x33, [203], 11);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp_up", 0x37, [120], 1);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp", 0x8E, [194, 195], 50114);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp_max", 0x90, [13, 110], 28173);
            mapper.AssertAreEqual("battle.ally.team.2.stats.attack", 0x92, [125, 64], 16509);
            mapper.AssertAreEqual("battle.ally.team.2.stats.defense", 0x94, [132, 213], 54660);
            mapper.AssertAreEqual("battle.ally.team.2.stats.speed", 0x96, [217, 191], 49113);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_attack", 0x98, [168, 93], 23976);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_defense", 0x9A, [192, 145], 37312);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.hp", 0x38, [150, 175, 46, 75], 22);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.attack", 0x38, [150, 175, 46, 75], 28);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.defense", 0x38, [150, 175, 46, 75], 11);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.speed", 0x38, [150, 175, 46, 75], 29);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_attack", 0x38, [150, 175, 46, 75], 18);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_defense", 0x38, [150, 175, 46, 75], 5);
            mapper.AssertAreEqual("battle.ally.team.2.evs.hp", 0x18, [81], 81);
            mapper.AssertAreEqual("battle.ally.team.2.evs.attack", 0x19, [238], 238);
            mapper.AssertAreEqual("battle.ally.team.2.evs.defense", 0x1A, [139], 139);
            mapper.AssertAreEqual("battle.ally.team.2.evs.speed", 0x1B, [222], 222);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_attack", 0x1C, [197], 197);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_defense", 0x1D, [109], 109);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_egg", 0x38, [150, 175, 46, 75], true);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_nicknamed", 0x38, [150, 175, 46, 75], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.skip_checksum_1", 0x4, [37], true);
            mapper.AssertAreEqual("battle.ally.team.2.flags.skip_checksum_2", 0x4, [37], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_bad_egg", 0x4, [37], true);
            mapper.AssertAreEqual("battle.ally.team.2.internals.personality_value", 0x0, [96, 0, 192, 2], 46137440);
            mapper.AssertAreEqual("battle.ally.team.2.internals.checksum", 0x6, [150, 197], 50582);
            mapper.AssertAreEqual("battle.ally.team.2.internals.secret_id", 0xE, [55, 170], 43575);
            mapper.AssertAreEqual("battle.ally.team.2.internals.language", 0x17, [186], null);
            mapper.AssertAreEqual("battle.ally.team.2.misc.markings", 0x16, [134], 134);
            mapper.AssertAreEqual("battle.ally.team.2.misc.sheen", 0x23, [161], 161);
            mapper.AssertAreEqual("battle.ally.team.2.misc.hgss_ball", 0x86, [128], 128);
            mapper.AssertAreEqual("battle.ally.team.2.misc.performance", 0x87, [44], 44);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.date_egg_received", 0x78, [109, 147, 229], 15045485);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.date_met", 0x7B, [83, 243, 161], 10613587);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.egg_location", 0x7E, [101, 164], 42085);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.met_location", 0x80, [124, 48], 12412);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.pokeball", 0x83, [69], 69);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.met_level", 0x84, [114], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.female_ot_gender", 0x84, [114], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.encounter_type", 0x85, [131], 131);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_cool", 0x1E, [169], 169);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_beauty", 0x1F, [127], 127);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_cute", 0x20, [155], 155);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_smart", 0x21, [216], 216);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_tough", 0x22, [216], 216);
            mapper.AssertAreEqual("battle.ally.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [93, 51, 49, 40], 674313053);
            mapper.AssertAreEqual("battle.ally.team.3.species", 0x8, [167, 110], null);
            mapper.AssertAreEqual("battle.ally.team.3.dex_number", 0x8, [167, 110], 28327);
            mapper.AssertAreEqual("battle.ally.team.3.nickname", 0x48, [20, 203, 103, 187, 170, 164, 153, 27, 81, 56, 84, 188, 79, 73, 204, 209, 1, 130, 216, 242, 164, 209], "");
            mapper.AssertAreEqual("battle.ally.team.3.level", 0x8C, [162], 162);
            mapper.AssertAreEqual("battle.ally.team.3.exp", 0x10, [39, 13, 127, 18], 310316327);
            mapper.AssertAreEqual("battle.ally.team.3.ot_name", 0x68, [84, 88, 132, 77, 26, 53, 84, 39, 150, 143, 110, 148, 213, 124, 32, 176], "");
            mapper.AssertAreEqual("battle.ally.team.3.ot_id", 0xC, [230, 226], 58086);
            mapper.AssertAreEqual("battle.ally.team.3.ability", 0x15, [201], null);
            mapper.AssertAreEqual("battle.ally.team.3.nature", 0x0, [161, 199, 128, 102], "Calm");
            mapper.AssertAreEqual("battle.ally.team.3.held_item", 0xA, [162, 243], null);
            mapper.AssertAreEqual("battle.ally.team.3.friendship", 0x14, [240], 240);
            mapper.AssertAreEqual("battle.ally.team.3.pokerus", 0x82, [48], 48);
            mapper.AssertAreEqual("battle.ally.team.3.status_condition", 0x88, [78], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.move", 0x28, [110, 235], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.pp", 0x30, [10], 10);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.pp_up", 0x34, [109], 1);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.move", 0x2A, [223, 101], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.pp", 0x31, [70], 6);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.pp_up", 0x35, [8], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.move", 0x2C, [18, 38], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.pp", 0x32, [219], 27);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.pp_up", 0x36, [152], 2);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.move", 0x2E, [36, 121], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.pp", 0x33, [108], 44);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.pp_up", 0x37, [16], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.hp", 0x8E, [218, 233], 59866);
            mapper.AssertAreEqual("battle.ally.team.3.stats.hp_max", 0x90, [56, 138], 35384);
            mapper.AssertAreEqual("battle.ally.team.3.stats.attack", 0x92, [130, 153], 39298);
            mapper.AssertAreEqual("battle.ally.team.3.stats.defense", 0x94, [114, 98], 25202);
            mapper.AssertAreEqual("battle.ally.team.3.stats.speed", 0x96, [113, 115], 29553);
            mapper.AssertAreEqual("battle.ally.team.3.stats.special_attack", 0x98, [234, 81], 20970);
            mapper.AssertAreEqual("battle.ally.team.3.stats.special_defense", 0x9A, [37, 119], 30501);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.hp", 0x38, [195, 206, 209, 232], 3);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.attack", 0x38, [195, 206, 209, 232], 22);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.defense", 0x38, [195, 206, 209, 232], 19);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.speed", 0x38, [195, 206, 209, 232], 3);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.special_attack", 0x38, [195, 206, 209, 232], 13);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.special_defense", 0x38, [195, 206, 209, 232], 20);
            mapper.AssertAreEqual("battle.ally.team.3.evs.hp", 0x18, [148], 148);
            mapper.AssertAreEqual("battle.ally.team.3.evs.attack", 0x19, [251], 251);
            mapper.AssertAreEqual("battle.ally.team.3.evs.defense", 0x1A, [159], 159);
            mapper.AssertAreEqual("battle.ally.team.3.evs.speed", 0x1B, [161], 161);
            mapper.AssertAreEqual("battle.ally.team.3.evs.special_attack", 0x1C, [91], 91);
            mapper.AssertAreEqual("battle.ally.team.3.evs.special_defense", 0x1D, [230], 230);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_egg", 0x38, [195, 206, 209, 232], true);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_nicknamed", 0x38, [195, 206, 209, 232], true);
            mapper.AssertAreEqual("battle.ally.team.3.flags.skip_checksum_1", 0x4, [16], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.skip_checksum_2", 0x4, [16], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_bad_egg", 0x4, [16], false);
            mapper.AssertAreEqual("battle.ally.team.3.internals.personality_value", 0x0, [161, 199, 128, 102], 1719715745);
            mapper.AssertAreEqual("battle.ally.team.3.internals.checksum", 0x6, [112, 1], 368);
            mapper.AssertAreEqual("battle.ally.team.3.internals.secret_id", 0xE, [166, 197], 50598);
            mapper.AssertAreEqual("battle.ally.team.3.internals.language", 0x17, [74], null);
            mapper.AssertAreEqual("battle.ally.team.3.misc.markings", 0x16, [231], 231);
            mapper.AssertAreEqual("battle.ally.team.3.misc.sheen", 0x23, [246], 246);
            mapper.AssertAreEqual("battle.ally.team.3.misc.hgss_ball", 0x86, [27], 27);
            mapper.AssertAreEqual("battle.ally.team.3.misc.performance", 0x87, [91], 91);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.date_egg_received", 0x78, [33, 165, 130], 8561953);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.date_met", 0x7B, [205, 80, 58], 3821773);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.egg_location", 0x7E, [244, 52], 13556);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.met_location", 0x80, [127, 13], 3455);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.pokeball", 0x83, [204], 204);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.met_level", 0x84, [193], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.female_ot_gender", 0x84, [193], true);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.encounter_type", 0x85, [124], 124);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_cool", 0x1E, [211], 211);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_beauty", 0x1F, [16], 16);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_cute", 0x20, [129], 129);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_smart", 0x21, [182], 182);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_tough", 0x22, [116], 116);
            mapper.AssertAreEqual("battle.ally.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [105, 230, 23, 44], 739763817);
            mapper.AssertAreEqual("battle.ally.team.4.species", 0x8, [53, 153], null);
            mapper.AssertAreEqual("battle.ally.team.4.dex_number", 0x8, [53, 153], 39221);
            mapper.AssertAreEqual("battle.ally.team.4.nickname", 0x48, [152, 109, 233, 254, 142, 89, 117, 82, 246, 93, 51, 119, 29, 51, 26, 197, 237, 9, 198, 213, 74, 184], "");
            mapper.AssertAreEqual("battle.ally.team.4.level", 0x8C, [198], 198);
            mapper.AssertAreEqual("battle.ally.team.4.exp", 0x10, [12, 223, 205, 111], 1875762956);
            mapper.AssertAreEqual("battle.ally.team.4.ot_name", 0x68, [107, 118, 241, 222, 155, 61, 91, 53, 122, 29, 141, 155, 50, 65, 196, 136], "");
            mapper.AssertAreEqual("battle.ally.team.4.ot_id", 0xC, [181, 176], 45237);
            mapper.AssertAreEqual("battle.ally.team.4.ability", 0x15, [38], "Poison Point");
            mapper.AssertAreEqual("battle.ally.team.4.nature", 0x0, [96, 0, 112, 3], "Lonely");
            mapper.AssertAreEqual("battle.ally.team.4.held_item", 0xA, [211, 98], null);
            mapper.AssertAreEqual("battle.ally.team.4.friendship", 0x14, [206], 206);
            mapper.AssertAreEqual("battle.ally.team.4.pokerus", 0x82, [110], 110);
            mapper.AssertAreEqual("battle.ally.team.4.status_condition", 0x88, [44], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.move", 0x28, [190, 9], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.pp", 0x30, [205], 13);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.pp_up", 0x34, [214], 3);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.move", 0x2A, [18, 238], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.pp", 0x31, [145], 17);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.pp_up", 0x35, [86], 1);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.move", 0x2C, [201, 135], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.pp", 0x32, [204], 12);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.pp_up", 0x36, [149], 2);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.move", 0x2E, [87, 62], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.pp", 0x33, [36], 36);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.pp_up", 0x37, [188], 2);
            mapper.AssertAreEqual("battle.ally.team.4.stats.hp", 0x8E, [252, 29], 7676);
            mapper.AssertAreEqual("battle.ally.team.4.stats.hp_max", 0x90, [6, 1], 262);
            mapper.AssertAreEqual("battle.ally.team.4.stats.attack", 0x92, [78, 247], 63310);
            mapper.AssertAreEqual("battle.ally.team.4.stats.defense", 0x94, [232, 140], 36072);
            mapper.AssertAreEqual("battle.ally.team.4.stats.speed", 0x96, [127, 92], 23679);
            mapper.AssertAreEqual("battle.ally.team.4.stats.special_attack", 0x98, [200, 182], 46792);
            mapper.AssertAreEqual("battle.ally.team.4.stats.special_defense", 0x9A, [176, 147], 37808);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.hp", 0x38, [184, 196, 223, 5], 24);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.attack", 0x38, [184, 196, 223, 5], 5);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.defense", 0x38, [184, 196, 223, 5], 17);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.speed", 0x38, [184, 196, 223, 5], 31);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.special_attack", 0x38, [184, 196, 223, 5], 29);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.special_defense", 0x38, [184, 196, 223, 5], 2);
            mapper.AssertAreEqual("battle.ally.team.4.evs.hp", 0x18, [107], 107);
            mapper.AssertAreEqual("battle.ally.team.4.evs.attack", 0x19, [161], 161);
            mapper.AssertAreEqual("battle.ally.team.4.evs.defense", 0x1A, [205], 205);
            mapper.AssertAreEqual("battle.ally.team.4.evs.speed", 0x1B, [35], 35);
            mapper.AssertAreEqual("battle.ally.team.4.evs.special_attack", 0x1C, [43], 43);
            mapper.AssertAreEqual("battle.ally.team.4.evs.special_defense", 0x1D, [161], 161);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_egg", 0x38, [184, 196, 223, 5], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_nicknamed", 0x38, [184, 196, 223, 5], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.skip_checksum_1", 0x4, [35], true);
            mapper.AssertAreEqual("battle.ally.team.4.flags.skip_checksum_2", 0x4, [35], true);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_bad_egg", 0x4, [35], false);
            mapper.AssertAreEqual("battle.ally.team.4.internals.personality_value", 0x0, [96, 0, 112, 3], 57671776);
            mapper.AssertAreEqual("battle.ally.team.4.internals.checksum", 0x6, [39, 34], 8743);
            mapper.AssertAreEqual("battle.ally.team.4.internals.secret_id", 0xE, [142, 81], 20878);
            mapper.AssertAreEqual("battle.ally.team.4.internals.language", 0x17, [160], null);
            mapper.AssertAreEqual("battle.ally.team.4.misc.markings", 0x16, [233], 233);
            mapper.AssertAreEqual("battle.ally.team.4.misc.sheen", 0x23, [36], 36);
            mapper.AssertAreEqual("battle.ally.team.4.misc.hgss_ball", 0x86, [247], 247);
            mapper.AssertAreEqual("battle.ally.team.4.misc.performance", 0x87, [193], 193);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.date_egg_received", 0x78, [250, 218, 176], 11590394);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.date_met", 0x7B, [214, 6, 210], 13764310);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.egg_location", 0x7E, [213, 150], 38613);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.met_location", 0x80, [144, 96], 24720);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.pokeball", 0x83, [50], 50);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.met_level", 0x84, [26], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.female_ot_gender", 0x84, [26], false);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.encounter_type", 0x85, [52], 52);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_cool", 0x1E, [217], 217);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_beauty", 0x1F, [53], 53);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_cute", 0x20, [34], 34);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_smart", 0x21, [244], 244);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_tough", 0x22, [29], 29);
            mapper.AssertAreEqual("battle.ally.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [94, 97, 195, 204], -859610786);
            mapper.AssertAreEqual("battle.ally.team.5.species", 0x8, [225, 5], null);
            mapper.AssertAreEqual("battle.ally.team.5.dex_number", 0x8, [225, 5], 1505);
            mapper.AssertAreEqual("battle.ally.team.5.nickname", 0x48, [21, 20, 178, 234, 122, 80, 203, 161, 232, 205, 254, 196, 75, 31, 60, 224, 143, 189, 6, 35, 111, 156], "");
            mapper.AssertAreEqual("battle.ally.team.5.level", 0x8C, [38], 38);
            mapper.AssertAreEqual("battle.ally.team.5.exp", 0x10, [225, 151, 53, 231], -415918111);
            mapper.AssertAreEqual("battle.ally.team.5.ot_name", 0x68, [28, 75, 164, 74, 75, 165, 177, 231, 152, 121, 102, 230, 229, 31, 39, 135], "");
            mapper.AssertAreEqual("battle.ally.team.5.ot_id", 0xC, [197, 157], 40389);
            mapper.AssertAreEqual("battle.ally.team.5.ability", 0x15, [134], null);
            mapper.AssertAreEqual("battle.ally.team.5.nature", 0x0, [0, 252, 7, 0], "Naive");
            mapper.AssertAreEqual("battle.ally.team.5.held_item", 0xA, [104, 106], null);
            mapper.AssertAreEqual("battle.ally.team.5.friendship", 0x14, [105], 105);
            mapper.AssertAreEqual("battle.ally.team.5.pokerus", 0x82, [150], 150);
            mapper.AssertAreEqual("battle.ally.team.5.status_condition", 0x88, [62], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.move", 0x28, [170, 209], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.pp", 0x30, [16], 16);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.pp_up", 0x34, [90], 1);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.move", 0x2A, [26, 164], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.pp", 0x31, [145], 17);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.pp_up", 0x35, [148], 2);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.move", 0x2C, [233, 147], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.pp", 0x32, [170], 42);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.pp_up", 0x36, [75], 1);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.move", 0x2E, [216, 160], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.pp", 0x33, [200], 8);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.pp_up", 0x37, [83], 1);
            mapper.AssertAreEqual("battle.ally.team.5.stats.hp", 0x8E, [42, 90], 23082);
            mapper.AssertAreEqual("battle.ally.team.5.stats.hp_max", 0x90, [25, 183], 46873);
            mapper.AssertAreEqual("battle.ally.team.5.stats.attack", 0x92, [36, 50], 12836);
            mapper.AssertAreEqual("battle.ally.team.5.stats.defense", 0x94, [161, 158], 40609);
            mapper.AssertAreEqual("battle.ally.team.5.stats.speed", 0x96, [231, 169], 43495);
            mapper.AssertAreEqual("battle.ally.team.5.stats.special_attack", 0x98, [125, 169], 43389);
            mapper.AssertAreEqual("battle.ally.team.5.stats.special_defense", 0x9A, [216, 84], 21720);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.hp", 0x38, [26, 88, 32, 175], 26);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.attack", 0x38, [26, 88, 32, 175], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.defense", 0x38, [26, 88, 32, 175], 22);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.speed", 0x38, [26, 88, 32, 175], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.special_attack", 0x38, [26, 88, 32, 175], 18);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.special_defense", 0x38, [26, 88, 32, 175], 23);
            mapper.AssertAreEqual("battle.ally.team.5.evs.hp", 0x18, [87], 87);
            mapper.AssertAreEqual("battle.ally.team.5.evs.attack", 0x19, [58], 58);
            mapper.AssertAreEqual("battle.ally.team.5.evs.defense", 0x1A, [155], 155);
            mapper.AssertAreEqual("battle.ally.team.5.evs.speed", 0x1B, [49], 49);
            mapper.AssertAreEqual("battle.ally.team.5.evs.special_attack", 0x1C, [13], 13);
            mapper.AssertAreEqual("battle.ally.team.5.evs.special_defense", 0x1D, [50], 50);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_egg", 0x38, [26, 88, 32, 175], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_nicknamed", 0x38, [26, 88, 32, 175], true);
            mapper.AssertAreEqual("battle.ally.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.internals.personality_value", 0x0, [0, 252, 7, 0], 523264);
            mapper.AssertAreEqual("battle.ally.team.5.internals.checksum", 0x6, [22, 74], 18966);
            mapper.AssertAreEqual("battle.ally.team.5.internals.secret_id", 0xE, [122, 9], 2426);
            mapper.AssertAreEqual("battle.ally.team.5.internals.language", 0x17, [246], null);
            mapper.AssertAreEqual("battle.ally.team.5.misc.markings", 0x16, [42], 42);
            mapper.AssertAreEqual("battle.ally.team.5.misc.sheen", 0x23, [128], 128);
            mapper.AssertAreEqual("battle.ally.team.5.misc.hgss_ball", 0x86, [75], 75);
            mapper.AssertAreEqual("battle.ally.team.5.misc.performance", 0x87, [253], 253);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.date_egg_received", 0x78, [156, 37, 242], 15869340);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.date_met", 0x7B, [145, 147, 71], 4690833);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.egg_location", 0x7E, [51, 36], 9267);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.met_location", 0x80, [114, 197], 50546);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.pokeball", 0x83, [227], 227);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.met_level", 0x84, [154], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.female_ot_gender", 0x84, [154], true);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.encounter_type", 0x85, [149], 149);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_cool", 0x1E, [110], 110);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_beauty", 0x1F, [93], 93);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_cute", 0x20, [170], 170);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_smart", 0x21, [75], 75);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_tough", 0x22, [69], 69);
            mapper.AssertAreEqual("battle.ally.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [107, 234, 28, 102], 1713171051);
            mapper.AssertAreEqual("battle.opponent.id", 0x22AFD7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.enemy_bar_synced_hp", 0x22B598C, [116, 89], 22900);
            mapper.AssertAreEqual("battle.opponent.team_count", 0x22BA084, [0], 0);
            mapper.AssertAreEqual("battle.opponent.party_position", 0x22B5C72, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0x22B5940, [68, 89], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nickname", 0x22B5976, [3, 16, 3, 16, 3, 16, 100, 89, 43, 2, 132, 89, 43, 2, 3, 16, 3, 16, 3, 16, 3, 16], "");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0x22B5974, [3], 3);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.exp", 0x22B59A4, [34, 48, 34, 48], 807546914);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nature", 0x22B59A8, [34, 48, 34, 48], "Naive");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.friendship", 0x22B5975, [16], 16);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ability", 0x22B5967, [48], "Early Bird");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0x22B5964, [49], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0x22B5965, [48], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ot_name", 0x22B5994, [76, 48, 23, 48, 23, 48, 23, 48], "");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0x22B59B8, [3, 16], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_condition", 0x22B59AC, [148], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0x22B594C, [52, 89], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0x22B596C, [84], 20);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0x22B594E, [43, 2], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0x22B596D, [89], 25);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0x22B5950, [84, 89], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0x22B596E, [43], 43);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0x22B5952, [43, 2], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0x22B596F, [2], 2);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0x22B598C, [116, 89], 22900);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0x22B5990, [148, 89], 22932);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0x22B5942, [43, 2], 555);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0x22B5944, [8, 16], 4104);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0x22B5946, [8, 16], 4104);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0x22B5948, [8, 16], 4104);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0x22B594A, [8, 16], 4104);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0x22B5959, [48], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0x22B595A, [49], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0x22B595B, [48], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0x22B595C, [68], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0x22B595D, [89], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0x22B595E, [43], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0x22B595F, [2], -4);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.hp", 0x22B5954, [137, 48, 49, 48], 9);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0x22B5954, [137, 48, 49, 48], 4);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0x22B5954, [137, 48, 49, 48], 12);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0x22B5954, [137, 48, 49, 48], 2);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_attack", 0x22B5954, [137, 48, 49, 48], 3);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_defense", 0x22B5954, [137, 48, 49, 48], 24);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.internals.personality_value", 0x22B59A8, [34, 48, 34, 48], 807546914);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0x8, [28, 111], null);
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0x8, [28, 111], 28444);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0x48, [149, 252, 12, 46, 144, 45, 128, 53, 151, 176, 131, 185, 116, 224, 213, 5, 245, 65, 0, 148, 109, 190], "");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0x8C, [29], 29);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0x10, [99, 38, 112, 103], 1735403107);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_name", 0x68, [172, 149, 210, 107, 245, 25, 7, 209, 197, 174, 105, 102, 141, 254, 125, 7], "");
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0xC, [128, 159], 40832);
            mapper.AssertAreEqual("battle.opponent.team.0.ability", 0x15, [134], null);
            mapper.AssertAreEqual("battle.opponent.team.0.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0xA, [160, 235], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0x14, [228], 228);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0x82, [83], 83);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0x88, [95], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0x28, [135, 196], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0x30, [119], 55);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0x34, [120], 1);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0x2A, [51, 236], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0x31, [205], 13);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0x35, [191], 2);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0x2C, [129, 26], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0x32, [255], 63);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0x36, [106], 1);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0x2E, [192, 202], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0x33, [36], 36);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0x37, [110], 1);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0x8E, [176, 49], 12720);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0x90, [66, 142], 36418);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0x92, [204, 226], 58060);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0x94, [166, 158], 40614);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0x96, [132, 1], 388);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0x98, [108, 142], 36460);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0x9A, [115, 159], 40819);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.hp", 0x38, [224, 228, 180, 243], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0x38, [224, 228, 180, 243], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0x38, [224, 228, 180, 243], 25);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0x38, [224, 228, 180, 243], 9);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_attack", 0x38, [224, 228, 180, 243], 27);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_defense", 0x38, [224, 228, 180, 243], 25);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0x18, [175], 175);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0x19, [158], 158);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0x1A, [221], 221);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0x1B, [118], 118);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_attack", 0x1C, [237], 237);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_defense", 0x1D, [10], 10);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_egg", 0x38, [224, 228, 180, 243], true);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_nicknamed", 0x38, [224, 228, 180, 243], true);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.skip_checksum_1", 0x4, [116], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.skip_checksum_2", 0x4, [116], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_bad_egg", 0x4, [116], true);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.checksum", 0x6, [101, 101], 25957);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.secret_id", 0xE, [98, 170], 43618);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.language", 0x17, [146], null);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.markings", 0x16, [4], 4);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.sheen", 0x23, [244], 244);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.hgss_ball", 0x86, [68], 68);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.performance", 0x87, [20], 20);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.date_egg_received", 0x78, [194, 119, 113], 7436226);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.date_met", 0x7B, [92, 252, 1], 130140);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.egg_location", 0x7E, [8, 143], 36616);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.met_location", 0x80, [95, 103], 26463);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.pokeball", 0x83, [102], 102);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.met_level", 0x84, [5], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.female_ot_gender", 0x84, [5], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.encounter_type", 0x85, [131], 131);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_cool", 0x1E, [251], 251);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_beauty", 0x1F, [248], 248);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_cute", 0x20, [53], 53);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_smart", 0x21, [192], 192);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_tough", 0x22, [11], 11);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [176, 197, 93, 8], 140363184);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0x8, [99, 49], null);
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0x8, [99, 49], 12643);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0x48, [181, 108, 39, 227, 151, 120, 253, 13, 146, 22, 184, 207, 93, 55, 128, 48, 31, 113, 164, 58, 34, 109], "");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0x8C, [29], 29);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0x10, [29, 254, 160, 226], -492765667);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_name", 0x68, [238, 219, 201, 16, 89, 205, 226, 199, 22, 108, 111, 110, 170, 49, 137, 170], "");
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0xC, [64, 13], 3392);
            mapper.AssertAreEqual("battle.opponent.team.1.ability", 0x15, [175], null);
            mapper.AssertAreEqual("battle.opponent.team.1.nature", 0x0, [95, 112, 108, 0], "Bold");
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0xA, [33, 155], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0x14, [197], 197);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0x82, [87], 87);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0x88, [167], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0x28, [212, 202], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0x30, [155], 27);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0x34, [209], 3);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0x2A, [190, 203], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0x31, [48], 48);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0x35, [191], 2);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0x2C, [252, 30], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0x32, [36], 36);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0x36, [182], 2);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0x2E, [26, 98], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0x33, [200], 8);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0x37, [56], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0x8E, [221, 248], 63709);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0x90, [182, 65], 16822);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0x92, [53, 7], 1845);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0x94, [173, 243], 62381);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0x96, [148, 188], 48276);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0x98, [16, 170], 43536);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0x9A, [219, 245], 62939);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.hp", 0x38, [92, 226, 74, 159], 28);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0x38, [92, 226, 74, 159], 18);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0x38, [92, 226, 74, 159], 24);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0x38, [92, 226, 74, 159], 21);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_attack", 0x38, [92, 226, 74, 159], 20);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_defense", 0x38, [92, 226, 74, 159], 15);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0x18, [80], 80);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0x19, [205], 205);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0x1A, [115], 115);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0x1B, [157], 157);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_attack", 0x1C, [111], 111);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_defense", 0x1D, [163], 163);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_egg", 0x38, [92, 226, 74, 159], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_nicknamed", 0x38, [92, 226, 74, 159], true);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.personality_value", 0x0, [95, 112, 108, 0], 7106655);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.secret_id", 0xE, [219, 3], 987);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.language", 0x17, [103], null);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.markings", 0x16, [219], 219);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.sheen", 0x23, [153], 153);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.hgss_ball", 0x86, [40], 40);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.performance", 0x87, [36], 36);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.date_egg_received", 0x78, [162, 226, 181], 11920034);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.date_met", 0x7B, [183, 171, 231], 15182775);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.egg_location", 0x7E, [163, 129], 33187);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.met_location", 0x80, [3, 228], 58371);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.pokeball", 0x83, [78], 78);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.met_level", 0x84, [95], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.female_ot_gender", 0x84, [95], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.encounter_type", 0x85, [90], 90);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_cool", 0x1E, [169], 169);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_beauty", 0x1F, [184], 184);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_cute", 0x20, [137], 137);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_smart", 0x21, [155], 155);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_tough", 0x22, [81], 81);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [188, 122, 167, 203], -878216516);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0x8, [195, 152], null);
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0x8, [195, 152], 39107);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0x48, [254, 117, 109, 144, 162, 39, 189, 2, 208, 91, 252, 255, 162, 201, 130, 48, 36, 102, 251, 72, 3, 50], "");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0x8C, [160], 160);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0x10, [196, 64, 72, 200], -934788924);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_name", 0x68, [192, 174, 218, 82, 208, 134, 151, 163, 73, 29, 43, 110, 162, 49, 153, 170], "");
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0xC, [142, 123], 31630);
            mapper.AssertAreEqual("battle.opponent.team.2.ability", 0x15, [191], null);
            mapper.AssertAreEqual("battle.opponent.team.2.nature", 0x0, [244, 43, 49, 2], "Careful");
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0xA, [225, 191], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0x14, [209], 209);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0x82, [51], 51);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0x88, [132], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0x28, [228, 16], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0x30, [6], 6);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0x34, [173], 2);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0x2A, [126, 233], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0x31, [219], 27);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0x35, [137], 2);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0x2C, [102, 80], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0x32, [204], 12);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0x36, [219], 3);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0x2E, [176, 114], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0x33, [226], 34);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0x37, [103], 1);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0x8E, [122, 154], 39546);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0x90, [206, 140], 36046);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0x92, [65, 156], 40001);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0x94, [127, 1], 383);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0x96, [31, 195], 49951);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0x98, [141, 48], 12429);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0x9A, [81, 196], 50257);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.hp", 0x38, [223, 184, 0, 237], 31);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0x38, [223, 184, 0, 237], 6);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0x38, [223, 184, 0, 237], 14);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0x38, [223, 184, 0, 237], 1);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_attack", 0x38, [223, 184, 0, 237], 16);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_defense", 0x38, [223, 184, 0, 237], 22);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0x18, [179], 179);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0x19, [132], 132);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0x1A, [35], 35);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0x1B, [251], 251);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_attack", 0x1C, [79], 79);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_defense", 0x1D, [125], 125);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_egg", 0x38, [223, 184, 0, 237], true);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_nicknamed", 0x38, [223, 184, 0, 237], true);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.skip_checksum_1", 0x4, [16], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.skip_checksum_2", 0x4, [16], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_bad_egg", 0x4, [16], false);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.personality_value", 0x0, [244, 43, 49, 2], 36776948);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.secret_id", 0xE, [127, 0], 127);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.language", 0x17, [56], null);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.markings", 0x16, [182], 182);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.sheen", 0x23, [112], 112);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.hgss_ball", 0x86, [40], 40);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.performance", 0x87, [36], 36);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.date_egg_received", 0x78, [186, 210, 234], 15389370);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.date_met", 0x7B, [195, 215, 130], 8574915);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.egg_location", 0x7E, [199, 224], 57543);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.met_location", 0x80, [88, 148], 37976);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.pokeball", 0x83, [78], 78);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.met_level", 0x84, [111], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.female_ot_gender", 0x84, [111], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.encounter_type", 0x85, [90], 90);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_cool", 0x1E, [52], 52);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_beauty", 0x1F, [190], 190);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_cute", 0x20, [136], 136);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_smart", 0x21, [218], 218);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_tough", 0x22, [106], 106);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [161, 221, 132, 186], -1165697631);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0x8, [76, 37], null);
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0x8, [76, 37], 9548);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0x48, [53, 87, 233, 35, 86, 16, 162, 109, 255, 236, 148, 165, 11, 122, 197, 147, 37, 173, 141, 61, 161, 177], "");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0x8C, [195], 195);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0x10, [76, 139, 97, 4], 73501516);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_name", 0x68, [44, 21, 198, 89, 14, 86, 180, 204, 43, 77, 189, 248, 146, 10, 146, 37], "");
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0xC, [159, 67], 17311);
            mapper.AssertAreEqual("battle.opponent.team.3.ability", 0x15, [85], "Heatproof");
            mapper.AssertAreEqual("battle.opponent.team.3.nature", 0x0, [11, 4, 0, 5], "Modest");
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0xA, [39, 220], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0x14, [237], 237);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0x82, [63], 63);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0x88, [191], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0x28, [151, 148], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0x30, [105], 41);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0x34, [111], 1);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0x2A, [98, 222], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0x31, [140], 12);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0x35, [254], 3);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0x2C, [147, 38], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0x32, [16], 16);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0x36, [51], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0x2E, [236, 102], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0x33, [2], 2);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0x37, [247], 3);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0x8E, [236, 218], 56044);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0x90, [46, 101], 25902);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0x92, [164, 75], 19364);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0x94, [114, 73], 18802);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0x96, [226, 114], 29410);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0x98, [5, 214], 54789);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0x9A, [221, 81], 20957);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.hp", 0x38, [140, 14, 35, 132], 12);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0x38, [140, 14, 35, 132], 20);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0x38, [140, 14, 35, 132], 3);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0x38, [140, 14, 35, 132], 6);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_attack", 0x38, [140, 14, 35, 132], 2);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_defense", 0x38, [140, 14, 35, 132], 2);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0x18, [120], 120);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0x19, [234], 234);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0x1A, [82], 82);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0x1B, [108], 108);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_attack", 0x1C, [38], 38);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_defense", 0x1D, [143], 143);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_egg", 0x38, [140, 14, 35, 132], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_nicknamed", 0x38, [140, 14, 35, 132], true);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.skip_checksum_1", 0x4, [3], true);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.skip_checksum_2", 0x4, [3], true);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_bad_egg", 0x4, [3], false);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.personality_value", 0x0, [11, 4, 0, 5], 83887115);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.checksum", 0x6, [1, 5], 1281);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.secret_id", 0xE, [49, 69], 17713);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.language", 0x17, [141], null);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.markings", 0x16, [217], 217);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.sheen", 0x23, [25], 25);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.hgss_ball", 0x86, [146], 146);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.performance", 0x87, [50], 50);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.date_egg_received", 0x78, [197, 81, 123], 8081861);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.date_met", 0x7B, [203, 119, 74], 4880331);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.egg_location", 0x7E, [117, 69], 17781);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.met_location", 0x80, [65, 154], 39489);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.pokeball", 0x83, [73], 73);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.met_level", 0x84, [197], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.female_ot_gender", 0x84, [197], true);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.encounter_type", 0x85, [253], 253);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_cool", 0x1E, [246], 246);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_beauty", 0x1F, [146], 146);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_cute", 0x20, [10], 10);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_smart", 0x21, [90], 90);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_tough", 0x22, [114], 114);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [177, 50, 167, 112], 1890005681);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0x8, [231, 5], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0x8, [231, 5], 1511);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0x48, [0, 17, 251, 178, 226, 78, 171, 26, 61, 169, 52, 66, 255, 81, 87, 194, 110, 17, 35, 7, 99, 61], "");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0x8C, [180], 180);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0x10, [95, 189, 227, 172], -1394360993);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_name", 0x68, [127, 71, 18, 247, 167, 157, 117, 14, 173, 179, 113, 236, 235, 16, 132, 250], "");
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0xC, [31, 87], 22303);
            mapper.AssertAreEqual("battle.opponent.team.4.ability", 0x15, [184], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nature", 0x0, [70, 0, 2, 0], "Quiet");
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0xA, [87, 50], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0x14, [159], 159);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0x82, [116], 116);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0x88, [221], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0x28, [166, 15], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0x30, [94], 30);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0x34, [60], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0x2A, [74, 160], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0x31, [66], 2);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0x35, [12], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0x2C, [4, 239], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0x32, [163], 35);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0x36, [239], 3);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0x2E, [36, 198], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0x33, [65], 1);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0x37, [92], 1);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0x8E, [134, 77], 19846);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0x90, [41, 116], 29737);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0x92, [225, 191], 49121);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0x94, [222, 149], 38366);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0x96, [123, 209], 53627);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0x98, [82, 135], 34642);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0x9A, [255, 241], 61951);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.hp", 0x38, [121, 128, 203, 177], 25);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0x38, [121, 128, 203, 177], 3);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0x38, [121, 128, 203, 177], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0x38, [121, 128, 203, 177], 23);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_attack", 0x38, [121, 128, 203, 177], 28);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_defense", 0x38, [121, 128, 203, 177], 24);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0x18, [207], 207);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0x19, [81], 81);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0x1A, [123], 123);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0x1B, [172], 172);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_attack", 0x1C, [164], 164);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_defense", 0x1D, [61], 61);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_egg", 0x38, [121, 128, 203, 177], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_nicknamed", 0x38, [121, 128, 203, 177], true);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.skip_checksum_1", 0x4, [43], true);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.skip_checksum_2", 0x4, [43], true);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_bad_egg", 0x4, [43], false);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.personality_value", 0x0, [70, 0, 2, 0], 131142);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.checksum", 0x6, [2, 2], 514);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.secret_id", 0xE, [210, 46], 11986);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.language", 0x17, [44], null);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.markings", 0x16, [200], 200);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.sheen", 0x23, [121], 121);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.hgss_ball", 0x86, [174], 174);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.performance", 0x87, [143], 143);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.date_egg_received", 0x78, [97, 171, 180], 11840353);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.date_met", 0x7B, [114, 228, 41], 2745458);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.egg_location", 0x7E, [11, 105], 26891);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.met_location", 0x80, [58, 196], 50234);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.pokeball", 0x83, [223], 223);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.met_level", 0x84, [121], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.female_ot_gender", 0x84, [121], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.encounter_type", 0x85, [193], 193);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_cool", 0x1E, [177], 177);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_beauty", 0x1F, [200], 200);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_cute", 0x20, [184], 184);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_smart", 0x21, [121], 121);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_tough", 0x22, [171], 171);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [109, 103, 168, 45], 766011245);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0x8, [240, 12], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0x8, [240, 12], 3312);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0x48, [200, 62, 222, 41, 238, 213, 254, 166, 241, 76, 122, 167, 175, 223, 93, 205, 178, 253, 123, 16, 166, 102], "");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0x8C, [143], 143);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0x10, [222, 250, 233, 102], 1726610142);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_name", 0x68, [61, 147, 240, 62, 88, 8, 235, 35, 126, 86, 72, 143, 140, 199, 32, 75], "");
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0xC, [232, 142], 36584);
            mapper.AssertAreEqual("battle.opponent.team.5.ability", 0x15, [119], "Frisk");
            mapper.AssertAreEqual("battle.opponent.team.5.nature", 0x0, [186, 83, 179, 45], "Careful");
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0xA, [138, 222], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0x14, [149], 149);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0x82, [96], 96);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0x88, [185], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0x28, [166, 102], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0x30, [38], 38);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0x34, [238], 3);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0x2A, [205, 162], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0x31, [215], 23);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0x35, [104], 1);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0x2C, [154, 100], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0x32, [215], 23);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0x2E, [136, 75], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0x33, [59], 59);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0x37, [151], 2);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0x8E, [126, 19], 4990);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0x90, [195, 71], 18371);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0x92, [133, 137], 35205);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0x94, [141, 163], 41869);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0x96, [122, 47], 12154);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0x98, [218, 121], 31194);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0x9A, [43, 11], 2859);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.hp", 0x38, [189, 124, 203, 127], 29);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0x38, [189, 124, 203, 127], 5);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0x38, [189, 124, 203, 127], 31);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0x38, [189, 124, 203, 127], 22);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_attack", 0x38, [189, 124, 203, 127], 28);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_defense", 0x38, [189, 124, 203, 127], 31);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0x18, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0x19, [255], 255);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0x1A, [233], 233);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0x1B, [94], 94);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_attack", 0x1C, [211], 211);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_defense", 0x1D, [159], 159);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_egg", 0x38, [189, 124, 203, 127], true);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_nicknamed", 0x38, [189, 124, 203, 127], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.skip_checksum_1", 0x4, [255], true);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.skip_checksum_2", 0x4, [255], true);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_bad_egg", 0x4, [255], true);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.personality_value", 0x0, [186, 83, 179, 45], 766727098);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.checksum", 0x6, [255, 255], 65535);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.secret_id", 0xE, [251, 194], 49915);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.language", 0x17, [119], null);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.markings", 0x16, [30], 30);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.sheen", 0x23, [78], 78);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.hgss_ball", 0x86, [133], 133);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.performance", 0x87, [173], 173);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.date_egg_received", 0x78, [15, 64, 175], 11485199);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.date_met", 0x7B, [138, 166, 64], 4236938);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.egg_location", 0x7E, [213, 71], 18389);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.met_location", 0x80, [237, 62], 16109);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.pokeball", 0x83, [155], 155);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.met_level", 0x84, [227], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.female_ot_gender", 0x84, [227], true);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.encounter_type", 0x85, [121], 121);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_cool", 0x1E, [223], 223);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_beauty", 0x1F, [50], 50);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_cute", 0x20, [44], 44);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_smart", 0x21, [208], 208);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_tough", 0x22, [88], 88);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [226, 93, 113, 238], -294560286);
            mapper.AssertAreEqual("battle.opponent_2.id", 0x22AFD82, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.party_position", 0x22B5C7E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.enemy_bar_synced_hp", 0x22B5B0C, [244, 90], 23284);
            mapper.AssertAreEqual("battle.opponent_2.team_count", 0x22BABE4, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.species", 0x22B5AC0, [196, 90], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nickname", 0x22B5AF6, [3, 16, 3, 16, 3, 16, 228, 90, 43, 2, 4, 91, 43, 2, 3, 16, 3, 16, 3, 16, 3, 16], "");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.level", 0x22B5AF4, [3], 3);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.exp", 0x22B5B24, [3, 16, 3, 16], 268636163);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nature", 0x22B5B28, [3, 16, 3, 16], "Jolly");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.friendship", 0x22B5AF5, [16], 16);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ability", 0x22B5AE7, [16], "Color Change");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_1", 0x22B5AE4, [3], "Poison");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_2", 0x22B5AE5, [16], "Dragon");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ot_name", 0x22B5B14, [3, 16, 3, 16, 3, 16, 3, 16], "");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.held_item", 0x22B5B38, [3, 16], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.status_condition", 0x22B5B2C, [20], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.move", 0x22B5ACC, [180, 90], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp", 0x22B5AEC, [212], 20);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.move", 0x22B5ACE, [43, 2], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp", 0x22B5AED, [90], 26);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.move", 0x22B5AD0, [212, 90], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp", 0x22B5AEE, [43], 43);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.move", 0x22B5AD2, [43, 2], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp", 0x22B5AEF, [2], 2);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp", 0x22B5B0C, [244, 90], 23284);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp_max", 0x22B5B10, [20, 91], 23316);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.attack", 0x22B5AC2, [43, 2], 555);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.defense", 0x22B5AC4, [8, 16], 4104);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.speed", 0x22B5AC6, [8, 16], 4104);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_attack", 0x22B5AC8, [8, 16], 4104);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_defense", 0x22B5ACA, [8, 16], 4104);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.attack", 0x22B5AD9, [16], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.defense", 0x22B5ADA, [3], -3);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.speed", 0x22B5ADB, [16], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_attack", 0x22B5ADC, [196], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_defense", 0x22B5ADD, [90], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.accuracy", 0x22B5ADE, [43], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.evasion", 0x22B5ADF, [2], -4);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.hp", 0x22B5AD4, [3, 16, 3, 16], 3);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.attack", 0x22B5AD4, [3, 16, 3, 16], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.defense", 0x22B5AD4, [3, 16, 3, 16], 4);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.speed", 0x22B5AD4, [3, 16, 3, 16], 6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_attack", 0x22B5AD4, [3, 16, 3, 16], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_defense", 0x22B5AD4, [3, 16, 3, 16], 8);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.internals.personality_value", 0x22B5B28, [3, 16, 3, 16], 268636163);
            mapper.AssertAreEqual("battle.opponent_2.team.0.species", 0x8, [112, 231], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.dex_number", 0x8, [112, 231], 59248);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nickname", 0x48, [175, 125, 48, 0, 107, 246, 126, 15, 170, 107, 117, 93, 74, 54, 4, 240, 82, 4, 63, 102, 140, 5], "");
            mapper.AssertAreEqual("battle.opponent_2.team.0.level", 0x8C, [220], 220);
            mapper.AssertAreEqual("battle.opponent_2.team.0.exp", 0x10, [240, 139, 97, 94], 1583451120);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_name", 0x68, [170, 213, 152, 86, 74, 29, 230, 114, 135, 145, 244, 8, 206, 55, 57, 41], "");
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_id", 0xC, [234, 207], 53226);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ability", 0x15, [129], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nature", 0x0, [192, 1, 128, 0], "Docile");
            mapper.AssertAreEqual("battle.opponent_2.team.0.held_item", 0xA, [71, 20], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.friendship", 0x14, [37], 37);
            mapper.AssertAreEqual("battle.opponent_2.team.0.pokerus", 0x82, [145], 145);
            mapper.AssertAreEqual("battle.opponent_2.team.0.status_condition", 0x88, [121], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.move", 0x28, [138, 158], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp", 0x30, [191], 63);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp_up", 0x34, [100], 1);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.move", 0x2A, [110, 66], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp", 0x31, [111], 47);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp_up", 0x35, [59], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.move", 0x2C, [52, 154], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp", 0x32, [19], 19);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp_up", 0x36, [104], 1);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.move", 0x2E, [159, 62], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp", 0x33, [170], 42);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp_up", 0x37, [181], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp", 0x8E, [172, 103], 26540);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp_max", 0x90, [129, 97], 24961);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.attack", 0x92, [5, 118], 30213);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.defense", 0x94, [134, 51], 13190);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.speed", 0x96, [210, 188], 48338);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_attack", 0x98, [77, 104], 26701);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_defense", 0x9A, [210, 195], 50130);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.hp", 0x38, [143, 81, 40, 204], 15);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.attack", 0x38, [143, 81, 40, 204], 12);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.defense", 0x38, [143, 81, 40, 204], 20);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.speed", 0x38, [143, 81, 40, 204], 16);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_attack", 0x38, [143, 81, 40, 204], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_defense", 0x38, [143, 81, 40, 204], 6);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.hp", 0x18, [80], 80);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.attack", 0x19, [161], 161);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.defense", 0x1A, [135], 135);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.speed", 0x1B, [188], 188);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_attack", 0x1C, [229], 229);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_defense", 0x1D, [26], 26);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_egg", 0x38, [143, 81, 40, 204], true);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_nicknamed", 0x38, [143, 81, 40, 204], true);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.skip_checksum_1", 0x4, [218], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.skip_checksum_2", 0x4, [218], true);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_bad_egg", 0x4, [218], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.personality_value", 0x0, [192, 1, 128, 0], 8389056);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.checksum", 0x6, [3, 0], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.secret_id", 0xE, [52, 157], 40244);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.language", 0x17, [215], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.markings", 0x16, [245], 245);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.sheen", 0x23, [21], 21);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.hgss_ball", 0x86, [134], 134);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.performance", 0x87, [28], 28);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.date_egg_received", 0x78, [36, 139, 173], 11373348);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.date_met", 0x7B, [19, 137, 21], 1411347);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.egg_location", 0x7E, [116, 27], 7028);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.met_location", 0x80, [80, 247], 63312);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.pokeball", 0x83, [210], 210);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.met_level", 0x84, [189], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.female_ot_gender", 0x84, [189], true);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.encounter_type", 0x85, [2], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_cool", 0x1E, [223], 223);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_beauty", 0x1F, [86], 86);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_cute", 0x20, [218], 218);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_smart", 0x21, [181], 181);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_tough", 0x22, [26], 26);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [2, 253, 180, 234], -357237502);
            mapper.AssertAreEqual("battle.opponent_2.team.1.species", 0x8, [127, 153], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.dex_number", 0x8, [127, 153], 39295);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nickname", 0x48, [224, 152, 146, 210, 166, 0, 27, 196, 195, 86, 241, 242, 66, 103, 159, 181, 199, 106, 207, 65, 99, 219], "");
            mapper.AssertAreEqual("battle.opponent_2.team.1.level", 0x8C, [104], 104);
            mapper.AssertAreEqual("battle.opponent_2.team.1.exp", 0x10, [250, 67, 234, 165], -1511373830);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_name", 0x68, [146, 35, 115, 217, 148, 104, 163, 53, 135, 103, 242, 108, 159, 18, 134, 80], "");
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_id", 0xC, [201, 177], 45513);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ability", 0x15, [220], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nature", 0x0, [112, 0, 80, 3], "Modest");
            mapper.AssertAreEqual("battle.opponent_2.team.1.held_item", 0xA, [165, 56], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.friendship", 0x14, [12], 12);
            mapper.AssertAreEqual("battle.opponent_2.team.1.pokerus", 0x82, [182], 182);
            mapper.AssertAreEqual("battle.opponent_2.team.1.status_condition", 0x88, [194], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.move", 0x28, [199, 149], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp", 0x30, [242], 50);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp_up", 0x34, [76], 1);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.move", 0x2A, [103, 120], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp", 0x31, [112], 48);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp_up", 0x35, [28], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.move", 0x2C, [106, 207], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp", 0x32, [72], 8);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp_up", 0x36, [174], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.move", 0x2E, [247, 241], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp", 0x33, [104], 40);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp_up", 0x37, [225], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp", 0x8E, [78, 249], 63822);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp_max", 0x90, [210, 239], 61394);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.attack", 0x92, [229, 255], 65509);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.defense", 0x94, [169, 151], 38825);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.speed", 0x96, [205, 105], 27085);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_attack", 0x98, [138, 246], 63114);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_defense", 0x9A, [67, 147], 37699);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.hp", 0x38, [247, 166, 202, 124], 23);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.attack", 0x38, [247, 166, 202, 124], 23);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.defense", 0x38, [247, 166, 202, 124], 9);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.speed", 0x38, [247, 166, 202, 124], 21);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_attack", 0x38, [247, 166, 202, 124], 12);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_defense", 0x38, [247, 166, 202, 124], 30);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.hp", 0x18, [188], 188);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.attack", 0x19, [117], 117);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.defense", 0x1A, [2], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.speed", 0x1B, [62], 62);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_attack", 0x1C, [195], 195);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_defense", 0x1D, [95], 95);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_egg", 0x38, [247, 166, 202, 124], true);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_nicknamed", 0x38, [247, 166, 202, 124], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.skip_checksum_1", 0x4, [107], true);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.skip_checksum_2", 0x4, [107], true);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_bad_egg", 0x4, [107], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.personality_value", 0x0, [112, 0, 80, 3], 55574640);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.checksum", 0x6, [37, 79], 20261);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.secret_id", 0xE, [135, 154], 39559);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.language", 0x17, [242], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.markings", 0x16, [237], 237);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.sheen", 0x23, [189], 189);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.hgss_ball", 0x86, [217], 217);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.performance", 0x87, [201], 201);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.date_egg_received", 0x78, [242, 125, 15], 1015282);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.date_met", 0x7B, [217, 180, 158], 10400985);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.egg_location", 0x7E, [232, 27], 7144);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.met_location", 0x80, [22, 55], 14102);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.pokeball", 0x83, [244], 244);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.met_level", 0x84, [21], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.female_ot_gender", 0x84, [21], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.encounter_type", 0x85, [51], 51);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_cool", 0x1E, [31], 31);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_beauty", 0x1F, [148], 148);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_cute", 0x20, [152], 152);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_smart", 0x21, [217], 217);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_tough", 0x22, [166], 166);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [47, 194, 146, 173], -1382890961);
            mapper.AssertAreEqual("battle.opponent_2.team.2.species", 0x8, [15, 5], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.dex_number", 0x8, [15, 5], 1295);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nickname", 0x48, [221, 181, 31, 8, 160, 236, 194, 207, 245, 218, 154, 178, 119, 203, 95, 185, 155, 228, 235, 45, 47, 40], "");
            mapper.AssertAreEqual("battle.opponent_2.team.2.level", 0x8C, [150], 150);
            mapper.AssertAreEqual("battle.opponent_2.team.2.exp", 0x10, [226, 63, 229, 64], 1088765922);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_name", 0x68, [228, 79, 17, 113, 4, 241, 190, 184, 121, 171, 160, 17, 153, 110, 124, 58], "");
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_id", 0xC, [239, 228], 58607);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ability", 0x15, [156], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nature", 0x0, [37, 34, 37, 34], "Quiet");
            mapper.AssertAreEqual("battle.opponent_2.team.2.held_item", 0xA, [11, 15], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.friendship", 0x14, [57], 57);
            mapper.AssertAreEqual("battle.opponent_2.team.2.pokerus", 0x82, [219], 219);
            mapper.AssertAreEqual("battle.opponent_2.team.2.status_condition", 0x88, [213], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.move", 0x28, [26, 172], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp", 0x30, [13], 13);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp_up", 0x34, [242], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.move", 0x2A, [147, 40], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp", 0x31, [185], 57);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp_up", 0x35, [82], 1);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.move", 0x2C, [129, 247], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp", 0x32, [246], 54);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp_up", 0x36, [225], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.move", 0x2E, [232, 155], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp", 0x33, [79], 15);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp_up", 0x37, [140], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp", 0x8E, [215, 55], 14295);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp_max", 0x90, [249, 146], 37625);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.attack", 0x92, [81, 142], 36433);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.defense", 0x94, [170, 221], 56746);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.speed", 0x96, [148, 140], 35988);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_attack", 0x98, [242, 105], 27122);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_defense", 0x9A, [225, 16], 4321);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.hp", 0x38, [160, 152, 240, 24], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.attack", 0x38, [160, 152, 240, 24], 5);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.defense", 0x38, [160, 152, 240, 24], 6);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.speed", 0x38, [160, 152, 240, 24], 1);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_attack", 0x38, [160, 152, 240, 24], 15);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_defense", 0x38, [160, 152, 240, 24], 12);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.hp", 0x18, [93], 93);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.attack", 0x19, [26], 26);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.defense", 0x1A, [3], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.speed", 0x1B, [216], 216);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_attack", 0x1C, [79], 79);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_defense", 0x1D, [253], 253);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_egg", 0x38, [160, 152, 240, 24], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_nicknamed", 0x38, [160, 152, 240, 24], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.personality_value", 0x0, [37, 34, 37, 34], 572858917);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.checksum", 0x6, [240, 102], 26352);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.secret_id", 0xE, [122, 248], 63610);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.language", 0x17, [66], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.markings", 0x16, [219], 219);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.sheen", 0x23, [223], 223);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.hgss_ball", 0x86, [84], 84);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.performance", 0x87, [146], 146);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.date_egg_received", 0x78, [112, 148, 176], 11572336);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.date_met", 0x7B, [53, 123, 43], 2849589);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.egg_location", 0x7E, [255, 116], 29951);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.met_location", 0x80, [210, 109], 28114);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.pokeball", 0x83, [112], 112);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.met_level", 0x84, [237], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.female_ot_gender", 0x84, [237], true);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.encounter_type", 0x85, [92], 92);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_cool", 0x1E, [153], 153);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_beauty", 0x1F, [46], 46);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_cute", 0x20, [126], 126);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_smart", 0x21, [113], 113);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_tough", 0x22, [63], 63);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [240, 72, 77, 226], -498251536);
            mapper.AssertAreEqual("battle.opponent_2.team.3.species", 0x8, [225, 66], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.dex_number", 0x8, [225, 66], 17121);
            mapper.AssertAreEqual("battle.opponent_2.team.3.nickname", 0x48, [207, 190, 81, 210, 22, 140, 233, 155, 45, 53, 35, 17, 195, 157, 243, 128, 105, 148, 216, 255, 133, 13], "");
            mapper.AssertAreEqual("battle.opponent_2.team.3.level", 0x8C, [33], 33);
            mapper.AssertAreEqual("battle.opponent_2.team.3.exp", 0x10, [211, 146, 213, 196], -992636205);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ot_name", 0x68, [168, 78, 23, 152, 79, 231, 101, 72, 94, 233, 3, 248, 148, 175, 5, 137], "");
            mapper.AssertAreEqual("battle.opponent_2.team.3.ot_id", 0xC, [32, 2], 544);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ability", 0x15, [123], "Bad Dreams");
            mapper.AssertAreEqual("battle.opponent_2.team.3.nature", 0x0, [0, 0, 240, 31], "Hasty");
            mapper.AssertAreEqual("battle.opponent_2.team.3.held_item", 0xA, [101, 225], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.friendship", 0x14, [48], 48);
            mapper.AssertAreEqual("battle.opponent_2.team.3.pokerus", 0x82, [235], 235);
            mapper.AssertAreEqual("battle.opponent_2.team.3.status_condition", 0x88, [48], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.move", 0x28, [69, 85], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.pp", 0x30, [106], 42);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.pp_up", 0x34, [61], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.move", 0x2A, [70, 116], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.pp", 0x31, [76], 12);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.pp_up", 0x35, [54], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.move", 0x2C, [13, 91], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.pp", 0x32, [42], 42);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.pp_up", 0x36, [141], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.move", 0x2E, [115, 63], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.pp", 0x33, [63], 63);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.pp_up", 0x37, [147], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.hp", 0x8E, [160, 96], 24736);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.hp_max", 0x90, [50, 136], 34866);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.attack", 0x92, [29, 160], 40989);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.defense", 0x94, [118, 31], 8054);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.speed", 0x96, [203, 149], 38347);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.special_attack", 0x98, [118, 85], 21878);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.special_defense", 0x9A, [92, 38], 9820);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.hp", 0x38, [230, 106, 119, 82], 6);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.attack", 0x38, [230, 106, 119, 82], 23);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.defense", 0x38, [230, 106, 119, 82], 26);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.speed", 0x38, [230, 106, 119, 82], 14);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.special_attack", 0x38, [230, 106, 119, 82], 7);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.special_defense", 0x38, [230, 106, 119, 82], 9);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.hp", 0x18, [142], 142);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.attack", 0x19, [126], 126);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.defense", 0x1A, [222], 222);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.speed", 0x1B, [151], 151);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.special_attack", 0x1C, [243], 243);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.special_defense", 0x1D, [139], 139);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_egg", 0x38, [230, 106, 119, 82], true);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_nicknamed", 0x38, [230, 106, 119, 82], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.personality_value", 0x0, [0, 0, 240, 31], 535822336);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.checksum", 0x6, [128, 64], 16512);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.secret_id", 0xE, [116, 212], 54388);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.language", 0x17, [250], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.markings", 0x16, [180], 180);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.sheen", 0x23, [167], 167);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.hgss_ball", 0x86, [9], 9);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.performance", 0x87, [215], 215);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.date_egg_received", 0x78, [124, 135, 187], 12289916);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.date_met", 0x7B, [121, 154, 33], 2202233);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.egg_location", 0x7E, [35, 63], 16163);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.met_location", 0x80, [233, 162], 41705);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.pokeball", 0x83, [3], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.met_level", 0x84, [122], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.female_ot_gender", 0x84, [122], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.encounter_type", 0x85, [103], 103);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_cool", 0x1E, [234], 234);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_beauty", 0x1F, [166], 166);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_cute", 0x20, [228], 228);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_smart", 0x21, [140], 140);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_tough", 0x22, [226], 226);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [49, 189, 88, 165], -1520911055);
            mapper.AssertAreEqual("battle.opponent_2.team.4.species", 0x8, [105, 177], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.dex_number", 0x8, [105, 177], 45417);
            mapper.AssertAreEqual("battle.opponent_2.team.4.nickname", 0x48, [106, 197, 48, 177, 200, 127, 243, 154, 30, 34, 118, 124, 230, 23, 126, 91, 198, 207, 118, 35, 220, 209], "");
            mapper.AssertAreEqual("battle.opponent_2.team.4.level", 0x8C, [135], 135);
            mapper.AssertAreEqual("battle.opponent_2.team.4.exp", 0x10, [37, 253, 198, 48], 818347301);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ot_name", 0x68, [89, 58, 102, 170, 75, 91, 251, 111, 53, 148, 232, 241, 87, 18, 39, 84], "");
            mapper.AssertAreEqual("battle.opponent_2.team.4.ot_id", 0xC, [11, 54], 13835);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ability", 0x15, [132], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.nature", 0x0, [75, 0, 192, 0], "Serious");
            mapper.AssertAreEqual("battle.opponent_2.team.4.held_item", 0xA, [33, 82], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.friendship", 0x14, [246], 246);
            mapper.AssertAreEqual("battle.opponent_2.team.4.pokerus", 0x82, [59], 59);
            mapper.AssertAreEqual("battle.opponent_2.team.4.status_condition", 0x88, [251], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.move", 0x28, [39, 77], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.pp", 0x30, [93], 29);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.pp_up", 0x34, [247], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.move", 0x2A, [197, 158], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.pp", 0x31, [88], 24);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.pp_up", 0x35, [171], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.move", 0x2C, [241, 119], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.pp", 0x32, [177], 49);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.pp_up", 0x36, [37], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.move", 0x2E, [10, 178], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.pp", 0x33, [197], 5);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.pp_up", 0x37, [112], 1);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.hp", 0x8E, [88, 62], 15960);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.hp_max", 0x90, [41, 249], 63785);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.attack", 0x92, [154, 235], 60314);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.defense", 0x94, [56, 164], 42040);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.speed", 0x96, [156, 166], 42652);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.special_attack", 0x98, [245, 244], 62709);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.special_defense", 0x9A, [60, 231], 59196);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.hp", 0x38, [158, 1, 59, 194], 30);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.attack", 0x38, [158, 1, 59, 194], 12);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.defense", 0x38, [158, 1, 59, 194], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.speed", 0x38, [158, 1, 59, 194], 22);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.special_attack", 0x38, [158, 1, 59, 194], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.special_defense", 0x38, [158, 1, 59, 194], 1);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.hp", 0x18, [116], 116);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.attack", 0x19, [42], 42);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.defense", 0x1A, [27], 27);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.speed", 0x1B, [189], 189);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.special_attack", 0x1C, [226], 226);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.special_defense", 0x1D, [78], 78);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_egg", 0x38, [158, 1, 59, 194], true);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_nicknamed", 0x38, [158, 1, 59, 194], true);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.personality_value", 0x0, [75, 0, 192, 0], 12582987);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.checksum", 0x6, [240, 31], 8176);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.secret_id", 0xE, [43, 33], 8491);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.language", 0x17, [7], "Spanish");
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.markings", 0x16, [194], 194);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.sheen", 0x23, [199], 199);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.hgss_ball", 0x86, [72], 72);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.performance", 0x87, [177], 177);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.date_egg_received", 0x78, [224, 23, 130], 8525792);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.date_met", 0x7B, [240, 47, 3], 208880);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.egg_location", 0x7E, [240, 188], 48368);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.met_location", 0x80, [24, 181], 46360);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.pokeball", 0x83, [6], 6);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.met_level", 0x84, [123], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.female_ot_gender", 0x84, [123], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.encounter_type", 0x85, [138], 138);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_cool", 0x1E, [185], 185);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_beauty", 0x1F, [174], 174);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_cute", 0x20, [43], 43);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_smart", 0x21, [56], 56);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_tough", 0x22, [156], 156);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [87, 48, 167, 100], 1688678487);
            mapper.AssertAreEqual("battle.opponent_2.team.5.species", 0x8, [3, 25], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.dex_number", 0x8, [3, 25], 6403);
            mapper.AssertAreEqual("battle.opponent_2.team.5.nickname", 0x48, [152, 17, 242, 27, 247, 223, 31, 184, 148, 83, 197, 50, 94, 132, 179, 179, 148, 50, 28, 223, 26, 255], "");
            mapper.AssertAreEqual("battle.opponent_2.team.5.level", 0x8C, [155], 155);
            mapper.AssertAreEqual("battle.opponent_2.team.5.exp", 0x10, [84, 187, 228, 41], 702856020);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ot_name", 0x68, [200, 126, 208, 140, 155, 212, 211, 84, 77, 218, 228, 120, 208, 48, 234, 209], "");
            mapper.AssertAreEqual("battle.opponent_2.team.5.ot_id", 0xC, [14, 140], 35854);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ability", 0x15, [31], "Lightningrod");
            mapper.AssertAreEqual("battle.opponent_2.team.5.nature", 0x0, [192, 0, 0, 4], "Docile");
            mapper.AssertAreEqual("battle.opponent_2.team.5.held_item", 0xA, [120, 73], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.friendship", 0x14, [195], 195);
            mapper.AssertAreEqual("battle.opponent_2.team.5.pokerus", 0x82, [110], 110);
            mapper.AssertAreEqual("battle.opponent_2.team.5.status_condition", 0x88, [254], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.move", 0x28, [70, 93], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.pp", 0x30, [224], 32);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.pp_up", 0x34, [49], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.move", 0x2A, [201, 20], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.pp", 0x31, [84], 20);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.pp_up", 0x35, [169], 2);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.move", 0x2C, [235, 29], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.pp", 0x32, [52], 52);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.pp_up", 0x36, [232], 3);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.move", 0x2E, [142, 109], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.pp", 0x33, [193], 1);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.pp_up", 0x37, [26], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.hp", 0x8E, [181, 216], 55477);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.hp_max", 0x90, [173, 249], 63917);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.attack", 0x92, [142, 186], 47758);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.defense", 0x94, [179, 213], 54707);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.speed", 0x96, [179, 209], 53683);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.special_attack", 0x98, [190, 245], 62910);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.special_defense", 0x9A, [243, 108], 27891);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.hp", 0x38, [180, 62, 96, 144], 20);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.attack", 0x38, [180, 62, 96, 144], 21);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.defense", 0x38, [180, 62, 96, 144], 15);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.speed", 0x38, [180, 62, 96, 144], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.special_attack", 0x38, [180, 62, 96, 144], 6);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.special_defense", 0x38, [180, 62, 96, 144], 8);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.hp", 0x18, [187], 187);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.attack", 0x19, [189], 189);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.defense", 0x1A, [163], 163);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.speed", 0x1B, [50], 50);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.special_attack", 0x1C, [135], 135);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.special_defense", 0x1D, [22], 22);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_egg", 0x38, [180, 62, 96, 144], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_nicknamed", 0x38, [180, 62, 96, 144], true);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.skip_checksum_1", 0x4, [233], true);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.skip_checksum_2", 0x4, [233], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_bad_egg", 0x4, [233], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.personality_value", 0x0, [192, 0, 0, 4], 67109056);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.checksum", 0x6, [37, 24], 6181);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.secret_id", 0xE, [171, 17], 4523);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.language", 0x17, [63], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.markings", 0x16, [24], 24);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.sheen", 0x23, [24], 24);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.hgss_ball", 0x86, [236], 236);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.performance", 0x87, [196], 196);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.date_egg_received", 0x78, [57, 7, 182], 11929401);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.date_met", 0x7B, [191, 234, 245], 16116415);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.egg_location", 0x7E, [19, 197], 50451);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.met_location", 0x80, [244, 223], 57332);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.pokeball", 0x83, [69], 69);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.met_level", 0x84, [57], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.female_ot_gender", 0x84, [57], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.encounter_type", 0x85, [38], 38);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_cool", 0x1E, [221], 221);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_beauty", 0x1F, [198], 198);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_cute", 0x20, [174], 174);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_smart", 0x21, [70], 70);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_tough", 0x22, [236], 236);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [40, 245, 116, 131], -2089487064);
            mapper.AssertAreEqual("battle.field.weather", 0x22B2CC0, [196, 44], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0x22B2CC4, [0], 0);
            mapper.AssertAreEqual("battle.other.outcome_flags", 0x22B5C5E, [3], 3);
        }
        [TestMethod]
        public async Task Diamond_Meta_State_Battle()
        {
            await Load_NDS_PokemonDiamond(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("meta.generation", "4");
            mapper.AssertAreEqual("meta.game_name", "Diamond and Pearl");
            mapper.AssertAreEqual("meta.game_type", "Originals");
            mapper.AssertAreEqual("meta.state", "Battle");
            mapper.AssertAreEqual("meta.state_enemy", "Pokemon In Battle");
            mapper.AssertAreEqual("meta.global_pointer", 0x2106FAC, [0, 3, 38, 2], 36045568);
            mapper.AssertAreEqual("meta.enemy_pointer", 0x22967C8, [248, 103, 41, 2], 36268024);
        }
        [TestMethod]
        public async Task Diamond_Battle_State_Battle()
        {
            await Load_NDS_PokemonDiamond(1);

            var mapper = await GameHookClient.GetMapperAsync();

            mapper.AssertAreEqual("battle.mode", "Trainer");
            mapper.AssertAreEqual("battle.outcome", null);
            mapper.AssertAreEqual("battle.player.party_position", 0x22B5C6C, [0], 0);
            mapper.AssertAreEqual("battle.player.party_position_2", 0x22B5C78, [0], 0);
            mapper.AssertAreEqual("battle.player.team_count", 0x22B9AD4, [1], 1);
            mapper.AssertAreEqual("battle.player.active_pokemon.species", 0x22B5880, [134, 1], "Chimchar");
            mapper.AssertAreEqual("battle.player.active_pokemon.nickname", 0x22B58B6, [43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 39, 1, 255, 255, 255, 255], "AAAAABBB6");
            mapper.AssertAreEqual("battle.player.active_pokemon.level", 0x22B58B4, [8], 8);
            mapper.AssertAreEqual("battle.player.active_pokemon.exp", 0x22B58E4, [59, 1, 0, 0], 315);
            mapper.AssertAreEqual("battle.player.active_pokemon.nature", 0x22B58E8, [141, 192, 226, 196], "Modest");
            mapper.AssertAreEqual("battle.player.active_pokemon.friendship", 0x22B58B5, [88], 88);
            mapper.AssertAreEqual("battle.player.active_pokemon.ability", 0x22B58A7, [66], "Blaze");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_1", 0x22B58A4, [10], "Fire");
            mapper.AssertAreEqual("battle.player.active_pokemon.type_2", 0x22B58A5, [10], "Fire");
            mapper.AssertAreEqual("battle.player.active_pokemon.ot_name", 0x22B58D4, [46, 1, 43, 1, 65, 1, 56, 1], "DAWN");
            mapper.AssertAreEqual("battle.player.active_pokemon.held_item", 0x22B58F8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.status_condition", 0x22B58EC, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.move", 0x22B588C, [10, 0], "Scratch");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp", 0x22B58AC, [30], 30);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.move", 0x22B588E, [43, 0], "Leer");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp", 0x22B58AD, [30], 30);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.move", 0x22B5890, [52, 0], "Ember");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp", 0x22B58AE, [21], 21);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.move", 0x22B5892, [241, 0], "Sunny Day");
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp", 0x22B58AF, [5], 5);
            mapper.AssertAreEqual("battle.player.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp", 0x22B58CC, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.hp_max", 0x22B58D0, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.attack", 0x22B5882, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.defense", 0x22B5884, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.speed", 0x22B5886, [16, 0], 16);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_attack", 0x22B5888, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.active_pokemon.stats.special_defense", 0x22B588A, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.attack", 0x22B5899, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.defense", 0x22B589A, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.speed", 0x22B589B, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_attack", 0x22B589C, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.special_defense", 0x22B589D, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.accuracy", 0x22B589E, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.modifiers.evasion", 0x22B589F, [6], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.hp", 0x22B5894, [68, 86, 90, 152], 4);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.attack", 0x22B5894, [68, 86, 90, 152], 18);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.defense", 0x22B5894, [68, 86, 90, 152], 21);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.speed", 0x22B5894, [68, 86, 90, 152], 20);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_attack", 0x22B5894, [68, 86, 90, 152], 5);
            mapper.AssertAreEqual("battle.player.active_pokemon.ivs.special_defense", 0x22B5894, [68, 86, 90, 152], 12);
            mapper.AssertAreEqual("battle.player.active_pokemon.internals.personality_value", 0x22B58E8, [141, 192, 226, 196], 3303194765);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.species", 0x22B5A00, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nickname", 0x22B5A36, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.level", 0x22B5A34, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.exp", 0x22B5A64, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.nature", 0x22B5A68, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.friendship", 0x22B5A35, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ability", 0x22B5A27, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_1", 0x22B5A24, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.type_2", 0x22B5A25, [0], "Normal");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ot_name", 0x22B5A54, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.held_item", 0x22B5A78, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.status_condition", 0x22B5A6C, [0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.move", 0x22B5A0C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp", 0x22B5A2C, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.move", 0x22B5A0E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp", 0x22B5A2D, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.move", 0x22B5A10, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp", 0x22B5A2E, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.move", 0x22B5A12, [0, 0], null);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp", 0x22B5A2F, [0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp", 0x22B5A4C, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.hp_max", 0x22B5A50, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.attack", 0x22B5A02, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.defense", 0x22B5A04, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.speed", 0x22B5A06, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_attack", 0x22B5A08, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.stats.special_defense", 0x22B5A0A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.attack", 0x22B5A19, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.defense", 0x22B5A1A, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.speed", 0x22B5A1B, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_attack", 0x22B5A1C, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.special_defense", 0x22B5A1D, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.accuracy", 0x22B5A1E, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.modifiers.evasion", 0x22B5A1F, [0], -6);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.hp", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.attack", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.defense", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.speed", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_attack", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.ivs.special_defense", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.active_pokemon_2.internals.personality_value", 0x22B5A68, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.species", 0x8, [134, 1], "Chimchar");
            mapper.AssertAreEqual("battle.player.team.0.dex_number", 0x8, [134, 1], 390);
            mapper.AssertAreEqual("battle.player.team.0.nickname", 0x48, [43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 39, 1, 255, 255, 120, 187], "AAAAABBB6");
            mapper.AssertAreEqual("battle.player.team.0.level", 0x8C, [8], 8);
            mapper.AssertAreEqual("battle.player.team.0.exp", 0x10, [59, 1, 0, 0], 315);
            mapper.AssertAreEqual("battle.player.team.0.ot_name", 0x68, [46, 1, 43, 1, 65, 1, 56, 1, 255, 255, 0, 0, 0, 0, 0, 0], "DAWN");
            mapper.AssertAreEqual("battle.player.team.0.ot_id", 0xC, [67, 103], 26435);
            mapper.AssertAreEqual("battle.player.team.0.ability", 0x15, [66], "Blaze");
            mapper.AssertAreEqual("battle.player.team.0.nature", 0x0, [141, 192, 226, 196], "Modest");
            mapper.AssertAreEqual("battle.player.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.0.friendship", 0x14, [88], 88);
            mapper.AssertAreEqual("battle.player.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.move", 0x28, [10, 0], "Scratch");
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp", 0x30, [30], 30);
            mapper.AssertAreEqual("battle.player.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.move", 0x2A, [43, 0], "Leer");
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp", 0x31, [30], 30);
            mapper.AssertAreEqual("battle.player.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.move", 0x2C, [52, 0], "Ember");
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp", 0x32, [21], 21);
            mapper.AssertAreEqual("battle.player.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.move", 0x2E, [241, 0], "Sunny Day");
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp", 0x33, [5], 5);
            mapper.AssertAreEqual("battle.player.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp", 0x8E, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.team.0.stats.hp_max", 0x90, [25, 0], 25);
            mapper.AssertAreEqual("battle.player.team.0.stats.attack", 0x92, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.0.stats.defense", 0x94, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.0.stats.speed", 0x96, [16, 0], 16);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_attack", 0x98, [15, 0], 15);
            mapper.AssertAreEqual("battle.player.team.0.stats.special_defense", 0x9A, [13, 0], 13);
            mapper.AssertAreEqual("battle.player.team.0.ivs.hp", 0x38, [68, 86, 90, 152], 4);
            mapper.AssertAreEqual("battle.player.team.0.ivs.attack", 0x38, [68, 86, 90, 152], 18);
            mapper.AssertAreEqual("battle.player.team.0.ivs.defense", 0x38, [68, 86, 90, 152], 21);
            mapper.AssertAreEqual("battle.player.team.0.ivs.speed", 0x38, [68, 86, 90, 152], 20);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_attack", 0x38, [68, 86, 90, 152], 5);
            mapper.AssertAreEqual("battle.player.team.0.ivs.special_defense", 0x38, [68, 86, 90, 152], 12);
            mapper.AssertAreEqual("battle.player.team.0.evs.hp", 0x18, [2], 2);
            mapper.AssertAreEqual("battle.player.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.evs.speed", 0x1B, [4], 4);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_egg", 0x38, [68, 86, 90, 152], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_nicknamed", 0x38, [68, 86, 90, 152], true);
            mapper.AssertAreEqual("battle.player.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.0.internals.personality_value", 0x0, [141, 192, 226, 196], 3303194765);
            mapper.AssertAreEqual("battle.player.team.0.internals.checksum", 0x6, [229, 30], 7909);
            mapper.AssertAreEqual("battle.player.team.0.internals.secret_id", 0xE, [192, 104], 26816);
            mapper.AssertAreEqual("battle.player.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.player.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.date_met", 0x7B, [10, 1, 1], 65802);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.met_location", 0x80, [76, 0], 76);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.met_level", 0x84, [133], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.female_ot_gender", 0x84, [133], true);
            mapper.AssertAreEqual("battle.player.team.0.misc.met_info.encounter_type", 0x85, [12], 12);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.player.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.player.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.player.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.player.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.player.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.species", 0x8, [143, 1], "Bidoof");
            mapper.AssertAreEqual("battle.wild.0.dex_number", 0x8, [143, 1], 399);
            mapper.AssertAreEqual("battle.wild.0.nickname", 0x48, [44, 1, 51, 1, 46, 1, 57, 1, 57, 1, 48, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0], "BIDOOF");
            mapper.AssertAreEqual("battle.wild.0.level", 0x8C, [3], 3);
            mapper.AssertAreEqual("battle.wild.0.exp", 0x10, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.wild.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.wild.0.ot_id", 0xC, [67, 103], 26435);
            mapper.AssertAreEqual("battle.wild.0.ability", 0x15, [109], "Unaware");
            mapper.AssertAreEqual("battle.wild.0.nature", 0x0, [217, 245, 48, 33], "Bashful");
            mapper.AssertAreEqual("battle.wild.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.0.friendship", 0x14, [70], 70);
            mapper.AssertAreEqual("battle.wild.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.wild.0.moves.0.move", 0x28, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.wild.0.moves.0.pp", 0x30, [35], 35);
            mapper.AssertAreEqual("battle.wild.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.stats.hp", 0x8E, [17, 0], 17);
            mapper.AssertAreEqual("battle.wild.0.stats.hp_max", 0x90, [17, 0], 17);
            mapper.AssertAreEqual("battle.wild.0.stats.attack", 0x92, [7, 0], 7);
            mapper.AssertAreEqual("battle.wild.0.stats.defense", 0x94, [7, 0], 7);
            mapper.AssertAreEqual("battle.wild.0.stats.speed", 0x96, [7, 0], 7);
            mapper.AssertAreEqual("battle.wild.0.stats.special_attack", 0x98, [7, 0], 7);
            mapper.AssertAreEqual("battle.wild.0.stats.special_defense", 0x9A, [8, 0], 8);
            mapper.AssertAreEqual("battle.wild.0.ivs.hp", 0x38, [17, 160, 34, 49], 17);
            mapper.AssertAreEqual("battle.wild.0.ivs.attack", 0x38, [17, 160, 34, 49], 0);
            mapper.AssertAreEqual("battle.wild.0.ivs.defense", 0x38, [17, 160, 34, 49], 8);
            mapper.AssertAreEqual("battle.wild.0.ivs.speed", 0x38, [17, 160, 34, 49], 5);
            mapper.AssertAreEqual("battle.wild.0.ivs.special_attack", 0x38, [17, 160, 34, 49], 18);
            mapper.AssertAreEqual("battle.wild.0.ivs.special_defense", 0x38, [17, 160, 34, 49], 24);
            mapper.AssertAreEqual("battle.wild.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.flags.is_egg", 0x38, [17, 160, 34, 49], false);
            mapper.AssertAreEqual("battle.wild.0.flags.is_nicknamed", 0x38, [17, 160, 34, 49], false);
            mapper.AssertAreEqual("battle.wild.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.0.internals.personality_value", 0x0, [217, 245, 48, 33], 556856793);
            mapper.AssertAreEqual("battle.wild.0.internals.checksum", 0x6, [155, 39], 10139);
            mapper.AssertAreEqual("battle.wild.0.internals.secret_id", 0xE, [192, 104], 26816);
            mapper.AssertAreEqual("battle.wild.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.wild.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.met_level", 0x84, [3], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.female_ot_gender", 0x84, [3], false);
            mapper.AssertAreEqual("battle.wild.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.wild.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.wild.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.wild.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.wild.1.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.wild.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.wild.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.wild.1.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.wild.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.wild.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.wild.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.name", 0x22AFD80, [52, 41], null);
            mapper.AssertAreEqual("battle.ally.trainer", 0x22AFD80, [52, 41], null);
            mapper.AssertAreEqual("battle.ally.id", 0x22AFD80, [52, 41], 10548);
            mapper.AssertAreEqual("battle.ally.enemy_bar_synced_hp", 0x22B5A4C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.party_position", 0x22B5C78, [0], 0);
            mapper.AssertAreEqual("battle.ally.team_count", 0x22BA634, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.species", 0x22B5A00, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nickname", 0x22B5A36, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.active_pokemon.level", 0x22B5A34, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.exp", 0x22B5A64, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.nature", 0x22B5A68, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.active_pokemon.friendship", 0x22B5A35, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ability", 0x22B5A27, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_1", 0x22B5A24, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.type_2", 0x22B5A25, [0], "Normal");
            mapper.AssertAreEqual("battle.ally.active_pokemon.ot_name", 0x22B5A54, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.active_pokemon.held_item", 0x22B5A78, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.status_condition", 0x22B5A6C, [0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.move", 0x22B5A0C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp", 0x22B5A2C, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.move", 0x22B5A0E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp", 0x22B5A2D, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.move", 0x22B5A10, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp", 0x22B5A2E, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.move", 0x22B5A12, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp", 0x22B5A2F, [0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp", 0x22B5A4C, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.hp_max", 0x22B5A50, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.attack", 0x22B5A02, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.defense", 0x22B5A04, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.speed", 0x22B5A06, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_attack", 0x22B5A08, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.stats.special_defense", 0x22B5A0A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.attack", 0x22B5A19, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.defense", 0x22B5A1A, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.speed", 0x22B5A1B, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_attack", 0x22B5A1C, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.special_defense", 0x22B5A1D, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.accuracy", 0x22B5A1E, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.modifiers.evasion", 0x22B5A1F, [0], -6);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.hp", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.attack", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.defense", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.speed", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_attack", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.ivs.special_defense", 0x22B5A14, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.active_pokemon.internals.personality_value", 0x22B5A68, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.0.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.0.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.ally.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.ally.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.ally.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.ally.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.ally.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.name", 0x22AFD7E, [44, 2], "Bird Keeper Krystal");
            mapper.AssertAreEqual("battle.opponent.trainer", 0x22AFD7E, [44, 2], "Bird Keeper Krystal");
            mapper.AssertAreEqual("battle.opponent.id", 0x22AFD7E, [44, 2], 556);
            mapper.AssertAreEqual("battle.opponent.enemy_bar_synced_hp", 0x22B598C, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.team_count", 0x22BA084, [1], 1);
            mapper.AssertAreEqual("battle.opponent.party_position", 0x22B5C72, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.species", 0x22B5940, [143, 1], "Bidoof");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nickname", 0x22B5976, [44, 1, 51, 1, 46, 1, 57, 1, 57, 1, 48, 1, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255], "BIDOOF");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.level", 0x22B5974, [3], 3);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.exp", 0x22B59A4, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.nature", 0x22B59A8, [217, 245, 48, 33], "Bashful");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.friendship", 0x22B5975, [70], 70);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ability", 0x22B5967, [109], "Unaware");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_1", 0x22B5964, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.type_2", 0x22B5965, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ot_name", 0x22B5994, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.held_item", 0x22B59B8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.status_condition", 0x22B59AC, [0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.move", 0x22B594C, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp", 0x22B596C, [35], 35);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.move", 0x22B594E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp", 0x22B596D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.move", 0x22B5950, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp", 0x22B596E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.move", 0x22B5952, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp", 0x22B596F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp", 0x22B598C, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.hp_max", 0x22B5990, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.attack", 0x22B5942, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.defense", 0x22B5944, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.speed", 0x22B5946, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_attack", 0x22B5948, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.stats.special_defense", 0x22B594A, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.attack", 0x22B5959, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.defense", 0x22B595A, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.speed", 0x22B595B, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_attack", 0x22B595C, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.special_defense", 0x22B595D, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.accuracy", 0x22B595E, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.modifiers.evasion", 0x22B595F, [6], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.hp", 0x22B5954, [17, 160, 34, 49], 17);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.attack", 0x22B5954, [17, 160, 34, 49], 0);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.defense", 0x22B5954, [17, 160, 34, 49], 8);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.speed", 0x22B5954, [17, 160, 34, 49], 5);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_attack", 0x22B5954, [17, 160, 34, 49], 18);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.ivs.special_defense", 0x22B5954, [17, 160, 34, 49], 24);
            mapper.AssertAreEqual("battle.opponent.active_pokemon.internals.personality_value", 0x22B59A8, [217, 245, 48, 33], 556856793);
            mapper.AssertAreEqual("battle.opponent.team.0.species", 0x8, [143, 1], "Bidoof");
            mapper.AssertAreEqual("battle.opponent.team.0.dex_number", 0x8, [143, 1], 399);
            mapper.AssertAreEqual("battle.opponent.team.0.nickname", 0x48, [44, 1, 51, 1, 46, 1, 57, 1, 57, 1, 48, 1, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0], "BIDOOF");
            mapper.AssertAreEqual("battle.opponent.team.0.level", 0x8C, [3], 3);
            mapper.AssertAreEqual("battle.opponent.team.0.exp", 0x10, [27, 0, 0, 0], 27);
            mapper.AssertAreEqual("battle.opponent.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.0.ot_id", 0xC, [67, 103], 26435);
            mapper.AssertAreEqual("battle.opponent.team.0.ability", 0x15, [109], "Unaware");
            mapper.AssertAreEqual("battle.opponent.team.0.nature", 0x0, [217, 245, 48, 33], "Bashful");
            mapper.AssertAreEqual("battle.opponent.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.friendship", 0x14, [70], 70);
            mapper.AssertAreEqual("battle.opponent.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.move", 0x28, [33, 0], "Tackle");
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp", 0x30, [35], 35);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp", 0x8E, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.hp_max", 0x90, [17, 0], 17);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.attack", 0x92, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.defense", 0x94, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.speed", 0x96, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_attack", 0x98, [7, 0], 7);
            mapper.AssertAreEqual("battle.opponent.team.0.stats.special_defense", 0x9A, [8, 0], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.hp", 0x38, [17, 160, 34, 49], 17);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.attack", 0x38, [17, 160, 34, 49], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.defense", 0x38, [17, 160, 34, 49], 8);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.speed", 0x38, [17, 160, 34, 49], 5);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_attack", 0x38, [17, 160, 34, 49], 18);
            mapper.AssertAreEqual("battle.opponent.team.0.ivs.special_defense", 0x38, [17, 160, 34, 49], 24);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_egg", 0x38, [17, 160, 34, 49], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_nicknamed", 0x38, [17, 160, 34, 49], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.personality_value", 0x0, [217, 245, 48, 33], 556856793);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.checksum", 0x6, [155, 39], 10139);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.secret_id", 0xE, [192, 104], 26816);
            mapper.AssertAreEqual("battle.opponent.team.0.internals.language", 0x17, [2], "English");
            mapper.AssertAreEqual("battle.opponent.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.pokeball", 0x83, [4], 4);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.met_level", 0x84, [3], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.female_ot_gender", 0x84, [3], false);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.name", 0x22AFD82, [45, 2], "Dragon Tamer Geoffrey");
            mapper.AssertAreEqual("battle.opponent_2.trainer", 0x22AFD82, [45, 2], "Dragon Tamer Geoffrey");
            mapper.AssertAreEqual("battle.opponent_2.id", 0x22AFD82, [45, 2], 557);
            mapper.AssertAreEqual("battle.opponent_2.party_position", 0x22B5C7E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.enemy_bar_synced_hp", 0x22B5B0C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team_count", 0x22BABE4, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.species", 0x22B5AC0, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nickname", 0x22B5AF6, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.level", 0x22B5AF4, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.exp", 0x22B5B24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.nature", 0x22B5B28, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.friendship", 0x22B5AF5, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ability", 0x22B5AE7, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_1", 0x22B5AE4, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.type_2", 0x22B5AE5, [0], "Normal");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ot_name", 0x22B5B14, [0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.held_item", 0x22B5B38, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.status_condition", 0x22B5B2C, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.move", 0x22B5ACC, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp", 0x22B5AEC, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.0.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.move", 0x22B5ACE, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp", 0x22B5AED, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.1.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.move", 0x22B5AD0, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp", 0x22B5AEE, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.2.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.move", 0x22B5AD2, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp", 0x22B5AEF, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.moves.3.pp_up", "null");
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp", 0x22B5B0C, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.hp_max", 0x22B5B10, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.attack", 0x22B5AC2, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.defense", 0x22B5AC4, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.speed", 0x22B5AC6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_attack", 0x22B5AC8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.stats.special_defense", 0x22B5ACA, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.attack", 0x22B5AD9, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.defense", 0x22B5ADA, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.speed", 0x22B5ADB, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_attack", 0x22B5ADC, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.special_defense", 0x22B5ADD, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.accuracy", 0x22B5ADE, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.modifiers.evasion", 0x22B5ADF, [0], -6);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.hp", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.attack", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.defense", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.speed", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_attack", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.ivs.special_defense", 0x22B5AD4, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.active_pokemon.internals.personality_value", 0x22B5B28, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.0.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.0.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.0.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.0.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.1.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.1.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.1.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.1.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.2.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.2.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.2.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.2.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.3.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.3.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.3.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.3.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.4.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.4.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.4.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.4.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.species", 0x8, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.dex_number", 0x8, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.nickname", 0x48, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.5.level", 0x8C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.exp", 0x10, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ot_name", 0x68, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "");
            mapper.AssertAreEqual("battle.opponent_2.team.5.ot_id", 0xC, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ability", 0x15, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.nature", 0x0, [0, 0, 0, 0], "Hardy");
            mapper.AssertAreEqual("battle.opponent_2.team.5.held_item", 0xA, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.friendship", 0x14, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.pokerus", 0x82, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.status_condition", 0x88, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.move", 0x28, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.pp", 0x30, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.0.pp_up", 0x34, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.move", 0x2A, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.pp", 0x31, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.1.pp_up", 0x35, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.move", 0x2C, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.pp", 0x32, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.2.pp_up", 0x36, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.move", 0x2E, [0, 0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.pp", 0x33, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.moves.3.pp_up", 0x37, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.hp", 0x8E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.hp_max", 0x90, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.attack", 0x92, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.defense", 0x94, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.speed", 0x96, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.special_attack", 0x98, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.stats.special_defense", 0x9A, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.hp", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.speed", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.special_attack", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.ivs.special_defense", 0x38, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.hp", 0x18, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.attack", 0x19, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.defense", 0x1A, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.speed", 0x1B, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.special_attack", 0x1C, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.evs.special_defense", 0x1D, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_egg", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_nicknamed", 0x38, [0, 0, 0, 0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.skip_checksum_1", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.skip_checksum_2", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.flags.is_bad_egg", 0x4, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.personality_value", 0x0, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.checksum", 0x6, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.secret_id", 0xE, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.internals.language", 0x17, [0], null);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.markings", 0x16, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.sheen", 0x23, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.hgss_ball", 0x86, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.performance", 0x87, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.date_egg_received", 0x78, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.date_met", 0x7B, [0, 0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.egg_location", 0x7E, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.met_location", 0x80, [0, 0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.pokeball", 0x83, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.met_level", 0x84, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.female_ot_gender", 0x84, [0], false);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.met_info.encounter_type", 0x85, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_cool", 0x1E, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_beauty", 0x1F, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_cute", 0x20, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_smart", 0x21, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.contest.contest_tough", 0x22, [0], 0);
            mapper.AssertAreEqual("battle.opponent_2.team.5.misc.ribbons.ribbons_sinnoh_set_1", 0x24, [0, 0, 0, 0], 0);
            mapper.AssertAreEqual("battle.field.weather", 0x22B2CC0, [0, 0], null);
            mapper.AssertAreEqual("battle.field.weather_count", 0x22B2CC4, [0], 0);
            mapper.AssertAreEqual("battle.other.outcome_flags", 0x22B5C5E, [0], 0);
        }
    }
}
